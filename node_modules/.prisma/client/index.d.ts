
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Form
 * 
 */
export type Form = $Result.DefaultSelection<Prisma.$FormPayload>
/**
 * Model Theme
 * 
 */
export type Theme = $Result.DefaultSelection<Prisma.$ThemePayload>
/**
 * Model FormSettings
 * 
 */
export type FormSettings = $Result.DefaultSelection<Prisma.$FormSettingsPayload>
/**
 * Model NotificationEmail
 * 
 */
export type NotificationEmail = $Result.DefaultSelection<Prisma.$NotificationEmailPayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model ConditionalLogic
 * 
 */
export type ConditionalLogic = $Result.DefaultSelection<Prisma.$ConditionalLogicPayload>
/**
 * Model ConditionalRule
 * 
 */
export type ConditionalRule = $Result.DefaultSelection<Prisma.$ConditionalRulePayload>
/**
 * Model Response
 * 
 */
export type Response = $Result.DefaultSelection<Prisma.$ResponsePayload>
/**
 * Model Answer
 * 
 */
export type Answer = $Result.DefaultSelection<Prisma.$AnswerPayload>
/**
 * Model FormVisit
 * 
 */
export type FormVisit = $Result.DefaultSelection<Prisma.$FormVisitPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.form`: Exposes CRUD operations for the **Form** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Forms
    * const forms = await prisma.form.findMany()
    * ```
    */
  get form(): Prisma.FormDelegate<ExtArgs>;

  /**
   * `prisma.theme`: Exposes CRUD operations for the **Theme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Themes
    * const themes = await prisma.theme.findMany()
    * ```
    */
  get theme(): Prisma.ThemeDelegate<ExtArgs>;

  /**
   * `prisma.formSettings`: Exposes CRUD operations for the **FormSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FormSettings
    * const formSettings = await prisma.formSettings.findMany()
    * ```
    */
  get formSettings(): Prisma.FormSettingsDelegate<ExtArgs>;

  /**
   * `prisma.notificationEmail`: Exposes CRUD operations for the **NotificationEmail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationEmails
    * const notificationEmails = await prisma.notificationEmail.findMany()
    * ```
    */
  get notificationEmail(): Prisma.NotificationEmailDelegate<ExtArgs>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs>;

  /**
   * `prisma.conditionalLogic`: Exposes CRUD operations for the **ConditionalLogic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConditionalLogics
    * const conditionalLogics = await prisma.conditionalLogic.findMany()
    * ```
    */
  get conditionalLogic(): Prisma.ConditionalLogicDelegate<ExtArgs>;

  /**
   * `prisma.conditionalRule`: Exposes CRUD operations for the **ConditionalRule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConditionalRules
    * const conditionalRules = await prisma.conditionalRule.findMany()
    * ```
    */
  get conditionalRule(): Prisma.ConditionalRuleDelegate<ExtArgs>;

  /**
   * `prisma.response`: Exposes CRUD operations for the **Response** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Responses
    * const responses = await prisma.response.findMany()
    * ```
    */
  get response(): Prisma.ResponseDelegate<ExtArgs>;

  /**
   * `prisma.answer`: Exposes CRUD operations for the **Answer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Answers
    * const answers = await prisma.answer.findMany()
    * ```
    */
  get answer(): Prisma.AnswerDelegate<ExtArgs>;

  /**
   * `prisma.formVisit`: Exposes CRUD operations for the **FormVisit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FormVisits
    * const formVisits = await prisma.formVisit.findMany()
    * ```
    */
  get formVisit(): Prisma.FormVisitDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Form: 'Form',
    Theme: 'Theme',
    FormSettings: 'FormSettings',
    NotificationEmail: 'NotificationEmail',
    Question: 'Question',
    ConditionalLogic: 'ConditionalLogic',
    ConditionalRule: 'ConditionalRule',
    Response: 'Response',
    Answer: 'Answer',
    FormVisit: 'FormVisit'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "form" | "theme" | "formSettings" | "notificationEmail" | "question" | "conditionalLogic" | "conditionalRule" | "response" | "answer" | "formVisit"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Form: {
        payload: Prisma.$FormPayload<ExtArgs>
        fields: Prisma.FormFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FormFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FormFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          findFirst: {
            args: Prisma.FormFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FormFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          findMany: {
            args: Prisma.FormFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>[]
          }
          create: {
            args: Prisma.FormCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          createMany: {
            args: Prisma.FormCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FormCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>[]
          }
          delete: {
            args: Prisma.FormDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          update: {
            args: Prisma.FormUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          deleteMany: {
            args: Prisma.FormDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FormUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FormUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormPayload>
          }
          aggregate: {
            args: Prisma.FormAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateForm>
          }
          groupBy: {
            args: Prisma.FormGroupByArgs<ExtArgs>
            result: $Utils.Optional<FormGroupByOutputType>[]
          }
          count: {
            args: Prisma.FormCountArgs<ExtArgs>
            result: $Utils.Optional<FormCountAggregateOutputType> | number
          }
        }
      }
      Theme: {
        payload: Prisma.$ThemePayload<ExtArgs>
        fields: Prisma.ThemeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThemeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThemeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          findFirst: {
            args: Prisma.ThemeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThemeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          findMany: {
            args: Prisma.ThemeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>[]
          }
          create: {
            args: Prisma.ThemeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          createMany: {
            args: Prisma.ThemeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ThemeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>[]
          }
          delete: {
            args: Prisma.ThemeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          update: {
            args: Prisma.ThemeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          deleteMany: {
            args: Prisma.ThemeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ThemeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ThemeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          aggregate: {
            args: Prisma.ThemeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTheme>
          }
          groupBy: {
            args: Prisma.ThemeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThemeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThemeCountArgs<ExtArgs>
            result: $Utils.Optional<ThemeCountAggregateOutputType> | number
          }
        }
      }
      FormSettings: {
        payload: Prisma.$FormSettingsPayload<ExtArgs>
        fields: Prisma.FormSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FormSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FormSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSettingsPayload>
          }
          findFirst: {
            args: Prisma.FormSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FormSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSettingsPayload>
          }
          findMany: {
            args: Prisma.FormSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSettingsPayload>[]
          }
          create: {
            args: Prisma.FormSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSettingsPayload>
          }
          createMany: {
            args: Prisma.FormSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FormSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSettingsPayload>[]
          }
          delete: {
            args: Prisma.FormSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSettingsPayload>
          }
          update: {
            args: Prisma.FormSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSettingsPayload>
          }
          deleteMany: {
            args: Prisma.FormSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FormSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FormSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSettingsPayload>
          }
          aggregate: {
            args: Prisma.FormSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFormSettings>
          }
          groupBy: {
            args: Prisma.FormSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<FormSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.FormSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<FormSettingsCountAggregateOutputType> | number
          }
        }
      }
      NotificationEmail: {
        payload: Prisma.$NotificationEmailPayload<ExtArgs>
        fields: Prisma.NotificationEmailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationEmailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationEmailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationEmailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationEmailPayload>
          }
          findFirst: {
            args: Prisma.NotificationEmailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationEmailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationEmailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationEmailPayload>
          }
          findMany: {
            args: Prisma.NotificationEmailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationEmailPayload>[]
          }
          create: {
            args: Prisma.NotificationEmailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationEmailPayload>
          }
          createMany: {
            args: Prisma.NotificationEmailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationEmailCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationEmailPayload>[]
          }
          delete: {
            args: Prisma.NotificationEmailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationEmailPayload>
          }
          update: {
            args: Prisma.NotificationEmailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationEmailPayload>
          }
          deleteMany: {
            args: Prisma.NotificationEmailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationEmailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationEmailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationEmailPayload>
          }
          aggregate: {
            args: Prisma.NotificationEmailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationEmail>
          }
          groupBy: {
            args: Prisma.NotificationEmailGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationEmailGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationEmailCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationEmailCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      ConditionalLogic: {
        payload: Prisma.$ConditionalLogicPayload<ExtArgs>
        fields: Prisma.ConditionalLogicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConditionalLogicFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalLogicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConditionalLogicFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalLogicPayload>
          }
          findFirst: {
            args: Prisma.ConditionalLogicFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalLogicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConditionalLogicFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalLogicPayload>
          }
          findMany: {
            args: Prisma.ConditionalLogicFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalLogicPayload>[]
          }
          create: {
            args: Prisma.ConditionalLogicCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalLogicPayload>
          }
          createMany: {
            args: Prisma.ConditionalLogicCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConditionalLogicCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalLogicPayload>[]
          }
          delete: {
            args: Prisma.ConditionalLogicDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalLogicPayload>
          }
          update: {
            args: Prisma.ConditionalLogicUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalLogicPayload>
          }
          deleteMany: {
            args: Prisma.ConditionalLogicDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConditionalLogicUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConditionalLogicUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalLogicPayload>
          }
          aggregate: {
            args: Prisma.ConditionalLogicAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConditionalLogic>
          }
          groupBy: {
            args: Prisma.ConditionalLogicGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConditionalLogicGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConditionalLogicCountArgs<ExtArgs>
            result: $Utils.Optional<ConditionalLogicCountAggregateOutputType> | number
          }
        }
      }
      ConditionalRule: {
        payload: Prisma.$ConditionalRulePayload<ExtArgs>
        fields: Prisma.ConditionalRuleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConditionalRuleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalRulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConditionalRuleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalRulePayload>
          }
          findFirst: {
            args: Prisma.ConditionalRuleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalRulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConditionalRuleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalRulePayload>
          }
          findMany: {
            args: Prisma.ConditionalRuleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalRulePayload>[]
          }
          create: {
            args: Prisma.ConditionalRuleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalRulePayload>
          }
          createMany: {
            args: Prisma.ConditionalRuleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConditionalRuleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalRulePayload>[]
          }
          delete: {
            args: Prisma.ConditionalRuleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalRulePayload>
          }
          update: {
            args: Prisma.ConditionalRuleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalRulePayload>
          }
          deleteMany: {
            args: Prisma.ConditionalRuleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConditionalRuleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConditionalRuleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionalRulePayload>
          }
          aggregate: {
            args: Prisma.ConditionalRuleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConditionalRule>
          }
          groupBy: {
            args: Prisma.ConditionalRuleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConditionalRuleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConditionalRuleCountArgs<ExtArgs>
            result: $Utils.Optional<ConditionalRuleCountAggregateOutputType> | number
          }
        }
      }
      Response: {
        payload: Prisma.$ResponsePayload<ExtArgs>
        fields: Prisma.ResponseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResponseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResponseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload>
          }
          findFirst: {
            args: Prisma.ResponseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResponseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload>
          }
          findMany: {
            args: Prisma.ResponseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload>[]
          }
          create: {
            args: Prisma.ResponseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload>
          }
          createMany: {
            args: Prisma.ResponseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResponseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload>[]
          }
          delete: {
            args: Prisma.ResponseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload>
          }
          update: {
            args: Prisma.ResponseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload>
          }
          deleteMany: {
            args: Prisma.ResponseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResponseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ResponseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponsePayload>
          }
          aggregate: {
            args: Prisma.ResponseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResponse>
          }
          groupBy: {
            args: Prisma.ResponseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResponseCountArgs<ExtArgs>
            result: $Utils.Optional<ResponseCountAggregateOutputType> | number
          }
        }
      }
      Answer: {
        payload: Prisma.$AnswerPayload<ExtArgs>
        fields: Prisma.AnswerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnswerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnswerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>
          }
          findFirst: {
            args: Prisma.AnswerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnswerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>
          }
          findMany: {
            args: Prisma.AnswerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>[]
          }
          create: {
            args: Prisma.AnswerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>
          }
          createMany: {
            args: Prisma.AnswerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnswerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>[]
          }
          delete: {
            args: Prisma.AnswerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>
          }
          update: {
            args: Prisma.AnswerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>
          }
          deleteMany: {
            args: Prisma.AnswerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnswerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AnswerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>
          }
          aggregate: {
            args: Prisma.AnswerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnswer>
          }
          groupBy: {
            args: Prisma.AnswerGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnswerCountArgs<ExtArgs>
            result: $Utils.Optional<AnswerCountAggregateOutputType> | number
          }
        }
      }
      FormVisit: {
        payload: Prisma.$FormVisitPayload<ExtArgs>
        fields: Prisma.FormVisitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FormVisitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormVisitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FormVisitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormVisitPayload>
          }
          findFirst: {
            args: Prisma.FormVisitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormVisitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FormVisitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormVisitPayload>
          }
          findMany: {
            args: Prisma.FormVisitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormVisitPayload>[]
          }
          create: {
            args: Prisma.FormVisitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormVisitPayload>
          }
          createMany: {
            args: Prisma.FormVisitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FormVisitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormVisitPayload>[]
          }
          delete: {
            args: Prisma.FormVisitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormVisitPayload>
          }
          update: {
            args: Prisma.FormVisitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormVisitPayload>
          }
          deleteMany: {
            args: Prisma.FormVisitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FormVisitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FormVisitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormVisitPayload>
          }
          aggregate: {
            args: Prisma.FormVisitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFormVisit>
          }
          groupBy: {
            args: Prisma.FormVisitGroupByArgs<ExtArgs>
            result: $Utils.Optional<FormVisitGroupByOutputType>[]
          }
          count: {
            args: Prisma.FormVisitCountArgs<ExtArgs>
            result: $Utils.Optional<FormVisitCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    forms: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    forms?: boolean | UserCountOutputTypeCountFormsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFormsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormWhereInput
  }


  /**
   * Count Type FormCountOutputType
   */

  export type FormCountOutputType = {
    questions: number
    responses: number
    visits: number
  }

  export type FormCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | FormCountOutputTypeCountQuestionsArgs
    responses?: boolean | FormCountOutputTypeCountResponsesArgs
    visits?: boolean | FormCountOutputTypeCountVisitsArgs
  }

  // Custom InputTypes
  /**
   * FormCountOutputType without action
   */
  export type FormCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormCountOutputType
     */
    select?: FormCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FormCountOutputType without action
   */
  export type FormCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }

  /**
   * FormCountOutputType without action
   */
  export type FormCountOutputTypeCountResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResponseWhereInput
  }

  /**
   * FormCountOutputType without action
   */
  export type FormCountOutputTypeCountVisitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormVisitWhereInput
  }


  /**
   * Count Type FormSettingsCountOutputType
   */

  export type FormSettingsCountOutputType = {
    notificationEmails: number
  }

  export type FormSettingsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notificationEmails?: boolean | FormSettingsCountOutputTypeCountNotificationEmailsArgs
  }

  // Custom InputTypes
  /**
   * FormSettingsCountOutputType without action
   */
  export type FormSettingsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSettingsCountOutputType
     */
    select?: FormSettingsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FormSettingsCountOutputType without action
   */
  export type FormSettingsCountOutputTypeCountNotificationEmailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationEmailWhereInput
  }


  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    answers: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | QuestionCountOutputTypeCountAnswersArgs
  }

  // Custom InputTypes
  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnswerWhereInput
  }


  /**
   * Count Type ConditionalLogicCountOutputType
   */

  export type ConditionalLogicCountOutputType = {
    rules: number
  }

  export type ConditionalLogicCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rules?: boolean | ConditionalLogicCountOutputTypeCountRulesArgs
  }

  // Custom InputTypes
  /**
   * ConditionalLogicCountOutputType without action
   */
  export type ConditionalLogicCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalLogicCountOutputType
     */
    select?: ConditionalLogicCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConditionalLogicCountOutputType without action
   */
  export type ConditionalLogicCountOutputTypeCountRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConditionalRuleWhereInput
  }


  /**
   * Count Type ResponseCountOutputType
   */

  export type ResponseCountOutputType = {
    answers: number
  }

  export type ResponseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | ResponseCountOutputTypeCountAnswersArgs
  }

  // Custom InputTypes
  /**
   * ResponseCountOutputType without action
   */
  export type ResponseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponseCountOutputType
     */
    select?: ResponseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ResponseCountOutputType without action
   */
  export type ResponseCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnswerWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    password: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    forms?: boolean | User$formsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    forms?: boolean | User$formsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      forms: Prisma.$FormPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      password: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    forms<T extends User$formsArgs<ExtArgs> = {}>(args?: Subset<T, User$formsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.forms
   */
  export type User$formsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    where?: FormWhereInput
    orderBy?: FormOrderByWithRelationInput | FormOrderByWithRelationInput[]
    cursor?: FormWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FormScalarFieldEnum | FormScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Form
   */

  export type AggregateForm = {
    _count: FormCountAggregateOutputType | null
    _min: FormMinAggregateOutputType | null
    _max: FormMaxAggregateOutputType | null
  }

  export type FormMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    isPublished: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type FormMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    isPublished: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type FormCountAggregateOutputType = {
    id: number
    title: number
    description: number
    isPublished: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type FormMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    isPublished?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type FormMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    isPublished?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type FormCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    isPublished?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type FormAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Form to aggregate.
     */
    where?: FormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Forms to fetch.
     */
    orderBy?: FormOrderByWithRelationInput | FormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Forms
    **/
    _count?: true | FormCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormMaxAggregateInputType
  }

  export type GetFormAggregateType<T extends FormAggregateArgs> = {
        [P in keyof T & keyof AggregateForm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForm[P]>
      : GetScalarType<T[P], AggregateForm[P]>
  }




  export type FormGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormWhereInput
    orderBy?: FormOrderByWithAggregationInput | FormOrderByWithAggregationInput[]
    by: FormScalarFieldEnum[] | FormScalarFieldEnum
    having?: FormScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormCountAggregateInputType | true
    _min?: FormMinAggregateInputType
    _max?: FormMaxAggregateInputType
  }

  export type FormGroupByOutputType = {
    id: string
    title: string
    description: string | null
    isPublished: boolean
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: FormCountAggregateOutputType | null
    _min: FormMinAggregateOutputType | null
    _max: FormMaxAggregateOutputType | null
  }

  type GetFormGroupByPayload<T extends FormGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormGroupByOutputType[P]>
            : GetScalarType<T[P], FormGroupByOutputType[P]>
        }
      >
    >


  export type FormSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    isPublished?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    questions?: boolean | Form$questionsArgs<ExtArgs>
    responses?: boolean | Form$responsesArgs<ExtArgs>
    visits?: boolean | Form$visitsArgs<ExtArgs>
    theme?: boolean | Form$themeArgs<ExtArgs>
    settings?: boolean | Form$settingsArgs<ExtArgs>
    _count?: boolean | FormCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["form"]>

  export type FormSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    isPublished?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["form"]>

  export type FormSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    isPublished?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type FormInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    questions?: boolean | Form$questionsArgs<ExtArgs>
    responses?: boolean | Form$responsesArgs<ExtArgs>
    visits?: boolean | Form$visitsArgs<ExtArgs>
    theme?: boolean | Form$themeArgs<ExtArgs>
    settings?: boolean | Form$settingsArgs<ExtArgs>
    _count?: boolean | FormCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FormIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FormPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Form"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      questions: Prisma.$QuestionPayload<ExtArgs>[]
      responses: Prisma.$ResponsePayload<ExtArgs>[]
      visits: Prisma.$FormVisitPayload<ExtArgs>[]
      theme: Prisma.$ThemePayload<ExtArgs> | null
      settings: Prisma.$FormSettingsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      isPublished: boolean
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["form"]>
    composites: {}
  }

  type FormGetPayload<S extends boolean | null | undefined | FormDefaultArgs> = $Result.GetResult<Prisma.$FormPayload, S>

  type FormCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FormFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FormCountAggregateInputType | true
    }

  export interface FormDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Form'], meta: { name: 'Form' } }
    /**
     * Find zero or one Form that matches the filter.
     * @param {FormFindUniqueArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FormFindUniqueArgs>(args: SelectSubset<T, FormFindUniqueArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Form that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FormFindUniqueOrThrowArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FormFindUniqueOrThrowArgs>(args: SelectSubset<T, FormFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Form that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormFindFirstArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FormFindFirstArgs>(args?: SelectSubset<T, FormFindFirstArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Form that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormFindFirstOrThrowArgs} args - Arguments to find a Form
     * @example
     * // Get one Form
     * const form = await prisma.form.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FormFindFirstOrThrowArgs>(args?: SelectSubset<T, FormFindFirstOrThrowArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Forms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Forms
     * const forms = await prisma.form.findMany()
     * 
     * // Get first 10 Forms
     * const forms = await prisma.form.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const formWithIdOnly = await prisma.form.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FormFindManyArgs>(args?: SelectSubset<T, FormFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Form.
     * @param {FormCreateArgs} args - Arguments to create a Form.
     * @example
     * // Create one Form
     * const Form = await prisma.form.create({
     *   data: {
     *     // ... data to create a Form
     *   }
     * })
     * 
     */
    create<T extends FormCreateArgs>(args: SelectSubset<T, FormCreateArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Forms.
     * @param {FormCreateManyArgs} args - Arguments to create many Forms.
     * @example
     * // Create many Forms
     * const form = await prisma.form.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FormCreateManyArgs>(args?: SelectSubset<T, FormCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Forms and returns the data saved in the database.
     * @param {FormCreateManyAndReturnArgs} args - Arguments to create many Forms.
     * @example
     * // Create many Forms
     * const form = await prisma.form.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Forms and only return the `id`
     * const formWithIdOnly = await prisma.form.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FormCreateManyAndReturnArgs>(args?: SelectSubset<T, FormCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Form.
     * @param {FormDeleteArgs} args - Arguments to delete one Form.
     * @example
     * // Delete one Form
     * const Form = await prisma.form.delete({
     *   where: {
     *     // ... filter to delete one Form
     *   }
     * })
     * 
     */
    delete<T extends FormDeleteArgs>(args: SelectSubset<T, FormDeleteArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Form.
     * @param {FormUpdateArgs} args - Arguments to update one Form.
     * @example
     * // Update one Form
     * const form = await prisma.form.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FormUpdateArgs>(args: SelectSubset<T, FormUpdateArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Forms.
     * @param {FormDeleteManyArgs} args - Arguments to filter Forms to delete.
     * @example
     * // Delete a few Forms
     * const { count } = await prisma.form.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FormDeleteManyArgs>(args?: SelectSubset<T, FormDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Forms
     * const form = await prisma.form.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FormUpdateManyArgs>(args: SelectSubset<T, FormUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Form.
     * @param {FormUpsertArgs} args - Arguments to update or create a Form.
     * @example
     * // Update or create a Form
     * const form = await prisma.form.upsert({
     *   create: {
     *     // ... data to create a Form
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Form we want to update
     *   }
     * })
     */
    upsert<T extends FormUpsertArgs>(args: SelectSubset<T, FormUpsertArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormCountArgs} args - Arguments to filter Forms to count.
     * @example
     * // Count the number of Forms
     * const count = await prisma.form.count({
     *   where: {
     *     // ... the filter for the Forms we want to count
     *   }
     * })
    **/
    count<T extends FormCountArgs>(
      args?: Subset<T, FormCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormAggregateArgs>(args: Subset<T, FormAggregateArgs>): Prisma.PrismaPromise<GetFormAggregateType<T>>

    /**
     * Group by Form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FormGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FormGroupByArgs['orderBy'] }
        : { orderBy?: FormGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FormGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Form model
   */
  readonly fields: FormFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Form.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FormClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    questions<T extends Form$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Form$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany"> | Null>
    responses<T extends Form$responsesArgs<ExtArgs> = {}>(args?: Subset<T, Form$responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, "findMany"> | Null>
    visits<T extends Form$visitsArgs<ExtArgs> = {}>(args?: Subset<T, Form$visitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormVisitPayload<ExtArgs>, T, "findMany"> | Null>
    theme<T extends Form$themeArgs<ExtArgs> = {}>(args?: Subset<T, Form$themeArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    settings<T extends Form$settingsArgs<ExtArgs> = {}>(args?: Subset<T, Form$settingsArgs<ExtArgs>>): Prisma__FormSettingsClient<$Result.GetResult<Prisma.$FormSettingsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Form model
   */ 
  interface FormFieldRefs {
    readonly id: FieldRef<"Form", 'String'>
    readonly title: FieldRef<"Form", 'String'>
    readonly description: FieldRef<"Form", 'String'>
    readonly isPublished: FieldRef<"Form", 'Boolean'>
    readonly createdAt: FieldRef<"Form", 'DateTime'>
    readonly updatedAt: FieldRef<"Form", 'DateTime'>
    readonly userId: FieldRef<"Form", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Form findUnique
   */
  export type FormFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter, which Form to fetch.
     */
    where: FormWhereUniqueInput
  }

  /**
   * Form findUniqueOrThrow
   */
  export type FormFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter, which Form to fetch.
     */
    where: FormWhereUniqueInput
  }

  /**
   * Form findFirst
   */
  export type FormFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter, which Form to fetch.
     */
    where?: FormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Forms to fetch.
     */
    orderBy?: FormOrderByWithRelationInput | FormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Forms.
     */
    cursor?: FormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Forms.
     */
    distinct?: FormScalarFieldEnum | FormScalarFieldEnum[]
  }

  /**
   * Form findFirstOrThrow
   */
  export type FormFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter, which Form to fetch.
     */
    where?: FormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Forms to fetch.
     */
    orderBy?: FormOrderByWithRelationInput | FormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Forms.
     */
    cursor?: FormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Forms.
     */
    distinct?: FormScalarFieldEnum | FormScalarFieldEnum[]
  }

  /**
   * Form findMany
   */
  export type FormFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter, which Forms to fetch.
     */
    where?: FormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Forms to fetch.
     */
    orderBy?: FormOrderByWithRelationInput | FormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Forms.
     */
    cursor?: FormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Forms.
     */
    skip?: number
    distinct?: FormScalarFieldEnum | FormScalarFieldEnum[]
  }

  /**
   * Form create
   */
  export type FormCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * The data needed to create a Form.
     */
    data: XOR<FormCreateInput, FormUncheckedCreateInput>
  }

  /**
   * Form createMany
   */
  export type FormCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Forms.
     */
    data: FormCreateManyInput | FormCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Form createManyAndReturn
   */
  export type FormCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Forms.
     */
    data: FormCreateManyInput | FormCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Form update
   */
  export type FormUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * The data needed to update a Form.
     */
    data: XOR<FormUpdateInput, FormUncheckedUpdateInput>
    /**
     * Choose, which Form to update.
     */
    where: FormWhereUniqueInput
  }

  /**
   * Form updateMany
   */
  export type FormUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Forms.
     */
    data: XOR<FormUpdateManyMutationInput, FormUncheckedUpdateManyInput>
    /**
     * Filter which Forms to update
     */
    where?: FormWhereInput
  }

  /**
   * Form upsert
   */
  export type FormUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * The filter to search for the Form to update in case it exists.
     */
    where: FormWhereUniqueInput
    /**
     * In case the Form found by the `where` argument doesn't exist, create a new Form with this data.
     */
    create: XOR<FormCreateInput, FormUncheckedCreateInput>
    /**
     * In case the Form was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FormUpdateInput, FormUncheckedUpdateInput>
  }

  /**
   * Form delete
   */
  export type FormDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
    /**
     * Filter which Form to delete.
     */
    where: FormWhereUniqueInput
  }

  /**
   * Form deleteMany
   */
  export type FormDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Forms to delete
     */
    where?: FormWhereInput
  }

  /**
   * Form.questions
   */
  export type Form$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Form.responses
   */
  export type Form$responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseInclude<ExtArgs> | null
    where?: ResponseWhereInput
    orderBy?: ResponseOrderByWithRelationInput | ResponseOrderByWithRelationInput[]
    cursor?: ResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResponseScalarFieldEnum | ResponseScalarFieldEnum[]
  }

  /**
   * Form.visits
   */
  export type Form$visitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormVisit
     */
    select?: FormVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormVisitInclude<ExtArgs> | null
    where?: FormVisitWhereInput
    orderBy?: FormVisitOrderByWithRelationInput | FormVisitOrderByWithRelationInput[]
    cursor?: FormVisitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FormVisitScalarFieldEnum | FormVisitScalarFieldEnum[]
  }

  /**
   * Form.theme
   */
  export type Form$themeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    where?: ThemeWhereInput
  }

  /**
   * Form.settings
   */
  export type Form$settingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSettings
     */
    select?: FormSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSettingsInclude<ExtArgs> | null
    where?: FormSettingsWhereInput
  }

  /**
   * Form without action
   */
  export type FormDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Form
     */
    select?: FormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormInclude<ExtArgs> | null
  }


  /**
   * Model Theme
   */

  export type AggregateTheme = {
    _count: ThemeCountAggregateOutputType | null
    _min: ThemeMinAggregateOutputType | null
    _max: ThemeMaxAggregateOutputType | null
  }

  export type ThemeMinAggregateOutputType = {
    id: string | null
    formId: string | null
    primaryColor: string | null
    backgroundColor: string | null
    fontFamily: string | null
  }

  export type ThemeMaxAggregateOutputType = {
    id: string | null
    formId: string | null
    primaryColor: string | null
    backgroundColor: string | null
    fontFamily: string | null
  }

  export type ThemeCountAggregateOutputType = {
    id: number
    formId: number
    primaryColor: number
    backgroundColor: number
    fontFamily: number
    _all: number
  }


  export type ThemeMinAggregateInputType = {
    id?: true
    formId?: true
    primaryColor?: true
    backgroundColor?: true
    fontFamily?: true
  }

  export type ThemeMaxAggregateInputType = {
    id?: true
    formId?: true
    primaryColor?: true
    backgroundColor?: true
    fontFamily?: true
  }

  export type ThemeCountAggregateInputType = {
    id?: true
    formId?: true
    primaryColor?: true
    backgroundColor?: true
    fontFamily?: true
    _all?: true
  }

  export type ThemeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Theme to aggregate.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Themes
    **/
    _count?: true | ThemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThemeMaxAggregateInputType
  }

  export type GetThemeAggregateType<T extends ThemeAggregateArgs> = {
        [P in keyof T & keyof AggregateTheme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTheme[P]>
      : GetScalarType<T[P], AggregateTheme[P]>
  }




  export type ThemeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThemeWhereInput
    orderBy?: ThemeOrderByWithAggregationInput | ThemeOrderByWithAggregationInput[]
    by: ThemeScalarFieldEnum[] | ThemeScalarFieldEnum
    having?: ThemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThemeCountAggregateInputType | true
    _min?: ThemeMinAggregateInputType
    _max?: ThemeMaxAggregateInputType
  }

  export type ThemeGroupByOutputType = {
    id: string
    formId: string
    primaryColor: string
    backgroundColor: string
    fontFamily: string
    _count: ThemeCountAggregateOutputType | null
    _min: ThemeMinAggregateOutputType | null
    _max: ThemeMaxAggregateOutputType | null
  }

  type GetThemeGroupByPayload<T extends ThemeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThemeGroupByOutputType[P]>
            : GetScalarType<T[P], ThemeGroupByOutputType[P]>
        }
      >
    >


  export type ThemeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    formId?: boolean
    primaryColor?: boolean
    backgroundColor?: boolean
    fontFamily?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["theme"]>

  export type ThemeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    formId?: boolean
    primaryColor?: boolean
    backgroundColor?: boolean
    fontFamily?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["theme"]>

  export type ThemeSelectScalar = {
    id?: boolean
    formId?: boolean
    primaryColor?: boolean
    backgroundColor?: boolean
    fontFamily?: boolean
  }

  export type ThemeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
  }
  export type ThemeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
  }

  export type $ThemePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Theme"
    objects: {
      form: Prisma.$FormPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      formId: string
      primaryColor: string
      backgroundColor: string
      fontFamily: string
    }, ExtArgs["result"]["theme"]>
    composites: {}
  }

  type ThemeGetPayload<S extends boolean | null | undefined | ThemeDefaultArgs> = $Result.GetResult<Prisma.$ThemePayload, S>

  type ThemeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ThemeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ThemeCountAggregateInputType | true
    }

  export interface ThemeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Theme'], meta: { name: 'Theme' } }
    /**
     * Find zero or one Theme that matches the filter.
     * @param {ThemeFindUniqueArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ThemeFindUniqueArgs>(args: SelectSubset<T, ThemeFindUniqueArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Theme that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ThemeFindUniqueOrThrowArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ThemeFindUniqueOrThrowArgs>(args: SelectSubset<T, ThemeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Theme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindFirstArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ThemeFindFirstArgs>(args?: SelectSubset<T, ThemeFindFirstArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Theme that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindFirstOrThrowArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ThemeFindFirstOrThrowArgs>(args?: SelectSubset<T, ThemeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Themes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Themes
     * const themes = await prisma.theme.findMany()
     * 
     * // Get first 10 Themes
     * const themes = await prisma.theme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const themeWithIdOnly = await prisma.theme.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ThemeFindManyArgs>(args?: SelectSubset<T, ThemeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Theme.
     * @param {ThemeCreateArgs} args - Arguments to create a Theme.
     * @example
     * // Create one Theme
     * const Theme = await prisma.theme.create({
     *   data: {
     *     // ... data to create a Theme
     *   }
     * })
     * 
     */
    create<T extends ThemeCreateArgs>(args: SelectSubset<T, ThemeCreateArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Themes.
     * @param {ThemeCreateManyArgs} args - Arguments to create many Themes.
     * @example
     * // Create many Themes
     * const theme = await prisma.theme.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ThemeCreateManyArgs>(args?: SelectSubset<T, ThemeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Themes and returns the data saved in the database.
     * @param {ThemeCreateManyAndReturnArgs} args - Arguments to create many Themes.
     * @example
     * // Create many Themes
     * const theme = await prisma.theme.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Themes and only return the `id`
     * const themeWithIdOnly = await prisma.theme.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ThemeCreateManyAndReturnArgs>(args?: SelectSubset<T, ThemeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Theme.
     * @param {ThemeDeleteArgs} args - Arguments to delete one Theme.
     * @example
     * // Delete one Theme
     * const Theme = await prisma.theme.delete({
     *   where: {
     *     // ... filter to delete one Theme
     *   }
     * })
     * 
     */
    delete<T extends ThemeDeleteArgs>(args: SelectSubset<T, ThemeDeleteArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Theme.
     * @param {ThemeUpdateArgs} args - Arguments to update one Theme.
     * @example
     * // Update one Theme
     * const theme = await prisma.theme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ThemeUpdateArgs>(args: SelectSubset<T, ThemeUpdateArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Themes.
     * @param {ThemeDeleteManyArgs} args - Arguments to filter Themes to delete.
     * @example
     * // Delete a few Themes
     * const { count } = await prisma.theme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ThemeDeleteManyArgs>(args?: SelectSubset<T, ThemeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Themes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Themes
     * const theme = await prisma.theme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ThemeUpdateManyArgs>(args: SelectSubset<T, ThemeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Theme.
     * @param {ThemeUpsertArgs} args - Arguments to update or create a Theme.
     * @example
     * // Update or create a Theme
     * const theme = await prisma.theme.upsert({
     *   create: {
     *     // ... data to create a Theme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Theme we want to update
     *   }
     * })
     */
    upsert<T extends ThemeUpsertArgs>(args: SelectSubset<T, ThemeUpsertArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Themes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeCountArgs} args - Arguments to filter Themes to count.
     * @example
     * // Count the number of Themes
     * const count = await prisma.theme.count({
     *   where: {
     *     // ... the filter for the Themes we want to count
     *   }
     * })
    **/
    count<T extends ThemeCountArgs>(
      args?: Subset<T, ThemeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Theme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThemeAggregateArgs>(args: Subset<T, ThemeAggregateArgs>): Prisma.PrismaPromise<GetThemeAggregateType<T>>

    /**
     * Group by Theme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThemeGroupByArgs['orderBy'] }
        : { orderBy?: ThemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThemeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Theme model
   */
  readonly fields: ThemeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Theme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThemeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    form<T extends FormDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FormDefaultArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Theme model
   */ 
  interface ThemeFieldRefs {
    readonly id: FieldRef<"Theme", 'String'>
    readonly formId: FieldRef<"Theme", 'String'>
    readonly primaryColor: FieldRef<"Theme", 'String'>
    readonly backgroundColor: FieldRef<"Theme", 'String'>
    readonly fontFamily: FieldRef<"Theme", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Theme findUnique
   */
  export type ThemeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme findUniqueOrThrow
   */
  export type ThemeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme findFirst
   */
  export type ThemeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Themes.
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Themes.
     */
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * Theme findFirstOrThrow
   */
  export type ThemeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Themes.
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Themes.
     */
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * Theme findMany
   */
  export type ThemeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Themes to fetch.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Themes.
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * Theme create
   */
  export type ThemeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * The data needed to create a Theme.
     */
    data: XOR<ThemeCreateInput, ThemeUncheckedCreateInput>
  }

  /**
   * Theme createMany
   */
  export type ThemeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Themes.
     */
    data: ThemeCreateManyInput | ThemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Theme createManyAndReturn
   */
  export type ThemeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Themes.
     */
    data: ThemeCreateManyInput | ThemeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Theme update
   */
  export type ThemeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * The data needed to update a Theme.
     */
    data: XOR<ThemeUpdateInput, ThemeUncheckedUpdateInput>
    /**
     * Choose, which Theme to update.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme updateMany
   */
  export type ThemeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Themes.
     */
    data: XOR<ThemeUpdateManyMutationInput, ThemeUncheckedUpdateManyInput>
    /**
     * Filter which Themes to update
     */
    where?: ThemeWhereInput
  }

  /**
   * Theme upsert
   */
  export type ThemeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * The filter to search for the Theme to update in case it exists.
     */
    where: ThemeWhereUniqueInput
    /**
     * In case the Theme found by the `where` argument doesn't exist, create a new Theme with this data.
     */
    create: XOR<ThemeCreateInput, ThemeUncheckedCreateInput>
    /**
     * In case the Theme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThemeUpdateInput, ThemeUncheckedUpdateInput>
  }

  /**
   * Theme delete
   */
  export type ThemeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter which Theme to delete.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme deleteMany
   */
  export type ThemeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Themes to delete
     */
    where?: ThemeWhereInput
  }

  /**
   * Theme without action
   */
  export type ThemeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
  }


  /**
   * Model FormSettings
   */

  export type AggregateFormSettings = {
    _count: FormSettingsCountAggregateOutputType | null
    _min: FormSettingsMinAggregateOutputType | null
    _max: FormSettingsMaxAggregateOutputType | null
  }

  export type FormSettingsMinAggregateOutputType = {
    id: string | null
    formId: string | null
    requireSignIn: boolean | null
    limitOneResponsePerUser: boolean | null
    showProgressBar: boolean | null
    shuffleQuestions: boolean | null
    confirmationMessage: string | null
    redirectUrl: string | null
    notifyOnSubmission: boolean | null
  }

  export type FormSettingsMaxAggregateOutputType = {
    id: string | null
    formId: string | null
    requireSignIn: boolean | null
    limitOneResponsePerUser: boolean | null
    showProgressBar: boolean | null
    shuffleQuestions: boolean | null
    confirmationMessage: string | null
    redirectUrl: string | null
    notifyOnSubmission: boolean | null
  }

  export type FormSettingsCountAggregateOutputType = {
    id: number
    formId: number
    requireSignIn: number
    limitOneResponsePerUser: number
    showProgressBar: number
    shuffleQuestions: number
    confirmationMessage: number
    redirectUrl: number
    notifyOnSubmission: number
    _all: number
  }


  export type FormSettingsMinAggregateInputType = {
    id?: true
    formId?: true
    requireSignIn?: true
    limitOneResponsePerUser?: true
    showProgressBar?: true
    shuffleQuestions?: true
    confirmationMessage?: true
    redirectUrl?: true
    notifyOnSubmission?: true
  }

  export type FormSettingsMaxAggregateInputType = {
    id?: true
    formId?: true
    requireSignIn?: true
    limitOneResponsePerUser?: true
    showProgressBar?: true
    shuffleQuestions?: true
    confirmationMessage?: true
    redirectUrl?: true
    notifyOnSubmission?: true
  }

  export type FormSettingsCountAggregateInputType = {
    id?: true
    formId?: true
    requireSignIn?: true
    limitOneResponsePerUser?: true
    showProgressBar?: true
    shuffleQuestions?: true
    confirmationMessage?: true
    redirectUrl?: true
    notifyOnSubmission?: true
    _all?: true
  }

  export type FormSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FormSettings to aggregate.
     */
    where?: FormSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormSettings to fetch.
     */
    orderBy?: FormSettingsOrderByWithRelationInput | FormSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FormSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FormSettings
    **/
    _count?: true | FormSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormSettingsMaxAggregateInputType
  }

  export type GetFormSettingsAggregateType<T extends FormSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateFormSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFormSettings[P]>
      : GetScalarType<T[P], AggregateFormSettings[P]>
  }




  export type FormSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormSettingsWhereInput
    orderBy?: FormSettingsOrderByWithAggregationInput | FormSettingsOrderByWithAggregationInput[]
    by: FormSettingsScalarFieldEnum[] | FormSettingsScalarFieldEnum
    having?: FormSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormSettingsCountAggregateInputType | true
    _min?: FormSettingsMinAggregateInputType
    _max?: FormSettingsMaxAggregateInputType
  }

  export type FormSettingsGroupByOutputType = {
    id: string
    formId: string
    requireSignIn: boolean
    limitOneResponsePerUser: boolean
    showProgressBar: boolean
    shuffleQuestions: boolean
    confirmationMessage: string
    redirectUrl: string | null
    notifyOnSubmission: boolean
    _count: FormSettingsCountAggregateOutputType | null
    _min: FormSettingsMinAggregateOutputType | null
    _max: FormSettingsMaxAggregateOutputType | null
  }

  type GetFormSettingsGroupByPayload<T extends FormSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], FormSettingsGroupByOutputType[P]>
        }
      >
    >


  export type FormSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    formId?: boolean
    requireSignIn?: boolean
    limitOneResponsePerUser?: boolean
    showProgressBar?: boolean
    shuffleQuestions?: boolean
    confirmationMessage?: boolean
    redirectUrl?: boolean
    notifyOnSubmission?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
    notificationEmails?: boolean | FormSettings$notificationEmailsArgs<ExtArgs>
    _count?: boolean | FormSettingsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["formSettings"]>

  export type FormSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    formId?: boolean
    requireSignIn?: boolean
    limitOneResponsePerUser?: boolean
    showProgressBar?: boolean
    shuffleQuestions?: boolean
    confirmationMessage?: boolean
    redirectUrl?: boolean
    notifyOnSubmission?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["formSettings"]>

  export type FormSettingsSelectScalar = {
    id?: boolean
    formId?: boolean
    requireSignIn?: boolean
    limitOneResponsePerUser?: boolean
    showProgressBar?: boolean
    shuffleQuestions?: boolean
    confirmationMessage?: boolean
    redirectUrl?: boolean
    notifyOnSubmission?: boolean
  }

  export type FormSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
    notificationEmails?: boolean | FormSettings$notificationEmailsArgs<ExtArgs>
    _count?: boolean | FormSettingsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FormSettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
  }

  export type $FormSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FormSettings"
    objects: {
      form: Prisma.$FormPayload<ExtArgs>
      notificationEmails: Prisma.$NotificationEmailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      formId: string
      requireSignIn: boolean
      limitOneResponsePerUser: boolean
      showProgressBar: boolean
      shuffleQuestions: boolean
      confirmationMessage: string
      redirectUrl: string | null
      notifyOnSubmission: boolean
    }, ExtArgs["result"]["formSettings"]>
    composites: {}
  }

  type FormSettingsGetPayload<S extends boolean | null | undefined | FormSettingsDefaultArgs> = $Result.GetResult<Prisma.$FormSettingsPayload, S>

  type FormSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FormSettingsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FormSettingsCountAggregateInputType | true
    }

  export interface FormSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FormSettings'], meta: { name: 'FormSettings' } }
    /**
     * Find zero or one FormSettings that matches the filter.
     * @param {FormSettingsFindUniqueArgs} args - Arguments to find a FormSettings
     * @example
     * // Get one FormSettings
     * const formSettings = await prisma.formSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FormSettingsFindUniqueArgs>(args: SelectSubset<T, FormSettingsFindUniqueArgs<ExtArgs>>): Prisma__FormSettingsClient<$Result.GetResult<Prisma.$FormSettingsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FormSettings that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FormSettingsFindUniqueOrThrowArgs} args - Arguments to find a FormSettings
     * @example
     * // Get one FormSettings
     * const formSettings = await prisma.formSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FormSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, FormSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FormSettingsClient<$Result.GetResult<Prisma.$FormSettingsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FormSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormSettingsFindFirstArgs} args - Arguments to find a FormSettings
     * @example
     * // Get one FormSettings
     * const formSettings = await prisma.formSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FormSettingsFindFirstArgs>(args?: SelectSubset<T, FormSettingsFindFirstArgs<ExtArgs>>): Prisma__FormSettingsClient<$Result.GetResult<Prisma.$FormSettingsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FormSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormSettingsFindFirstOrThrowArgs} args - Arguments to find a FormSettings
     * @example
     * // Get one FormSettings
     * const formSettings = await prisma.formSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FormSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, FormSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__FormSettingsClient<$Result.GetResult<Prisma.$FormSettingsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FormSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FormSettings
     * const formSettings = await prisma.formSettings.findMany()
     * 
     * // Get first 10 FormSettings
     * const formSettings = await prisma.formSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const formSettingsWithIdOnly = await prisma.formSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FormSettingsFindManyArgs>(args?: SelectSubset<T, FormSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormSettingsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FormSettings.
     * @param {FormSettingsCreateArgs} args - Arguments to create a FormSettings.
     * @example
     * // Create one FormSettings
     * const FormSettings = await prisma.formSettings.create({
     *   data: {
     *     // ... data to create a FormSettings
     *   }
     * })
     * 
     */
    create<T extends FormSettingsCreateArgs>(args: SelectSubset<T, FormSettingsCreateArgs<ExtArgs>>): Prisma__FormSettingsClient<$Result.GetResult<Prisma.$FormSettingsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FormSettings.
     * @param {FormSettingsCreateManyArgs} args - Arguments to create many FormSettings.
     * @example
     * // Create many FormSettings
     * const formSettings = await prisma.formSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FormSettingsCreateManyArgs>(args?: SelectSubset<T, FormSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FormSettings and returns the data saved in the database.
     * @param {FormSettingsCreateManyAndReturnArgs} args - Arguments to create many FormSettings.
     * @example
     * // Create many FormSettings
     * const formSettings = await prisma.formSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FormSettings and only return the `id`
     * const formSettingsWithIdOnly = await prisma.formSettings.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FormSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, FormSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormSettingsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FormSettings.
     * @param {FormSettingsDeleteArgs} args - Arguments to delete one FormSettings.
     * @example
     * // Delete one FormSettings
     * const FormSettings = await prisma.formSettings.delete({
     *   where: {
     *     // ... filter to delete one FormSettings
     *   }
     * })
     * 
     */
    delete<T extends FormSettingsDeleteArgs>(args: SelectSubset<T, FormSettingsDeleteArgs<ExtArgs>>): Prisma__FormSettingsClient<$Result.GetResult<Prisma.$FormSettingsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FormSettings.
     * @param {FormSettingsUpdateArgs} args - Arguments to update one FormSettings.
     * @example
     * // Update one FormSettings
     * const formSettings = await prisma.formSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FormSettingsUpdateArgs>(args: SelectSubset<T, FormSettingsUpdateArgs<ExtArgs>>): Prisma__FormSettingsClient<$Result.GetResult<Prisma.$FormSettingsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FormSettings.
     * @param {FormSettingsDeleteManyArgs} args - Arguments to filter FormSettings to delete.
     * @example
     * // Delete a few FormSettings
     * const { count } = await prisma.formSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FormSettingsDeleteManyArgs>(args?: SelectSubset<T, FormSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FormSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FormSettings
     * const formSettings = await prisma.formSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FormSettingsUpdateManyArgs>(args: SelectSubset<T, FormSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FormSettings.
     * @param {FormSettingsUpsertArgs} args - Arguments to update or create a FormSettings.
     * @example
     * // Update or create a FormSettings
     * const formSettings = await prisma.formSettings.upsert({
     *   create: {
     *     // ... data to create a FormSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FormSettings we want to update
     *   }
     * })
     */
    upsert<T extends FormSettingsUpsertArgs>(args: SelectSubset<T, FormSettingsUpsertArgs<ExtArgs>>): Prisma__FormSettingsClient<$Result.GetResult<Prisma.$FormSettingsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FormSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormSettingsCountArgs} args - Arguments to filter FormSettings to count.
     * @example
     * // Count the number of FormSettings
     * const count = await prisma.formSettings.count({
     *   where: {
     *     // ... the filter for the FormSettings we want to count
     *   }
     * })
    **/
    count<T extends FormSettingsCountArgs>(
      args?: Subset<T, FormSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FormSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormSettingsAggregateArgs>(args: Subset<T, FormSettingsAggregateArgs>): Prisma.PrismaPromise<GetFormSettingsAggregateType<T>>

    /**
     * Group by FormSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FormSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FormSettingsGroupByArgs['orderBy'] }
        : { orderBy?: FormSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FormSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FormSettings model
   */
  readonly fields: FormSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FormSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FormSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    form<T extends FormDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FormDefaultArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    notificationEmails<T extends FormSettings$notificationEmailsArgs<ExtArgs> = {}>(args?: Subset<T, FormSettings$notificationEmailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationEmailPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FormSettings model
   */ 
  interface FormSettingsFieldRefs {
    readonly id: FieldRef<"FormSettings", 'String'>
    readonly formId: FieldRef<"FormSettings", 'String'>
    readonly requireSignIn: FieldRef<"FormSettings", 'Boolean'>
    readonly limitOneResponsePerUser: FieldRef<"FormSettings", 'Boolean'>
    readonly showProgressBar: FieldRef<"FormSettings", 'Boolean'>
    readonly shuffleQuestions: FieldRef<"FormSettings", 'Boolean'>
    readonly confirmationMessage: FieldRef<"FormSettings", 'String'>
    readonly redirectUrl: FieldRef<"FormSettings", 'String'>
    readonly notifyOnSubmission: FieldRef<"FormSettings", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * FormSettings findUnique
   */
  export type FormSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSettings
     */
    select?: FormSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSettingsInclude<ExtArgs> | null
    /**
     * Filter, which FormSettings to fetch.
     */
    where: FormSettingsWhereUniqueInput
  }

  /**
   * FormSettings findUniqueOrThrow
   */
  export type FormSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSettings
     */
    select?: FormSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSettingsInclude<ExtArgs> | null
    /**
     * Filter, which FormSettings to fetch.
     */
    where: FormSettingsWhereUniqueInput
  }

  /**
   * FormSettings findFirst
   */
  export type FormSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSettings
     */
    select?: FormSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSettingsInclude<ExtArgs> | null
    /**
     * Filter, which FormSettings to fetch.
     */
    where?: FormSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormSettings to fetch.
     */
    orderBy?: FormSettingsOrderByWithRelationInput | FormSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FormSettings.
     */
    cursor?: FormSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FormSettings.
     */
    distinct?: FormSettingsScalarFieldEnum | FormSettingsScalarFieldEnum[]
  }

  /**
   * FormSettings findFirstOrThrow
   */
  export type FormSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSettings
     */
    select?: FormSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSettingsInclude<ExtArgs> | null
    /**
     * Filter, which FormSettings to fetch.
     */
    where?: FormSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormSettings to fetch.
     */
    orderBy?: FormSettingsOrderByWithRelationInput | FormSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FormSettings.
     */
    cursor?: FormSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FormSettings.
     */
    distinct?: FormSettingsScalarFieldEnum | FormSettingsScalarFieldEnum[]
  }

  /**
   * FormSettings findMany
   */
  export type FormSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSettings
     */
    select?: FormSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSettingsInclude<ExtArgs> | null
    /**
     * Filter, which FormSettings to fetch.
     */
    where?: FormSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormSettings to fetch.
     */
    orderBy?: FormSettingsOrderByWithRelationInput | FormSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FormSettings.
     */
    cursor?: FormSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormSettings.
     */
    skip?: number
    distinct?: FormSettingsScalarFieldEnum | FormSettingsScalarFieldEnum[]
  }

  /**
   * FormSettings create
   */
  export type FormSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSettings
     */
    select?: FormSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a FormSettings.
     */
    data: XOR<FormSettingsCreateInput, FormSettingsUncheckedCreateInput>
  }

  /**
   * FormSettings createMany
   */
  export type FormSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FormSettings.
     */
    data: FormSettingsCreateManyInput | FormSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FormSettings createManyAndReturn
   */
  export type FormSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSettings
     */
    select?: FormSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FormSettings.
     */
    data: FormSettingsCreateManyInput | FormSettingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FormSettings update
   */
  export type FormSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSettings
     */
    select?: FormSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a FormSettings.
     */
    data: XOR<FormSettingsUpdateInput, FormSettingsUncheckedUpdateInput>
    /**
     * Choose, which FormSettings to update.
     */
    where: FormSettingsWhereUniqueInput
  }

  /**
   * FormSettings updateMany
   */
  export type FormSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FormSettings.
     */
    data: XOR<FormSettingsUpdateManyMutationInput, FormSettingsUncheckedUpdateManyInput>
    /**
     * Filter which FormSettings to update
     */
    where?: FormSettingsWhereInput
  }

  /**
   * FormSettings upsert
   */
  export type FormSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSettings
     */
    select?: FormSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the FormSettings to update in case it exists.
     */
    where: FormSettingsWhereUniqueInput
    /**
     * In case the FormSettings found by the `where` argument doesn't exist, create a new FormSettings with this data.
     */
    create: XOR<FormSettingsCreateInput, FormSettingsUncheckedCreateInput>
    /**
     * In case the FormSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FormSettingsUpdateInput, FormSettingsUncheckedUpdateInput>
  }

  /**
   * FormSettings delete
   */
  export type FormSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSettings
     */
    select?: FormSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSettingsInclude<ExtArgs> | null
    /**
     * Filter which FormSettings to delete.
     */
    where: FormSettingsWhereUniqueInput
  }

  /**
   * FormSettings deleteMany
   */
  export type FormSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FormSettings to delete
     */
    where?: FormSettingsWhereInput
  }

  /**
   * FormSettings.notificationEmails
   */
  export type FormSettings$notificationEmailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationEmail
     */
    select?: NotificationEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationEmailInclude<ExtArgs> | null
    where?: NotificationEmailWhereInput
    orderBy?: NotificationEmailOrderByWithRelationInput | NotificationEmailOrderByWithRelationInput[]
    cursor?: NotificationEmailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationEmailScalarFieldEnum | NotificationEmailScalarFieldEnum[]
  }

  /**
   * FormSettings without action
   */
  export type FormSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSettings
     */
    select?: FormSettingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSettingsInclude<ExtArgs> | null
  }


  /**
   * Model NotificationEmail
   */

  export type AggregateNotificationEmail = {
    _count: NotificationEmailCountAggregateOutputType | null
    _min: NotificationEmailMinAggregateOutputType | null
    _max: NotificationEmailMaxAggregateOutputType | null
  }

  export type NotificationEmailMinAggregateOutputType = {
    id: string | null
    email: string | null
    formSettingsId: string | null
  }

  export type NotificationEmailMaxAggregateOutputType = {
    id: string | null
    email: string | null
    formSettingsId: string | null
  }

  export type NotificationEmailCountAggregateOutputType = {
    id: number
    email: number
    formSettingsId: number
    _all: number
  }


  export type NotificationEmailMinAggregateInputType = {
    id?: true
    email?: true
    formSettingsId?: true
  }

  export type NotificationEmailMaxAggregateInputType = {
    id?: true
    email?: true
    formSettingsId?: true
  }

  export type NotificationEmailCountAggregateInputType = {
    id?: true
    email?: true
    formSettingsId?: true
    _all?: true
  }

  export type NotificationEmailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationEmail to aggregate.
     */
    where?: NotificationEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationEmails to fetch.
     */
    orderBy?: NotificationEmailOrderByWithRelationInput | NotificationEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationEmails
    **/
    _count?: true | NotificationEmailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationEmailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationEmailMaxAggregateInputType
  }

  export type GetNotificationEmailAggregateType<T extends NotificationEmailAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationEmail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationEmail[P]>
      : GetScalarType<T[P], AggregateNotificationEmail[P]>
  }




  export type NotificationEmailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationEmailWhereInput
    orderBy?: NotificationEmailOrderByWithAggregationInput | NotificationEmailOrderByWithAggregationInput[]
    by: NotificationEmailScalarFieldEnum[] | NotificationEmailScalarFieldEnum
    having?: NotificationEmailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationEmailCountAggregateInputType | true
    _min?: NotificationEmailMinAggregateInputType
    _max?: NotificationEmailMaxAggregateInputType
  }

  export type NotificationEmailGroupByOutputType = {
    id: string
    email: string
    formSettingsId: string
    _count: NotificationEmailCountAggregateOutputType | null
    _min: NotificationEmailMinAggregateOutputType | null
    _max: NotificationEmailMaxAggregateOutputType | null
  }

  type GetNotificationEmailGroupByPayload<T extends NotificationEmailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationEmailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationEmailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationEmailGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationEmailGroupByOutputType[P]>
        }
      >
    >


  export type NotificationEmailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    formSettingsId?: boolean
    formSettings?: boolean | FormSettingsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationEmail"]>

  export type NotificationEmailSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    formSettingsId?: boolean
    formSettings?: boolean | FormSettingsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationEmail"]>

  export type NotificationEmailSelectScalar = {
    id?: boolean
    email?: boolean
    formSettingsId?: boolean
  }

  export type NotificationEmailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    formSettings?: boolean | FormSettingsDefaultArgs<ExtArgs>
  }
  export type NotificationEmailIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    formSettings?: boolean | FormSettingsDefaultArgs<ExtArgs>
  }

  export type $NotificationEmailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationEmail"
    objects: {
      formSettings: Prisma.$FormSettingsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      formSettingsId: string
    }, ExtArgs["result"]["notificationEmail"]>
    composites: {}
  }

  type NotificationEmailGetPayload<S extends boolean | null | undefined | NotificationEmailDefaultArgs> = $Result.GetResult<Prisma.$NotificationEmailPayload, S>

  type NotificationEmailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationEmailFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationEmailCountAggregateInputType | true
    }

  export interface NotificationEmailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationEmail'], meta: { name: 'NotificationEmail' } }
    /**
     * Find zero or one NotificationEmail that matches the filter.
     * @param {NotificationEmailFindUniqueArgs} args - Arguments to find a NotificationEmail
     * @example
     * // Get one NotificationEmail
     * const notificationEmail = await prisma.notificationEmail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationEmailFindUniqueArgs>(args: SelectSubset<T, NotificationEmailFindUniqueArgs<ExtArgs>>): Prisma__NotificationEmailClient<$Result.GetResult<Prisma.$NotificationEmailPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NotificationEmail that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationEmailFindUniqueOrThrowArgs} args - Arguments to find a NotificationEmail
     * @example
     * // Get one NotificationEmail
     * const notificationEmail = await prisma.notificationEmail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationEmailFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationEmailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationEmailClient<$Result.GetResult<Prisma.$NotificationEmailPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NotificationEmail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationEmailFindFirstArgs} args - Arguments to find a NotificationEmail
     * @example
     * // Get one NotificationEmail
     * const notificationEmail = await prisma.notificationEmail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationEmailFindFirstArgs>(args?: SelectSubset<T, NotificationEmailFindFirstArgs<ExtArgs>>): Prisma__NotificationEmailClient<$Result.GetResult<Prisma.$NotificationEmailPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NotificationEmail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationEmailFindFirstOrThrowArgs} args - Arguments to find a NotificationEmail
     * @example
     * // Get one NotificationEmail
     * const notificationEmail = await prisma.notificationEmail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationEmailFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationEmailFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationEmailClient<$Result.GetResult<Prisma.$NotificationEmailPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NotificationEmails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationEmailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationEmails
     * const notificationEmails = await prisma.notificationEmail.findMany()
     * 
     * // Get first 10 NotificationEmails
     * const notificationEmails = await prisma.notificationEmail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationEmailWithIdOnly = await prisma.notificationEmail.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationEmailFindManyArgs>(args?: SelectSubset<T, NotificationEmailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationEmailPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NotificationEmail.
     * @param {NotificationEmailCreateArgs} args - Arguments to create a NotificationEmail.
     * @example
     * // Create one NotificationEmail
     * const NotificationEmail = await prisma.notificationEmail.create({
     *   data: {
     *     // ... data to create a NotificationEmail
     *   }
     * })
     * 
     */
    create<T extends NotificationEmailCreateArgs>(args: SelectSubset<T, NotificationEmailCreateArgs<ExtArgs>>): Prisma__NotificationEmailClient<$Result.GetResult<Prisma.$NotificationEmailPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NotificationEmails.
     * @param {NotificationEmailCreateManyArgs} args - Arguments to create many NotificationEmails.
     * @example
     * // Create many NotificationEmails
     * const notificationEmail = await prisma.notificationEmail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationEmailCreateManyArgs>(args?: SelectSubset<T, NotificationEmailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationEmails and returns the data saved in the database.
     * @param {NotificationEmailCreateManyAndReturnArgs} args - Arguments to create many NotificationEmails.
     * @example
     * // Create many NotificationEmails
     * const notificationEmail = await prisma.notificationEmail.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationEmails and only return the `id`
     * const notificationEmailWithIdOnly = await prisma.notificationEmail.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationEmailCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationEmailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationEmailPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a NotificationEmail.
     * @param {NotificationEmailDeleteArgs} args - Arguments to delete one NotificationEmail.
     * @example
     * // Delete one NotificationEmail
     * const NotificationEmail = await prisma.notificationEmail.delete({
     *   where: {
     *     // ... filter to delete one NotificationEmail
     *   }
     * })
     * 
     */
    delete<T extends NotificationEmailDeleteArgs>(args: SelectSubset<T, NotificationEmailDeleteArgs<ExtArgs>>): Prisma__NotificationEmailClient<$Result.GetResult<Prisma.$NotificationEmailPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NotificationEmail.
     * @param {NotificationEmailUpdateArgs} args - Arguments to update one NotificationEmail.
     * @example
     * // Update one NotificationEmail
     * const notificationEmail = await prisma.notificationEmail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationEmailUpdateArgs>(args: SelectSubset<T, NotificationEmailUpdateArgs<ExtArgs>>): Prisma__NotificationEmailClient<$Result.GetResult<Prisma.$NotificationEmailPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NotificationEmails.
     * @param {NotificationEmailDeleteManyArgs} args - Arguments to filter NotificationEmails to delete.
     * @example
     * // Delete a few NotificationEmails
     * const { count } = await prisma.notificationEmail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationEmailDeleteManyArgs>(args?: SelectSubset<T, NotificationEmailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationEmails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationEmailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationEmails
     * const notificationEmail = await prisma.notificationEmail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationEmailUpdateManyArgs>(args: SelectSubset<T, NotificationEmailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NotificationEmail.
     * @param {NotificationEmailUpsertArgs} args - Arguments to update or create a NotificationEmail.
     * @example
     * // Update or create a NotificationEmail
     * const notificationEmail = await prisma.notificationEmail.upsert({
     *   create: {
     *     // ... data to create a NotificationEmail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationEmail we want to update
     *   }
     * })
     */
    upsert<T extends NotificationEmailUpsertArgs>(args: SelectSubset<T, NotificationEmailUpsertArgs<ExtArgs>>): Prisma__NotificationEmailClient<$Result.GetResult<Prisma.$NotificationEmailPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NotificationEmails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationEmailCountArgs} args - Arguments to filter NotificationEmails to count.
     * @example
     * // Count the number of NotificationEmails
     * const count = await prisma.notificationEmail.count({
     *   where: {
     *     // ... the filter for the NotificationEmails we want to count
     *   }
     * })
    **/
    count<T extends NotificationEmailCountArgs>(
      args?: Subset<T, NotificationEmailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationEmailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationEmail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationEmailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationEmailAggregateArgs>(args: Subset<T, NotificationEmailAggregateArgs>): Prisma.PrismaPromise<GetNotificationEmailAggregateType<T>>

    /**
     * Group by NotificationEmail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationEmailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationEmailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationEmailGroupByArgs['orderBy'] }
        : { orderBy?: NotificationEmailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationEmailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationEmailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationEmail model
   */
  readonly fields: NotificationEmailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationEmail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationEmailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    formSettings<T extends FormSettingsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FormSettingsDefaultArgs<ExtArgs>>): Prisma__FormSettingsClient<$Result.GetResult<Prisma.$FormSettingsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationEmail model
   */ 
  interface NotificationEmailFieldRefs {
    readonly id: FieldRef<"NotificationEmail", 'String'>
    readonly email: FieldRef<"NotificationEmail", 'String'>
    readonly formSettingsId: FieldRef<"NotificationEmail", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NotificationEmail findUnique
   */
  export type NotificationEmailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationEmail
     */
    select?: NotificationEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationEmailInclude<ExtArgs> | null
    /**
     * Filter, which NotificationEmail to fetch.
     */
    where: NotificationEmailWhereUniqueInput
  }

  /**
   * NotificationEmail findUniqueOrThrow
   */
  export type NotificationEmailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationEmail
     */
    select?: NotificationEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationEmailInclude<ExtArgs> | null
    /**
     * Filter, which NotificationEmail to fetch.
     */
    where: NotificationEmailWhereUniqueInput
  }

  /**
   * NotificationEmail findFirst
   */
  export type NotificationEmailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationEmail
     */
    select?: NotificationEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationEmailInclude<ExtArgs> | null
    /**
     * Filter, which NotificationEmail to fetch.
     */
    where?: NotificationEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationEmails to fetch.
     */
    orderBy?: NotificationEmailOrderByWithRelationInput | NotificationEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationEmails.
     */
    cursor?: NotificationEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationEmails.
     */
    distinct?: NotificationEmailScalarFieldEnum | NotificationEmailScalarFieldEnum[]
  }

  /**
   * NotificationEmail findFirstOrThrow
   */
  export type NotificationEmailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationEmail
     */
    select?: NotificationEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationEmailInclude<ExtArgs> | null
    /**
     * Filter, which NotificationEmail to fetch.
     */
    where?: NotificationEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationEmails to fetch.
     */
    orderBy?: NotificationEmailOrderByWithRelationInput | NotificationEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationEmails.
     */
    cursor?: NotificationEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationEmails.
     */
    distinct?: NotificationEmailScalarFieldEnum | NotificationEmailScalarFieldEnum[]
  }

  /**
   * NotificationEmail findMany
   */
  export type NotificationEmailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationEmail
     */
    select?: NotificationEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationEmailInclude<ExtArgs> | null
    /**
     * Filter, which NotificationEmails to fetch.
     */
    where?: NotificationEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationEmails to fetch.
     */
    orderBy?: NotificationEmailOrderByWithRelationInput | NotificationEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationEmails.
     */
    cursor?: NotificationEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationEmails.
     */
    skip?: number
    distinct?: NotificationEmailScalarFieldEnum | NotificationEmailScalarFieldEnum[]
  }

  /**
   * NotificationEmail create
   */
  export type NotificationEmailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationEmail
     */
    select?: NotificationEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationEmailInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationEmail.
     */
    data: XOR<NotificationEmailCreateInput, NotificationEmailUncheckedCreateInput>
  }

  /**
   * NotificationEmail createMany
   */
  export type NotificationEmailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationEmails.
     */
    data: NotificationEmailCreateManyInput | NotificationEmailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationEmail createManyAndReturn
   */
  export type NotificationEmailCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationEmail
     */
    select?: NotificationEmailSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many NotificationEmails.
     */
    data: NotificationEmailCreateManyInput | NotificationEmailCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationEmailIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationEmail update
   */
  export type NotificationEmailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationEmail
     */
    select?: NotificationEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationEmailInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationEmail.
     */
    data: XOR<NotificationEmailUpdateInput, NotificationEmailUncheckedUpdateInput>
    /**
     * Choose, which NotificationEmail to update.
     */
    where: NotificationEmailWhereUniqueInput
  }

  /**
   * NotificationEmail updateMany
   */
  export type NotificationEmailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationEmails.
     */
    data: XOR<NotificationEmailUpdateManyMutationInput, NotificationEmailUncheckedUpdateManyInput>
    /**
     * Filter which NotificationEmails to update
     */
    where?: NotificationEmailWhereInput
  }

  /**
   * NotificationEmail upsert
   */
  export type NotificationEmailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationEmail
     */
    select?: NotificationEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationEmailInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationEmail to update in case it exists.
     */
    where: NotificationEmailWhereUniqueInput
    /**
     * In case the NotificationEmail found by the `where` argument doesn't exist, create a new NotificationEmail with this data.
     */
    create: XOR<NotificationEmailCreateInput, NotificationEmailUncheckedCreateInput>
    /**
     * In case the NotificationEmail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationEmailUpdateInput, NotificationEmailUncheckedUpdateInput>
  }

  /**
   * NotificationEmail delete
   */
  export type NotificationEmailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationEmail
     */
    select?: NotificationEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationEmailInclude<ExtArgs> | null
    /**
     * Filter which NotificationEmail to delete.
     */
    where: NotificationEmailWhereUniqueInput
  }

  /**
   * NotificationEmail deleteMany
   */
  export type NotificationEmailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationEmails to delete
     */
    where?: NotificationEmailWhereInput
  }

  /**
   * NotificationEmail without action
   */
  export type NotificationEmailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationEmail
     */
    select?: NotificationEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationEmailInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    order: number | null
  }

  export type QuestionSumAggregateOutputType = {
    order: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: string | null
    formId: string | null
    title: string | null
    description: string | null
    type: string | null
    isRequired: boolean | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: string | null
    formId: string | null
    title: string | null
    description: string | null
    type: string | null
    isRequired: boolean | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    formId: number
    title: number
    description: number
    type: number
    isRequired: number
    options: number
    order: number
    validation: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    order?: true
  }

  export type QuestionSumAggregateInputType = {
    order?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    formId?: true
    title?: true
    description?: true
    type?: true
    isRequired?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    formId?: true
    title?: true
    description?: true
    type?: true
    isRequired?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    formId?: true
    title?: true
    description?: true
    type?: true
    isRequired?: true
    options?: true
    order?: true
    validation?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: string
    formId: string
    title: string
    description: string | null
    type: string
    isRequired: boolean
    options: JsonValue | null
    order: number
    validation: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    formId?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    isRequired?: boolean
    options?: boolean
    order?: boolean
    validation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
    answers?: boolean | Question$answersArgs<ExtArgs>
    conditionalLogic?: boolean | Question$conditionalLogicArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    formId?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    isRequired?: boolean
    options?: boolean
    order?: boolean
    validation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    formId?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    isRequired?: boolean
    options?: boolean
    order?: boolean
    validation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
    answers?: boolean | Question$answersArgs<ExtArgs>
    conditionalLogic?: boolean | Question$conditionalLogicArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      form: Prisma.$FormPayload<ExtArgs>
      answers: Prisma.$AnswerPayload<ExtArgs>[]
      conditionalLogic: Prisma.$ConditionalLogicPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      formId: string
      title: string
      description: string | null
      type: string
      isRequired: boolean
      options: Prisma.JsonValue | null
      order: number
      validation: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    form<T extends FormDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FormDefaultArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    answers<T extends Question$answersArgs<ExtArgs> = {}>(args?: Subset<T, Question$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "findMany"> | Null>
    conditionalLogic<T extends Question$conditionalLogicArgs<ExtArgs> = {}>(args?: Subset<T, Question$conditionalLogicArgs<ExtArgs>>): Prisma__ConditionalLogicClient<$Result.GetResult<Prisma.$ConditionalLogicPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */ 
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'String'>
    readonly formId: FieldRef<"Question", 'String'>
    readonly title: FieldRef<"Question", 'String'>
    readonly description: FieldRef<"Question", 'String'>
    readonly type: FieldRef<"Question", 'String'>
    readonly isRequired: FieldRef<"Question", 'Boolean'>
    readonly options: FieldRef<"Question", 'Json'>
    readonly order: FieldRef<"Question", 'Int'>
    readonly validation: FieldRef<"Question", 'Json'>
    readonly createdAt: FieldRef<"Question", 'DateTime'>
    readonly updatedAt: FieldRef<"Question", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question createManyAndReturn
   */
  export type QuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
  }

  /**
   * Question.answers
   */
  export type Question$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    where?: AnswerWhereInput
    orderBy?: AnswerOrderByWithRelationInput | AnswerOrderByWithRelationInput[]
    cursor?: AnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnswerScalarFieldEnum | AnswerScalarFieldEnum[]
  }

  /**
   * Question.conditionalLogic
   */
  export type Question$conditionalLogicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalLogic
     */
    select?: ConditionalLogicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalLogicInclude<ExtArgs> | null
    where?: ConditionalLogicWhereInput
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model ConditionalLogic
   */

  export type AggregateConditionalLogic = {
    _count: ConditionalLogicCountAggregateOutputType | null
    _min: ConditionalLogicMinAggregateOutputType | null
    _max: ConditionalLogicMaxAggregateOutputType | null
  }

  export type ConditionalLogicMinAggregateOutputType = {
    id: string | null
    questionId: string | null
    enabled: boolean | null
  }

  export type ConditionalLogicMaxAggregateOutputType = {
    id: string | null
    questionId: string | null
    enabled: boolean | null
  }

  export type ConditionalLogicCountAggregateOutputType = {
    id: number
    questionId: number
    enabled: number
    _all: number
  }


  export type ConditionalLogicMinAggregateInputType = {
    id?: true
    questionId?: true
    enabled?: true
  }

  export type ConditionalLogicMaxAggregateInputType = {
    id?: true
    questionId?: true
    enabled?: true
  }

  export type ConditionalLogicCountAggregateInputType = {
    id?: true
    questionId?: true
    enabled?: true
    _all?: true
  }

  export type ConditionalLogicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConditionalLogic to aggregate.
     */
    where?: ConditionalLogicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConditionalLogics to fetch.
     */
    orderBy?: ConditionalLogicOrderByWithRelationInput | ConditionalLogicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConditionalLogicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConditionalLogics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConditionalLogics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConditionalLogics
    **/
    _count?: true | ConditionalLogicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConditionalLogicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConditionalLogicMaxAggregateInputType
  }

  export type GetConditionalLogicAggregateType<T extends ConditionalLogicAggregateArgs> = {
        [P in keyof T & keyof AggregateConditionalLogic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConditionalLogic[P]>
      : GetScalarType<T[P], AggregateConditionalLogic[P]>
  }




  export type ConditionalLogicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConditionalLogicWhereInput
    orderBy?: ConditionalLogicOrderByWithAggregationInput | ConditionalLogicOrderByWithAggregationInput[]
    by: ConditionalLogicScalarFieldEnum[] | ConditionalLogicScalarFieldEnum
    having?: ConditionalLogicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConditionalLogicCountAggregateInputType | true
    _min?: ConditionalLogicMinAggregateInputType
    _max?: ConditionalLogicMaxAggregateInputType
  }

  export type ConditionalLogicGroupByOutputType = {
    id: string
    questionId: string
    enabled: boolean
    _count: ConditionalLogicCountAggregateOutputType | null
    _min: ConditionalLogicMinAggregateOutputType | null
    _max: ConditionalLogicMaxAggregateOutputType | null
  }

  type GetConditionalLogicGroupByPayload<T extends ConditionalLogicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConditionalLogicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConditionalLogicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConditionalLogicGroupByOutputType[P]>
            : GetScalarType<T[P], ConditionalLogicGroupByOutputType[P]>
        }
      >
    >


  export type ConditionalLogicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    enabled?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    rules?: boolean | ConditionalLogic$rulesArgs<ExtArgs>
    _count?: boolean | ConditionalLogicCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conditionalLogic"]>

  export type ConditionalLogicSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    enabled?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conditionalLogic"]>

  export type ConditionalLogicSelectScalar = {
    id?: boolean
    questionId?: boolean
    enabled?: boolean
  }

  export type ConditionalLogicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    rules?: boolean | ConditionalLogic$rulesArgs<ExtArgs>
    _count?: boolean | ConditionalLogicCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConditionalLogicIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }

  export type $ConditionalLogicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConditionalLogic"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
      rules: Prisma.$ConditionalRulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      questionId: string
      enabled: boolean
    }, ExtArgs["result"]["conditionalLogic"]>
    composites: {}
  }

  type ConditionalLogicGetPayload<S extends boolean | null | undefined | ConditionalLogicDefaultArgs> = $Result.GetResult<Prisma.$ConditionalLogicPayload, S>

  type ConditionalLogicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConditionalLogicFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConditionalLogicCountAggregateInputType | true
    }

  export interface ConditionalLogicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConditionalLogic'], meta: { name: 'ConditionalLogic' } }
    /**
     * Find zero or one ConditionalLogic that matches the filter.
     * @param {ConditionalLogicFindUniqueArgs} args - Arguments to find a ConditionalLogic
     * @example
     * // Get one ConditionalLogic
     * const conditionalLogic = await prisma.conditionalLogic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConditionalLogicFindUniqueArgs>(args: SelectSubset<T, ConditionalLogicFindUniqueArgs<ExtArgs>>): Prisma__ConditionalLogicClient<$Result.GetResult<Prisma.$ConditionalLogicPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ConditionalLogic that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConditionalLogicFindUniqueOrThrowArgs} args - Arguments to find a ConditionalLogic
     * @example
     * // Get one ConditionalLogic
     * const conditionalLogic = await prisma.conditionalLogic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConditionalLogicFindUniqueOrThrowArgs>(args: SelectSubset<T, ConditionalLogicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConditionalLogicClient<$Result.GetResult<Prisma.$ConditionalLogicPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ConditionalLogic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionalLogicFindFirstArgs} args - Arguments to find a ConditionalLogic
     * @example
     * // Get one ConditionalLogic
     * const conditionalLogic = await prisma.conditionalLogic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConditionalLogicFindFirstArgs>(args?: SelectSubset<T, ConditionalLogicFindFirstArgs<ExtArgs>>): Prisma__ConditionalLogicClient<$Result.GetResult<Prisma.$ConditionalLogicPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ConditionalLogic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionalLogicFindFirstOrThrowArgs} args - Arguments to find a ConditionalLogic
     * @example
     * // Get one ConditionalLogic
     * const conditionalLogic = await prisma.conditionalLogic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConditionalLogicFindFirstOrThrowArgs>(args?: SelectSubset<T, ConditionalLogicFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConditionalLogicClient<$Result.GetResult<Prisma.$ConditionalLogicPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ConditionalLogics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionalLogicFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConditionalLogics
     * const conditionalLogics = await prisma.conditionalLogic.findMany()
     * 
     * // Get first 10 ConditionalLogics
     * const conditionalLogics = await prisma.conditionalLogic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conditionalLogicWithIdOnly = await prisma.conditionalLogic.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConditionalLogicFindManyArgs>(args?: SelectSubset<T, ConditionalLogicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConditionalLogicPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ConditionalLogic.
     * @param {ConditionalLogicCreateArgs} args - Arguments to create a ConditionalLogic.
     * @example
     * // Create one ConditionalLogic
     * const ConditionalLogic = await prisma.conditionalLogic.create({
     *   data: {
     *     // ... data to create a ConditionalLogic
     *   }
     * })
     * 
     */
    create<T extends ConditionalLogicCreateArgs>(args: SelectSubset<T, ConditionalLogicCreateArgs<ExtArgs>>): Prisma__ConditionalLogicClient<$Result.GetResult<Prisma.$ConditionalLogicPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ConditionalLogics.
     * @param {ConditionalLogicCreateManyArgs} args - Arguments to create many ConditionalLogics.
     * @example
     * // Create many ConditionalLogics
     * const conditionalLogic = await prisma.conditionalLogic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConditionalLogicCreateManyArgs>(args?: SelectSubset<T, ConditionalLogicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConditionalLogics and returns the data saved in the database.
     * @param {ConditionalLogicCreateManyAndReturnArgs} args - Arguments to create many ConditionalLogics.
     * @example
     * // Create many ConditionalLogics
     * const conditionalLogic = await prisma.conditionalLogic.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConditionalLogics and only return the `id`
     * const conditionalLogicWithIdOnly = await prisma.conditionalLogic.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConditionalLogicCreateManyAndReturnArgs>(args?: SelectSubset<T, ConditionalLogicCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConditionalLogicPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ConditionalLogic.
     * @param {ConditionalLogicDeleteArgs} args - Arguments to delete one ConditionalLogic.
     * @example
     * // Delete one ConditionalLogic
     * const ConditionalLogic = await prisma.conditionalLogic.delete({
     *   where: {
     *     // ... filter to delete one ConditionalLogic
     *   }
     * })
     * 
     */
    delete<T extends ConditionalLogicDeleteArgs>(args: SelectSubset<T, ConditionalLogicDeleteArgs<ExtArgs>>): Prisma__ConditionalLogicClient<$Result.GetResult<Prisma.$ConditionalLogicPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ConditionalLogic.
     * @param {ConditionalLogicUpdateArgs} args - Arguments to update one ConditionalLogic.
     * @example
     * // Update one ConditionalLogic
     * const conditionalLogic = await prisma.conditionalLogic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConditionalLogicUpdateArgs>(args: SelectSubset<T, ConditionalLogicUpdateArgs<ExtArgs>>): Prisma__ConditionalLogicClient<$Result.GetResult<Prisma.$ConditionalLogicPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ConditionalLogics.
     * @param {ConditionalLogicDeleteManyArgs} args - Arguments to filter ConditionalLogics to delete.
     * @example
     * // Delete a few ConditionalLogics
     * const { count } = await prisma.conditionalLogic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConditionalLogicDeleteManyArgs>(args?: SelectSubset<T, ConditionalLogicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConditionalLogics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionalLogicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConditionalLogics
     * const conditionalLogic = await prisma.conditionalLogic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConditionalLogicUpdateManyArgs>(args: SelectSubset<T, ConditionalLogicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ConditionalLogic.
     * @param {ConditionalLogicUpsertArgs} args - Arguments to update or create a ConditionalLogic.
     * @example
     * // Update or create a ConditionalLogic
     * const conditionalLogic = await prisma.conditionalLogic.upsert({
     *   create: {
     *     // ... data to create a ConditionalLogic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConditionalLogic we want to update
     *   }
     * })
     */
    upsert<T extends ConditionalLogicUpsertArgs>(args: SelectSubset<T, ConditionalLogicUpsertArgs<ExtArgs>>): Prisma__ConditionalLogicClient<$Result.GetResult<Prisma.$ConditionalLogicPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ConditionalLogics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionalLogicCountArgs} args - Arguments to filter ConditionalLogics to count.
     * @example
     * // Count the number of ConditionalLogics
     * const count = await prisma.conditionalLogic.count({
     *   where: {
     *     // ... the filter for the ConditionalLogics we want to count
     *   }
     * })
    **/
    count<T extends ConditionalLogicCountArgs>(
      args?: Subset<T, ConditionalLogicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConditionalLogicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConditionalLogic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionalLogicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConditionalLogicAggregateArgs>(args: Subset<T, ConditionalLogicAggregateArgs>): Prisma.PrismaPromise<GetConditionalLogicAggregateType<T>>

    /**
     * Group by ConditionalLogic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionalLogicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConditionalLogicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConditionalLogicGroupByArgs['orderBy'] }
        : { orderBy?: ConditionalLogicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConditionalLogicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConditionalLogicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConditionalLogic model
   */
  readonly fields: ConditionalLogicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConditionalLogic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConditionalLogicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    rules<T extends ConditionalLogic$rulesArgs<ExtArgs> = {}>(args?: Subset<T, ConditionalLogic$rulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConditionalRulePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConditionalLogic model
   */ 
  interface ConditionalLogicFieldRefs {
    readonly id: FieldRef<"ConditionalLogic", 'String'>
    readonly questionId: FieldRef<"ConditionalLogic", 'String'>
    readonly enabled: FieldRef<"ConditionalLogic", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ConditionalLogic findUnique
   */
  export type ConditionalLogicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalLogic
     */
    select?: ConditionalLogicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalLogicInclude<ExtArgs> | null
    /**
     * Filter, which ConditionalLogic to fetch.
     */
    where: ConditionalLogicWhereUniqueInput
  }

  /**
   * ConditionalLogic findUniqueOrThrow
   */
  export type ConditionalLogicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalLogic
     */
    select?: ConditionalLogicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalLogicInclude<ExtArgs> | null
    /**
     * Filter, which ConditionalLogic to fetch.
     */
    where: ConditionalLogicWhereUniqueInput
  }

  /**
   * ConditionalLogic findFirst
   */
  export type ConditionalLogicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalLogic
     */
    select?: ConditionalLogicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalLogicInclude<ExtArgs> | null
    /**
     * Filter, which ConditionalLogic to fetch.
     */
    where?: ConditionalLogicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConditionalLogics to fetch.
     */
    orderBy?: ConditionalLogicOrderByWithRelationInput | ConditionalLogicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConditionalLogics.
     */
    cursor?: ConditionalLogicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConditionalLogics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConditionalLogics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConditionalLogics.
     */
    distinct?: ConditionalLogicScalarFieldEnum | ConditionalLogicScalarFieldEnum[]
  }

  /**
   * ConditionalLogic findFirstOrThrow
   */
  export type ConditionalLogicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalLogic
     */
    select?: ConditionalLogicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalLogicInclude<ExtArgs> | null
    /**
     * Filter, which ConditionalLogic to fetch.
     */
    where?: ConditionalLogicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConditionalLogics to fetch.
     */
    orderBy?: ConditionalLogicOrderByWithRelationInput | ConditionalLogicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConditionalLogics.
     */
    cursor?: ConditionalLogicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConditionalLogics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConditionalLogics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConditionalLogics.
     */
    distinct?: ConditionalLogicScalarFieldEnum | ConditionalLogicScalarFieldEnum[]
  }

  /**
   * ConditionalLogic findMany
   */
  export type ConditionalLogicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalLogic
     */
    select?: ConditionalLogicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalLogicInclude<ExtArgs> | null
    /**
     * Filter, which ConditionalLogics to fetch.
     */
    where?: ConditionalLogicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConditionalLogics to fetch.
     */
    orderBy?: ConditionalLogicOrderByWithRelationInput | ConditionalLogicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConditionalLogics.
     */
    cursor?: ConditionalLogicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConditionalLogics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConditionalLogics.
     */
    skip?: number
    distinct?: ConditionalLogicScalarFieldEnum | ConditionalLogicScalarFieldEnum[]
  }

  /**
   * ConditionalLogic create
   */
  export type ConditionalLogicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalLogic
     */
    select?: ConditionalLogicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalLogicInclude<ExtArgs> | null
    /**
     * The data needed to create a ConditionalLogic.
     */
    data: XOR<ConditionalLogicCreateInput, ConditionalLogicUncheckedCreateInput>
  }

  /**
   * ConditionalLogic createMany
   */
  export type ConditionalLogicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConditionalLogics.
     */
    data: ConditionalLogicCreateManyInput | ConditionalLogicCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConditionalLogic createManyAndReturn
   */
  export type ConditionalLogicCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalLogic
     */
    select?: ConditionalLogicSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ConditionalLogics.
     */
    data: ConditionalLogicCreateManyInput | ConditionalLogicCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalLogicIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConditionalLogic update
   */
  export type ConditionalLogicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalLogic
     */
    select?: ConditionalLogicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalLogicInclude<ExtArgs> | null
    /**
     * The data needed to update a ConditionalLogic.
     */
    data: XOR<ConditionalLogicUpdateInput, ConditionalLogicUncheckedUpdateInput>
    /**
     * Choose, which ConditionalLogic to update.
     */
    where: ConditionalLogicWhereUniqueInput
  }

  /**
   * ConditionalLogic updateMany
   */
  export type ConditionalLogicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConditionalLogics.
     */
    data: XOR<ConditionalLogicUpdateManyMutationInput, ConditionalLogicUncheckedUpdateManyInput>
    /**
     * Filter which ConditionalLogics to update
     */
    where?: ConditionalLogicWhereInput
  }

  /**
   * ConditionalLogic upsert
   */
  export type ConditionalLogicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalLogic
     */
    select?: ConditionalLogicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalLogicInclude<ExtArgs> | null
    /**
     * The filter to search for the ConditionalLogic to update in case it exists.
     */
    where: ConditionalLogicWhereUniqueInput
    /**
     * In case the ConditionalLogic found by the `where` argument doesn't exist, create a new ConditionalLogic with this data.
     */
    create: XOR<ConditionalLogicCreateInput, ConditionalLogicUncheckedCreateInput>
    /**
     * In case the ConditionalLogic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConditionalLogicUpdateInput, ConditionalLogicUncheckedUpdateInput>
  }

  /**
   * ConditionalLogic delete
   */
  export type ConditionalLogicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalLogic
     */
    select?: ConditionalLogicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalLogicInclude<ExtArgs> | null
    /**
     * Filter which ConditionalLogic to delete.
     */
    where: ConditionalLogicWhereUniqueInput
  }

  /**
   * ConditionalLogic deleteMany
   */
  export type ConditionalLogicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConditionalLogics to delete
     */
    where?: ConditionalLogicWhereInput
  }

  /**
   * ConditionalLogic.rules
   */
  export type ConditionalLogic$rulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalRule
     */
    select?: ConditionalRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalRuleInclude<ExtArgs> | null
    where?: ConditionalRuleWhereInput
    orderBy?: ConditionalRuleOrderByWithRelationInput | ConditionalRuleOrderByWithRelationInput[]
    cursor?: ConditionalRuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConditionalRuleScalarFieldEnum | ConditionalRuleScalarFieldEnum[]
  }

  /**
   * ConditionalLogic without action
   */
  export type ConditionalLogicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalLogic
     */
    select?: ConditionalLogicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalLogicInclude<ExtArgs> | null
  }


  /**
   * Model ConditionalRule
   */

  export type AggregateConditionalRule = {
    _count: ConditionalRuleCountAggregateOutputType | null
    _min: ConditionalRuleMinAggregateOutputType | null
    _max: ConditionalRuleMaxAggregateOutputType | null
  }

  export type ConditionalRuleMinAggregateOutputType = {
    id: string | null
    conditionalLogicId: string | null
    targetQuestionId: string | null
    operator: string | null
    value: string | null
    action: string | null
  }

  export type ConditionalRuleMaxAggregateOutputType = {
    id: string | null
    conditionalLogicId: string | null
    targetQuestionId: string | null
    operator: string | null
    value: string | null
    action: string | null
  }

  export type ConditionalRuleCountAggregateOutputType = {
    id: number
    conditionalLogicId: number
    targetQuestionId: number
    operator: number
    value: number
    action: number
    _all: number
  }


  export type ConditionalRuleMinAggregateInputType = {
    id?: true
    conditionalLogicId?: true
    targetQuestionId?: true
    operator?: true
    value?: true
    action?: true
  }

  export type ConditionalRuleMaxAggregateInputType = {
    id?: true
    conditionalLogicId?: true
    targetQuestionId?: true
    operator?: true
    value?: true
    action?: true
  }

  export type ConditionalRuleCountAggregateInputType = {
    id?: true
    conditionalLogicId?: true
    targetQuestionId?: true
    operator?: true
    value?: true
    action?: true
    _all?: true
  }

  export type ConditionalRuleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConditionalRule to aggregate.
     */
    where?: ConditionalRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConditionalRules to fetch.
     */
    orderBy?: ConditionalRuleOrderByWithRelationInput | ConditionalRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConditionalRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConditionalRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConditionalRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConditionalRules
    **/
    _count?: true | ConditionalRuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConditionalRuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConditionalRuleMaxAggregateInputType
  }

  export type GetConditionalRuleAggregateType<T extends ConditionalRuleAggregateArgs> = {
        [P in keyof T & keyof AggregateConditionalRule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConditionalRule[P]>
      : GetScalarType<T[P], AggregateConditionalRule[P]>
  }




  export type ConditionalRuleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConditionalRuleWhereInput
    orderBy?: ConditionalRuleOrderByWithAggregationInput | ConditionalRuleOrderByWithAggregationInput[]
    by: ConditionalRuleScalarFieldEnum[] | ConditionalRuleScalarFieldEnum
    having?: ConditionalRuleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConditionalRuleCountAggregateInputType | true
    _min?: ConditionalRuleMinAggregateInputType
    _max?: ConditionalRuleMaxAggregateInputType
  }

  export type ConditionalRuleGroupByOutputType = {
    id: string
    conditionalLogicId: string
    targetQuestionId: string
    operator: string
    value: string | null
    action: string
    _count: ConditionalRuleCountAggregateOutputType | null
    _min: ConditionalRuleMinAggregateOutputType | null
    _max: ConditionalRuleMaxAggregateOutputType | null
  }

  type GetConditionalRuleGroupByPayload<T extends ConditionalRuleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConditionalRuleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConditionalRuleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConditionalRuleGroupByOutputType[P]>
            : GetScalarType<T[P], ConditionalRuleGroupByOutputType[P]>
        }
      >
    >


  export type ConditionalRuleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conditionalLogicId?: boolean
    targetQuestionId?: boolean
    operator?: boolean
    value?: boolean
    action?: boolean
    conditionalLogic?: boolean | ConditionalLogicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conditionalRule"]>

  export type ConditionalRuleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conditionalLogicId?: boolean
    targetQuestionId?: boolean
    operator?: boolean
    value?: boolean
    action?: boolean
    conditionalLogic?: boolean | ConditionalLogicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conditionalRule"]>

  export type ConditionalRuleSelectScalar = {
    id?: boolean
    conditionalLogicId?: boolean
    targetQuestionId?: boolean
    operator?: boolean
    value?: boolean
    action?: boolean
  }

  export type ConditionalRuleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conditionalLogic?: boolean | ConditionalLogicDefaultArgs<ExtArgs>
  }
  export type ConditionalRuleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conditionalLogic?: boolean | ConditionalLogicDefaultArgs<ExtArgs>
  }

  export type $ConditionalRulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConditionalRule"
    objects: {
      conditionalLogic: Prisma.$ConditionalLogicPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      conditionalLogicId: string
      targetQuestionId: string
      operator: string
      value: string | null
      action: string
    }, ExtArgs["result"]["conditionalRule"]>
    composites: {}
  }

  type ConditionalRuleGetPayload<S extends boolean | null | undefined | ConditionalRuleDefaultArgs> = $Result.GetResult<Prisma.$ConditionalRulePayload, S>

  type ConditionalRuleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConditionalRuleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConditionalRuleCountAggregateInputType | true
    }

  export interface ConditionalRuleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConditionalRule'], meta: { name: 'ConditionalRule' } }
    /**
     * Find zero or one ConditionalRule that matches the filter.
     * @param {ConditionalRuleFindUniqueArgs} args - Arguments to find a ConditionalRule
     * @example
     * // Get one ConditionalRule
     * const conditionalRule = await prisma.conditionalRule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConditionalRuleFindUniqueArgs>(args: SelectSubset<T, ConditionalRuleFindUniqueArgs<ExtArgs>>): Prisma__ConditionalRuleClient<$Result.GetResult<Prisma.$ConditionalRulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ConditionalRule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConditionalRuleFindUniqueOrThrowArgs} args - Arguments to find a ConditionalRule
     * @example
     * // Get one ConditionalRule
     * const conditionalRule = await prisma.conditionalRule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConditionalRuleFindUniqueOrThrowArgs>(args: SelectSubset<T, ConditionalRuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConditionalRuleClient<$Result.GetResult<Prisma.$ConditionalRulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ConditionalRule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionalRuleFindFirstArgs} args - Arguments to find a ConditionalRule
     * @example
     * // Get one ConditionalRule
     * const conditionalRule = await prisma.conditionalRule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConditionalRuleFindFirstArgs>(args?: SelectSubset<T, ConditionalRuleFindFirstArgs<ExtArgs>>): Prisma__ConditionalRuleClient<$Result.GetResult<Prisma.$ConditionalRulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ConditionalRule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionalRuleFindFirstOrThrowArgs} args - Arguments to find a ConditionalRule
     * @example
     * // Get one ConditionalRule
     * const conditionalRule = await prisma.conditionalRule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConditionalRuleFindFirstOrThrowArgs>(args?: SelectSubset<T, ConditionalRuleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConditionalRuleClient<$Result.GetResult<Prisma.$ConditionalRulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ConditionalRules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionalRuleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConditionalRules
     * const conditionalRules = await prisma.conditionalRule.findMany()
     * 
     * // Get first 10 ConditionalRules
     * const conditionalRules = await prisma.conditionalRule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conditionalRuleWithIdOnly = await prisma.conditionalRule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConditionalRuleFindManyArgs>(args?: SelectSubset<T, ConditionalRuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConditionalRulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ConditionalRule.
     * @param {ConditionalRuleCreateArgs} args - Arguments to create a ConditionalRule.
     * @example
     * // Create one ConditionalRule
     * const ConditionalRule = await prisma.conditionalRule.create({
     *   data: {
     *     // ... data to create a ConditionalRule
     *   }
     * })
     * 
     */
    create<T extends ConditionalRuleCreateArgs>(args: SelectSubset<T, ConditionalRuleCreateArgs<ExtArgs>>): Prisma__ConditionalRuleClient<$Result.GetResult<Prisma.$ConditionalRulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ConditionalRules.
     * @param {ConditionalRuleCreateManyArgs} args - Arguments to create many ConditionalRules.
     * @example
     * // Create many ConditionalRules
     * const conditionalRule = await prisma.conditionalRule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConditionalRuleCreateManyArgs>(args?: SelectSubset<T, ConditionalRuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConditionalRules and returns the data saved in the database.
     * @param {ConditionalRuleCreateManyAndReturnArgs} args - Arguments to create many ConditionalRules.
     * @example
     * // Create many ConditionalRules
     * const conditionalRule = await prisma.conditionalRule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConditionalRules and only return the `id`
     * const conditionalRuleWithIdOnly = await prisma.conditionalRule.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConditionalRuleCreateManyAndReturnArgs>(args?: SelectSubset<T, ConditionalRuleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConditionalRulePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ConditionalRule.
     * @param {ConditionalRuleDeleteArgs} args - Arguments to delete one ConditionalRule.
     * @example
     * // Delete one ConditionalRule
     * const ConditionalRule = await prisma.conditionalRule.delete({
     *   where: {
     *     // ... filter to delete one ConditionalRule
     *   }
     * })
     * 
     */
    delete<T extends ConditionalRuleDeleteArgs>(args: SelectSubset<T, ConditionalRuleDeleteArgs<ExtArgs>>): Prisma__ConditionalRuleClient<$Result.GetResult<Prisma.$ConditionalRulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ConditionalRule.
     * @param {ConditionalRuleUpdateArgs} args - Arguments to update one ConditionalRule.
     * @example
     * // Update one ConditionalRule
     * const conditionalRule = await prisma.conditionalRule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConditionalRuleUpdateArgs>(args: SelectSubset<T, ConditionalRuleUpdateArgs<ExtArgs>>): Prisma__ConditionalRuleClient<$Result.GetResult<Prisma.$ConditionalRulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ConditionalRules.
     * @param {ConditionalRuleDeleteManyArgs} args - Arguments to filter ConditionalRules to delete.
     * @example
     * // Delete a few ConditionalRules
     * const { count } = await prisma.conditionalRule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConditionalRuleDeleteManyArgs>(args?: SelectSubset<T, ConditionalRuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConditionalRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionalRuleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConditionalRules
     * const conditionalRule = await prisma.conditionalRule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConditionalRuleUpdateManyArgs>(args: SelectSubset<T, ConditionalRuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ConditionalRule.
     * @param {ConditionalRuleUpsertArgs} args - Arguments to update or create a ConditionalRule.
     * @example
     * // Update or create a ConditionalRule
     * const conditionalRule = await prisma.conditionalRule.upsert({
     *   create: {
     *     // ... data to create a ConditionalRule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConditionalRule we want to update
     *   }
     * })
     */
    upsert<T extends ConditionalRuleUpsertArgs>(args: SelectSubset<T, ConditionalRuleUpsertArgs<ExtArgs>>): Prisma__ConditionalRuleClient<$Result.GetResult<Prisma.$ConditionalRulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ConditionalRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionalRuleCountArgs} args - Arguments to filter ConditionalRules to count.
     * @example
     * // Count the number of ConditionalRules
     * const count = await prisma.conditionalRule.count({
     *   where: {
     *     // ... the filter for the ConditionalRules we want to count
     *   }
     * })
    **/
    count<T extends ConditionalRuleCountArgs>(
      args?: Subset<T, ConditionalRuleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConditionalRuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConditionalRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionalRuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConditionalRuleAggregateArgs>(args: Subset<T, ConditionalRuleAggregateArgs>): Prisma.PrismaPromise<GetConditionalRuleAggregateType<T>>

    /**
     * Group by ConditionalRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionalRuleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConditionalRuleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConditionalRuleGroupByArgs['orderBy'] }
        : { orderBy?: ConditionalRuleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConditionalRuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConditionalRuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConditionalRule model
   */
  readonly fields: ConditionalRuleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConditionalRule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConditionalRuleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    conditionalLogic<T extends ConditionalLogicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConditionalLogicDefaultArgs<ExtArgs>>): Prisma__ConditionalLogicClient<$Result.GetResult<Prisma.$ConditionalLogicPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConditionalRule model
   */ 
  interface ConditionalRuleFieldRefs {
    readonly id: FieldRef<"ConditionalRule", 'String'>
    readonly conditionalLogicId: FieldRef<"ConditionalRule", 'String'>
    readonly targetQuestionId: FieldRef<"ConditionalRule", 'String'>
    readonly operator: FieldRef<"ConditionalRule", 'String'>
    readonly value: FieldRef<"ConditionalRule", 'String'>
    readonly action: FieldRef<"ConditionalRule", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ConditionalRule findUnique
   */
  export type ConditionalRuleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalRule
     */
    select?: ConditionalRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalRuleInclude<ExtArgs> | null
    /**
     * Filter, which ConditionalRule to fetch.
     */
    where: ConditionalRuleWhereUniqueInput
  }

  /**
   * ConditionalRule findUniqueOrThrow
   */
  export type ConditionalRuleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalRule
     */
    select?: ConditionalRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalRuleInclude<ExtArgs> | null
    /**
     * Filter, which ConditionalRule to fetch.
     */
    where: ConditionalRuleWhereUniqueInput
  }

  /**
   * ConditionalRule findFirst
   */
  export type ConditionalRuleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalRule
     */
    select?: ConditionalRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalRuleInclude<ExtArgs> | null
    /**
     * Filter, which ConditionalRule to fetch.
     */
    where?: ConditionalRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConditionalRules to fetch.
     */
    orderBy?: ConditionalRuleOrderByWithRelationInput | ConditionalRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConditionalRules.
     */
    cursor?: ConditionalRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConditionalRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConditionalRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConditionalRules.
     */
    distinct?: ConditionalRuleScalarFieldEnum | ConditionalRuleScalarFieldEnum[]
  }

  /**
   * ConditionalRule findFirstOrThrow
   */
  export type ConditionalRuleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalRule
     */
    select?: ConditionalRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalRuleInclude<ExtArgs> | null
    /**
     * Filter, which ConditionalRule to fetch.
     */
    where?: ConditionalRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConditionalRules to fetch.
     */
    orderBy?: ConditionalRuleOrderByWithRelationInput | ConditionalRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConditionalRules.
     */
    cursor?: ConditionalRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConditionalRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConditionalRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConditionalRules.
     */
    distinct?: ConditionalRuleScalarFieldEnum | ConditionalRuleScalarFieldEnum[]
  }

  /**
   * ConditionalRule findMany
   */
  export type ConditionalRuleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalRule
     */
    select?: ConditionalRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalRuleInclude<ExtArgs> | null
    /**
     * Filter, which ConditionalRules to fetch.
     */
    where?: ConditionalRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConditionalRules to fetch.
     */
    orderBy?: ConditionalRuleOrderByWithRelationInput | ConditionalRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConditionalRules.
     */
    cursor?: ConditionalRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConditionalRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConditionalRules.
     */
    skip?: number
    distinct?: ConditionalRuleScalarFieldEnum | ConditionalRuleScalarFieldEnum[]
  }

  /**
   * ConditionalRule create
   */
  export type ConditionalRuleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalRule
     */
    select?: ConditionalRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalRuleInclude<ExtArgs> | null
    /**
     * The data needed to create a ConditionalRule.
     */
    data: XOR<ConditionalRuleCreateInput, ConditionalRuleUncheckedCreateInput>
  }

  /**
   * ConditionalRule createMany
   */
  export type ConditionalRuleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConditionalRules.
     */
    data: ConditionalRuleCreateManyInput | ConditionalRuleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConditionalRule createManyAndReturn
   */
  export type ConditionalRuleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalRule
     */
    select?: ConditionalRuleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ConditionalRules.
     */
    data: ConditionalRuleCreateManyInput | ConditionalRuleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalRuleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConditionalRule update
   */
  export type ConditionalRuleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalRule
     */
    select?: ConditionalRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalRuleInclude<ExtArgs> | null
    /**
     * The data needed to update a ConditionalRule.
     */
    data: XOR<ConditionalRuleUpdateInput, ConditionalRuleUncheckedUpdateInput>
    /**
     * Choose, which ConditionalRule to update.
     */
    where: ConditionalRuleWhereUniqueInput
  }

  /**
   * ConditionalRule updateMany
   */
  export type ConditionalRuleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConditionalRules.
     */
    data: XOR<ConditionalRuleUpdateManyMutationInput, ConditionalRuleUncheckedUpdateManyInput>
    /**
     * Filter which ConditionalRules to update
     */
    where?: ConditionalRuleWhereInput
  }

  /**
   * ConditionalRule upsert
   */
  export type ConditionalRuleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalRule
     */
    select?: ConditionalRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalRuleInclude<ExtArgs> | null
    /**
     * The filter to search for the ConditionalRule to update in case it exists.
     */
    where: ConditionalRuleWhereUniqueInput
    /**
     * In case the ConditionalRule found by the `where` argument doesn't exist, create a new ConditionalRule with this data.
     */
    create: XOR<ConditionalRuleCreateInput, ConditionalRuleUncheckedCreateInput>
    /**
     * In case the ConditionalRule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConditionalRuleUpdateInput, ConditionalRuleUncheckedUpdateInput>
  }

  /**
   * ConditionalRule delete
   */
  export type ConditionalRuleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalRule
     */
    select?: ConditionalRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalRuleInclude<ExtArgs> | null
    /**
     * Filter which ConditionalRule to delete.
     */
    where: ConditionalRuleWhereUniqueInput
  }

  /**
   * ConditionalRule deleteMany
   */
  export type ConditionalRuleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConditionalRules to delete
     */
    where?: ConditionalRuleWhereInput
  }

  /**
   * ConditionalRule without action
   */
  export type ConditionalRuleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionalRule
     */
    select?: ConditionalRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionalRuleInclude<ExtArgs> | null
  }


  /**
   * Model Response
   */

  export type AggregateResponse = {
    _count: ResponseCountAggregateOutputType | null
    _min: ResponseMinAggregateOutputType | null
    _max: ResponseMaxAggregateOutputType | null
  }

  export type ResponseMinAggregateOutputType = {
    id: string | null
    formId: string | null
    respondentId: string | null
    isCompleted: boolean | null
    startedAt: Date | null
    completedAt: Date | null
  }

  export type ResponseMaxAggregateOutputType = {
    id: string | null
    formId: string | null
    respondentId: string | null
    isCompleted: boolean | null
    startedAt: Date | null
    completedAt: Date | null
  }

  export type ResponseCountAggregateOutputType = {
    id: number
    formId: number
    respondentId: number
    isCompleted: number
    startedAt: number
    completedAt: number
    _all: number
  }


  export type ResponseMinAggregateInputType = {
    id?: true
    formId?: true
    respondentId?: true
    isCompleted?: true
    startedAt?: true
    completedAt?: true
  }

  export type ResponseMaxAggregateInputType = {
    id?: true
    formId?: true
    respondentId?: true
    isCompleted?: true
    startedAt?: true
    completedAt?: true
  }

  export type ResponseCountAggregateInputType = {
    id?: true
    formId?: true
    respondentId?: true
    isCompleted?: true
    startedAt?: true
    completedAt?: true
    _all?: true
  }

  export type ResponseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Response to aggregate.
     */
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     */
    orderBy?: ResponseOrderByWithRelationInput | ResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Responses
    **/
    _count?: true | ResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResponseMaxAggregateInputType
  }

  export type GetResponseAggregateType<T extends ResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResponse[P]>
      : GetScalarType<T[P], AggregateResponse[P]>
  }




  export type ResponseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResponseWhereInput
    orderBy?: ResponseOrderByWithAggregationInput | ResponseOrderByWithAggregationInput[]
    by: ResponseScalarFieldEnum[] | ResponseScalarFieldEnum
    having?: ResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResponseCountAggregateInputType | true
    _min?: ResponseMinAggregateInputType
    _max?: ResponseMaxAggregateInputType
  }

  export type ResponseGroupByOutputType = {
    id: string
    formId: string
    respondentId: string
    isCompleted: boolean
    startedAt: Date
    completedAt: Date | null
    _count: ResponseCountAggregateOutputType | null
    _min: ResponseMinAggregateOutputType | null
    _max: ResponseMaxAggregateOutputType | null
  }

  type GetResponseGroupByPayload<T extends ResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResponseGroupByOutputType[P]>
            : GetScalarType<T[P], ResponseGroupByOutputType[P]>
        }
      >
    >


  export type ResponseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    formId?: boolean
    respondentId?: boolean
    isCompleted?: boolean
    startedAt?: boolean
    completedAt?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
    answers?: boolean | Response$answersArgs<ExtArgs>
    _count?: boolean | ResponseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["response"]>

  export type ResponseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    formId?: boolean
    respondentId?: boolean
    isCompleted?: boolean
    startedAt?: boolean
    completedAt?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["response"]>

  export type ResponseSelectScalar = {
    id?: boolean
    formId?: boolean
    respondentId?: boolean
    isCompleted?: boolean
    startedAt?: boolean
    completedAt?: boolean
  }

  export type ResponseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
    answers?: boolean | Response$answersArgs<ExtArgs>
    _count?: boolean | ResponseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ResponseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
  }

  export type $ResponsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Response"
    objects: {
      form: Prisma.$FormPayload<ExtArgs>
      answers: Prisma.$AnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      formId: string
      respondentId: string
      isCompleted: boolean
      startedAt: Date
      completedAt: Date | null
    }, ExtArgs["result"]["response"]>
    composites: {}
  }

  type ResponseGetPayload<S extends boolean | null | undefined | ResponseDefaultArgs> = $Result.GetResult<Prisma.$ResponsePayload, S>

  type ResponseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResponseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResponseCountAggregateInputType | true
    }

  export interface ResponseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Response'], meta: { name: 'Response' } }
    /**
     * Find zero or one Response that matches the filter.
     * @param {ResponseFindUniqueArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResponseFindUniqueArgs>(args: SelectSubset<T, ResponseFindUniqueArgs<ExtArgs>>): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Response that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ResponseFindUniqueOrThrowArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResponseFindUniqueOrThrowArgs>(args: SelectSubset<T, ResponseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Response that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseFindFirstArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResponseFindFirstArgs>(args?: SelectSubset<T, ResponseFindFirstArgs<ExtArgs>>): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Response that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseFindFirstOrThrowArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResponseFindFirstOrThrowArgs>(args?: SelectSubset<T, ResponseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Responses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Responses
     * const responses = await prisma.response.findMany()
     * 
     * // Get first 10 Responses
     * const responses = await prisma.response.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const responseWithIdOnly = await prisma.response.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResponseFindManyArgs>(args?: SelectSubset<T, ResponseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Response.
     * @param {ResponseCreateArgs} args - Arguments to create a Response.
     * @example
     * // Create one Response
     * const Response = await prisma.response.create({
     *   data: {
     *     // ... data to create a Response
     *   }
     * })
     * 
     */
    create<T extends ResponseCreateArgs>(args: SelectSubset<T, ResponseCreateArgs<ExtArgs>>): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Responses.
     * @param {ResponseCreateManyArgs} args - Arguments to create many Responses.
     * @example
     * // Create many Responses
     * const response = await prisma.response.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResponseCreateManyArgs>(args?: SelectSubset<T, ResponseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Responses and returns the data saved in the database.
     * @param {ResponseCreateManyAndReturnArgs} args - Arguments to create many Responses.
     * @example
     * // Create many Responses
     * const response = await prisma.response.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Responses and only return the `id`
     * const responseWithIdOnly = await prisma.response.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResponseCreateManyAndReturnArgs>(args?: SelectSubset<T, ResponseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Response.
     * @param {ResponseDeleteArgs} args - Arguments to delete one Response.
     * @example
     * // Delete one Response
     * const Response = await prisma.response.delete({
     *   where: {
     *     // ... filter to delete one Response
     *   }
     * })
     * 
     */
    delete<T extends ResponseDeleteArgs>(args: SelectSubset<T, ResponseDeleteArgs<ExtArgs>>): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Response.
     * @param {ResponseUpdateArgs} args - Arguments to update one Response.
     * @example
     * // Update one Response
     * const response = await prisma.response.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResponseUpdateArgs>(args: SelectSubset<T, ResponseUpdateArgs<ExtArgs>>): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Responses.
     * @param {ResponseDeleteManyArgs} args - Arguments to filter Responses to delete.
     * @example
     * // Delete a few Responses
     * const { count } = await prisma.response.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResponseDeleteManyArgs>(args?: SelectSubset<T, ResponseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Responses
     * const response = await prisma.response.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResponseUpdateManyArgs>(args: SelectSubset<T, ResponseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Response.
     * @param {ResponseUpsertArgs} args - Arguments to update or create a Response.
     * @example
     * // Update or create a Response
     * const response = await prisma.response.upsert({
     *   create: {
     *     // ... data to create a Response
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Response we want to update
     *   }
     * })
     */
    upsert<T extends ResponseUpsertArgs>(args: SelectSubset<T, ResponseUpsertArgs<ExtArgs>>): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseCountArgs} args - Arguments to filter Responses to count.
     * @example
     * // Count the number of Responses
     * const count = await prisma.response.count({
     *   where: {
     *     // ... the filter for the Responses we want to count
     *   }
     * })
    **/
    count<T extends ResponseCountArgs>(
      args?: Subset<T, ResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Response.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResponseAggregateArgs>(args: Subset<T, ResponseAggregateArgs>): Prisma.PrismaPromise<GetResponseAggregateType<T>>

    /**
     * Group by Response.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResponseGroupByArgs['orderBy'] }
        : { orderBy?: ResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Response model
   */
  readonly fields: ResponseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Response.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResponseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    form<T extends FormDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FormDefaultArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    answers<T extends Response$answersArgs<ExtArgs> = {}>(args?: Subset<T, Response$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Response model
   */ 
  interface ResponseFieldRefs {
    readonly id: FieldRef<"Response", 'String'>
    readonly formId: FieldRef<"Response", 'String'>
    readonly respondentId: FieldRef<"Response", 'String'>
    readonly isCompleted: FieldRef<"Response", 'Boolean'>
    readonly startedAt: FieldRef<"Response", 'DateTime'>
    readonly completedAt: FieldRef<"Response", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Response findUnique
   */
  export type ResponseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * Filter, which Response to fetch.
     */
    where: ResponseWhereUniqueInput
  }

  /**
   * Response findUniqueOrThrow
   */
  export type ResponseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * Filter, which Response to fetch.
     */
    where: ResponseWhereUniqueInput
  }

  /**
   * Response findFirst
   */
  export type ResponseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * Filter, which Response to fetch.
     */
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     */
    orderBy?: ResponseOrderByWithRelationInput | ResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Responses.
     */
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Responses.
     */
    distinct?: ResponseScalarFieldEnum | ResponseScalarFieldEnum[]
  }

  /**
   * Response findFirstOrThrow
   */
  export type ResponseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * Filter, which Response to fetch.
     */
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     */
    orderBy?: ResponseOrderByWithRelationInput | ResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Responses.
     */
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Responses.
     */
    distinct?: ResponseScalarFieldEnum | ResponseScalarFieldEnum[]
  }

  /**
   * Response findMany
   */
  export type ResponseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * Filter, which Responses to fetch.
     */
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     */
    orderBy?: ResponseOrderByWithRelationInput | ResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Responses.
     */
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     */
    skip?: number
    distinct?: ResponseScalarFieldEnum | ResponseScalarFieldEnum[]
  }

  /**
   * Response create
   */
  export type ResponseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * The data needed to create a Response.
     */
    data: XOR<ResponseCreateInput, ResponseUncheckedCreateInput>
  }

  /**
   * Response createMany
   */
  export type ResponseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Responses.
     */
    data: ResponseCreateManyInput | ResponseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Response createManyAndReturn
   */
  export type ResponseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Responses.
     */
    data: ResponseCreateManyInput | ResponseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Response update
   */
  export type ResponseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * The data needed to update a Response.
     */
    data: XOR<ResponseUpdateInput, ResponseUncheckedUpdateInput>
    /**
     * Choose, which Response to update.
     */
    where: ResponseWhereUniqueInput
  }

  /**
   * Response updateMany
   */
  export type ResponseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Responses.
     */
    data: XOR<ResponseUpdateManyMutationInput, ResponseUncheckedUpdateManyInput>
    /**
     * Filter which Responses to update
     */
    where?: ResponseWhereInput
  }

  /**
   * Response upsert
   */
  export type ResponseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * The filter to search for the Response to update in case it exists.
     */
    where: ResponseWhereUniqueInput
    /**
     * In case the Response found by the `where` argument doesn't exist, create a new Response with this data.
     */
    create: XOR<ResponseCreateInput, ResponseUncheckedCreateInput>
    /**
     * In case the Response was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResponseUpdateInput, ResponseUncheckedUpdateInput>
  }

  /**
   * Response delete
   */
  export type ResponseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseInclude<ExtArgs> | null
    /**
     * Filter which Response to delete.
     */
    where: ResponseWhereUniqueInput
  }

  /**
   * Response deleteMany
   */
  export type ResponseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Responses to delete
     */
    where?: ResponseWhereInput
  }

  /**
   * Response.answers
   */
  export type Response$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    where?: AnswerWhereInput
    orderBy?: AnswerOrderByWithRelationInput | AnswerOrderByWithRelationInput[]
    cursor?: AnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnswerScalarFieldEnum | AnswerScalarFieldEnum[]
  }

  /**
   * Response without action
   */
  export type ResponseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Response
     */
    select?: ResponseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseInclude<ExtArgs> | null
  }


  /**
   * Model Answer
   */

  export type AggregateAnswer = {
    _count: AnswerCountAggregateOutputType | null
    _min: AnswerMinAggregateOutputType | null
    _max: AnswerMaxAggregateOutputType | null
  }

  export type AnswerMinAggregateOutputType = {
    id: string | null
    questionId: string | null
    responseId: string | null
    value: string | null
    fileUrl: string | null
    createdAt: Date | null
  }

  export type AnswerMaxAggregateOutputType = {
    id: string | null
    questionId: string | null
    responseId: string | null
    value: string | null
    fileUrl: string | null
    createdAt: Date | null
  }

  export type AnswerCountAggregateOutputType = {
    id: number
    questionId: number
    responseId: number
    value: number
    fileUrl: number
    createdAt: number
    _all: number
  }


  export type AnswerMinAggregateInputType = {
    id?: true
    questionId?: true
    responseId?: true
    value?: true
    fileUrl?: true
    createdAt?: true
  }

  export type AnswerMaxAggregateInputType = {
    id?: true
    questionId?: true
    responseId?: true
    value?: true
    fileUrl?: true
    createdAt?: true
  }

  export type AnswerCountAggregateInputType = {
    id?: true
    questionId?: true
    responseId?: true
    value?: true
    fileUrl?: true
    createdAt?: true
    _all?: true
  }

  export type AnswerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Answer to aggregate.
     */
    where?: AnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Answers to fetch.
     */
    orderBy?: AnswerOrderByWithRelationInput | AnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Answers
    **/
    _count?: true | AnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnswerMaxAggregateInputType
  }

  export type GetAnswerAggregateType<T extends AnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnswer[P]>
      : GetScalarType<T[P], AggregateAnswer[P]>
  }




  export type AnswerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnswerWhereInput
    orderBy?: AnswerOrderByWithAggregationInput | AnswerOrderByWithAggregationInput[]
    by: AnswerScalarFieldEnum[] | AnswerScalarFieldEnum
    having?: AnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnswerCountAggregateInputType | true
    _min?: AnswerMinAggregateInputType
    _max?: AnswerMaxAggregateInputType
  }

  export type AnswerGroupByOutputType = {
    id: string
    questionId: string
    responseId: string
    value: string | null
    fileUrl: string | null
    createdAt: Date
    _count: AnswerCountAggregateOutputType | null
    _min: AnswerMinAggregateOutputType | null
    _max: AnswerMaxAggregateOutputType | null
  }

  type GetAnswerGroupByPayload<T extends AnswerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnswerGroupByOutputType[P]>
            : GetScalarType<T[P], AnswerGroupByOutputType[P]>
        }
      >
    >


  export type AnswerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    responseId?: boolean
    value?: boolean
    fileUrl?: boolean
    createdAt?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    response?: boolean | ResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["answer"]>

  export type AnswerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    responseId?: boolean
    value?: boolean
    fileUrl?: boolean
    createdAt?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    response?: boolean | ResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["answer"]>

  export type AnswerSelectScalar = {
    id?: boolean
    questionId?: boolean
    responseId?: boolean
    value?: boolean
    fileUrl?: boolean
    createdAt?: boolean
  }

  export type AnswerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    response?: boolean | ResponseDefaultArgs<ExtArgs>
  }
  export type AnswerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    response?: boolean | ResponseDefaultArgs<ExtArgs>
  }

  export type $AnswerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Answer"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
      response: Prisma.$ResponsePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      questionId: string
      responseId: string
      value: string | null
      fileUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["answer"]>
    composites: {}
  }

  type AnswerGetPayload<S extends boolean | null | undefined | AnswerDefaultArgs> = $Result.GetResult<Prisma.$AnswerPayload, S>

  type AnswerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AnswerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AnswerCountAggregateInputType | true
    }

  export interface AnswerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Answer'], meta: { name: 'Answer' } }
    /**
     * Find zero or one Answer that matches the filter.
     * @param {AnswerFindUniqueArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnswerFindUniqueArgs>(args: SelectSubset<T, AnswerFindUniqueArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Answer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AnswerFindUniqueOrThrowArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnswerFindUniqueOrThrowArgs>(args: SelectSubset<T, AnswerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Answer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerFindFirstArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnswerFindFirstArgs>(args?: SelectSubset<T, AnswerFindFirstArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Answer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerFindFirstOrThrowArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnswerFindFirstOrThrowArgs>(args?: SelectSubset<T, AnswerFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Answers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Answers
     * const answers = await prisma.answer.findMany()
     * 
     * // Get first 10 Answers
     * const answers = await prisma.answer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const answerWithIdOnly = await prisma.answer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnswerFindManyArgs>(args?: SelectSubset<T, AnswerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Answer.
     * @param {AnswerCreateArgs} args - Arguments to create a Answer.
     * @example
     * // Create one Answer
     * const Answer = await prisma.answer.create({
     *   data: {
     *     // ... data to create a Answer
     *   }
     * })
     * 
     */
    create<T extends AnswerCreateArgs>(args: SelectSubset<T, AnswerCreateArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Answers.
     * @param {AnswerCreateManyArgs} args - Arguments to create many Answers.
     * @example
     * // Create many Answers
     * const answer = await prisma.answer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnswerCreateManyArgs>(args?: SelectSubset<T, AnswerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Answers and returns the data saved in the database.
     * @param {AnswerCreateManyAndReturnArgs} args - Arguments to create many Answers.
     * @example
     * // Create many Answers
     * const answer = await prisma.answer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Answers and only return the `id`
     * const answerWithIdOnly = await prisma.answer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnswerCreateManyAndReturnArgs>(args?: SelectSubset<T, AnswerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Answer.
     * @param {AnswerDeleteArgs} args - Arguments to delete one Answer.
     * @example
     * // Delete one Answer
     * const Answer = await prisma.answer.delete({
     *   where: {
     *     // ... filter to delete one Answer
     *   }
     * })
     * 
     */
    delete<T extends AnswerDeleteArgs>(args: SelectSubset<T, AnswerDeleteArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Answer.
     * @param {AnswerUpdateArgs} args - Arguments to update one Answer.
     * @example
     * // Update one Answer
     * const answer = await prisma.answer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnswerUpdateArgs>(args: SelectSubset<T, AnswerUpdateArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Answers.
     * @param {AnswerDeleteManyArgs} args - Arguments to filter Answers to delete.
     * @example
     * // Delete a few Answers
     * const { count } = await prisma.answer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnswerDeleteManyArgs>(args?: SelectSubset<T, AnswerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Answers
     * const answer = await prisma.answer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnswerUpdateManyArgs>(args: SelectSubset<T, AnswerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Answer.
     * @param {AnswerUpsertArgs} args - Arguments to update or create a Answer.
     * @example
     * // Update or create a Answer
     * const answer = await prisma.answer.upsert({
     *   create: {
     *     // ... data to create a Answer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Answer we want to update
     *   }
     * })
     */
    upsert<T extends AnswerUpsertArgs>(args: SelectSubset<T, AnswerUpsertArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerCountArgs} args - Arguments to filter Answers to count.
     * @example
     * // Count the number of Answers
     * const count = await prisma.answer.count({
     *   where: {
     *     // ... the filter for the Answers we want to count
     *   }
     * })
    **/
    count<T extends AnswerCountArgs>(
      args?: Subset<T, AnswerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Answer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnswerAggregateArgs>(args: Subset<T, AnswerAggregateArgs>): Prisma.PrismaPromise<GetAnswerAggregateType<T>>

    /**
     * Group by Answer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnswerGroupByArgs['orderBy'] }
        : { orderBy?: AnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Answer model
   */
  readonly fields: AnswerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Answer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnswerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    response<T extends ResponseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResponseDefaultArgs<ExtArgs>>): Prisma__ResponseClient<$Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Answer model
   */ 
  interface AnswerFieldRefs {
    readonly id: FieldRef<"Answer", 'String'>
    readonly questionId: FieldRef<"Answer", 'String'>
    readonly responseId: FieldRef<"Answer", 'String'>
    readonly value: FieldRef<"Answer", 'String'>
    readonly fileUrl: FieldRef<"Answer", 'String'>
    readonly createdAt: FieldRef<"Answer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Answer findUnique
   */
  export type AnswerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter, which Answer to fetch.
     */
    where: AnswerWhereUniqueInput
  }

  /**
   * Answer findUniqueOrThrow
   */
  export type AnswerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter, which Answer to fetch.
     */
    where: AnswerWhereUniqueInput
  }

  /**
   * Answer findFirst
   */
  export type AnswerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter, which Answer to fetch.
     */
    where?: AnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Answers to fetch.
     */
    orderBy?: AnswerOrderByWithRelationInput | AnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Answers.
     */
    cursor?: AnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Answers.
     */
    distinct?: AnswerScalarFieldEnum | AnswerScalarFieldEnum[]
  }

  /**
   * Answer findFirstOrThrow
   */
  export type AnswerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter, which Answer to fetch.
     */
    where?: AnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Answers to fetch.
     */
    orderBy?: AnswerOrderByWithRelationInput | AnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Answers.
     */
    cursor?: AnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Answers.
     */
    distinct?: AnswerScalarFieldEnum | AnswerScalarFieldEnum[]
  }

  /**
   * Answer findMany
   */
  export type AnswerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter, which Answers to fetch.
     */
    where?: AnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Answers to fetch.
     */
    orderBy?: AnswerOrderByWithRelationInput | AnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Answers.
     */
    cursor?: AnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Answers.
     */
    skip?: number
    distinct?: AnswerScalarFieldEnum | AnswerScalarFieldEnum[]
  }

  /**
   * Answer create
   */
  export type AnswerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * The data needed to create a Answer.
     */
    data: XOR<AnswerCreateInput, AnswerUncheckedCreateInput>
  }

  /**
   * Answer createMany
   */
  export type AnswerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Answers.
     */
    data: AnswerCreateManyInput | AnswerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Answer createManyAndReturn
   */
  export type AnswerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Answers.
     */
    data: AnswerCreateManyInput | AnswerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Answer update
   */
  export type AnswerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * The data needed to update a Answer.
     */
    data: XOR<AnswerUpdateInput, AnswerUncheckedUpdateInput>
    /**
     * Choose, which Answer to update.
     */
    where: AnswerWhereUniqueInput
  }

  /**
   * Answer updateMany
   */
  export type AnswerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Answers.
     */
    data: XOR<AnswerUpdateManyMutationInput, AnswerUncheckedUpdateManyInput>
    /**
     * Filter which Answers to update
     */
    where?: AnswerWhereInput
  }

  /**
   * Answer upsert
   */
  export type AnswerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * The filter to search for the Answer to update in case it exists.
     */
    where: AnswerWhereUniqueInput
    /**
     * In case the Answer found by the `where` argument doesn't exist, create a new Answer with this data.
     */
    create: XOR<AnswerCreateInput, AnswerUncheckedCreateInput>
    /**
     * In case the Answer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnswerUpdateInput, AnswerUncheckedUpdateInput>
  }

  /**
   * Answer delete
   */
  export type AnswerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter which Answer to delete.
     */
    where: AnswerWhereUniqueInput
  }

  /**
   * Answer deleteMany
   */
  export type AnswerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Answers to delete
     */
    where?: AnswerWhereInput
  }

  /**
   * Answer without action
   */
  export type AnswerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
  }


  /**
   * Model FormVisit
   */

  export type AggregateFormVisit = {
    _count: FormVisitCountAggregateOutputType | null
    _min: FormVisitMinAggregateOutputType | null
    _max: FormVisitMaxAggregateOutputType | null
  }

  export type FormVisitMinAggregateOutputType = {
    id: string | null
    formId: string | null
    visitedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    referrer: string | null
  }

  export type FormVisitMaxAggregateOutputType = {
    id: string | null
    formId: string | null
    visitedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    referrer: string | null
  }

  export type FormVisitCountAggregateOutputType = {
    id: number
    formId: number
    visitedAt: number
    ipAddress: number
    userAgent: number
    referrer: number
    _all: number
  }


  export type FormVisitMinAggregateInputType = {
    id?: true
    formId?: true
    visitedAt?: true
    ipAddress?: true
    userAgent?: true
    referrer?: true
  }

  export type FormVisitMaxAggregateInputType = {
    id?: true
    formId?: true
    visitedAt?: true
    ipAddress?: true
    userAgent?: true
    referrer?: true
  }

  export type FormVisitCountAggregateInputType = {
    id?: true
    formId?: true
    visitedAt?: true
    ipAddress?: true
    userAgent?: true
    referrer?: true
    _all?: true
  }

  export type FormVisitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FormVisit to aggregate.
     */
    where?: FormVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormVisits to fetch.
     */
    orderBy?: FormVisitOrderByWithRelationInput | FormVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FormVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FormVisits
    **/
    _count?: true | FormVisitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormVisitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormVisitMaxAggregateInputType
  }

  export type GetFormVisitAggregateType<T extends FormVisitAggregateArgs> = {
        [P in keyof T & keyof AggregateFormVisit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFormVisit[P]>
      : GetScalarType<T[P], AggregateFormVisit[P]>
  }




  export type FormVisitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormVisitWhereInput
    orderBy?: FormVisitOrderByWithAggregationInput | FormVisitOrderByWithAggregationInput[]
    by: FormVisitScalarFieldEnum[] | FormVisitScalarFieldEnum
    having?: FormVisitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormVisitCountAggregateInputType | true
    _min?: FormVisitMinAggregateInputType
    _max?: FormVisitMaxAggregateInputType
  }

  export type FormVisitGroupByOutputType = {
    id: string
    formId: string
    visitedAt: Date
    ipAddress: string | null
    userAgent: string | null
    referrer: string | null
    _count: FormVisitCountAggregateOutputType | null
    _min: FormVisitMinAggregateOutputType | null
    _max: FormVisitMaxAggregateOutputType | null
  }

  type GetFormVisitGroupByPayload<T extends FormVisitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormVisitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormVisitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormVisitGroupByOutputType[P]>
            : GetScalarType<T[P], FormVisitGroupByOutputType[P]>
        }
      >
    >


  export type FormVisitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    formId?: boolean
    visitedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    referrer?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["formVisit"]>

  export type FormVisitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    formId?: boolean
    visitedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    referrer?: boolean
    form?: boolean | FormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["formVisit"]>

  export type FormVisitSelectScalar = {
    id?: boolean
    formId?: boolean
    visitedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    referrer?: boolean
  }

  export type FormVisitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
  }
  export type FormVisitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    form?: boolean | FormDefaultArgs<ExtArgs>
  }

  export type $FormVisitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FormVisit"
    objects: {
      form: Prisma.$FormPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      formId: string
      visitedAt: Date
      ipAddress: string | null
      userAgent: string | null
      referrer: string | null
    }, ExtArgs["result"]["formVisit"]>
    composites: {}
  }

  type FormVisitGetPayload<S extends boolean | null | undefined | FormVisitDefaultArgs> = $Result.GetResult<Prisma.$FormVisitPayload, S>

  type FormVisitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FormVisitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FormVisitCountAggregateInputType | true
    }

  export interface FormVisitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FormVisit'], meta: { name: 'FormVisit' } }
    /**
     * Find zero or one FormVisit that matches the filter.
     * @param {FormVisitFindUniqueArgs} args - Arguments to find a FormVisit
     * @example
     * // Get one FormVisit
     * const formVisit = await prisma.formVisit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FormVisitFindUniqueArgs>(args: SelectSubset<T, FormVisitFindUniqueArgs<ExtArgs>>): Prisma__FormVisitClient<$Result.GetResult<Prisma.$FormVisitPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FormVisit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FormVisitFindUniqueOrThrowArgs} args - Arguments to find a FormVisit
     * @example
     * // Get one FormVisit
     * const formVisit = await prisma.formVisit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FormVisitFindUniqueOrThrowArgs>(args: SelectSubset<T, FormVisitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FormVisitClient<$Result.GetResult<Prisma.$FormVisitPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FormVisit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormVisitFindFirstArgs} args - Arguments to find a FormVisit
     * @example
     * // Get one FormVisit
     * const formVisit = await prisma.formVisit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FormVisitFindFirstArgs>(args?: SelectSubset<T, FormVisitFindFirstArgs<ExtArgs>>): Prisma__FormVisitClient<$Result.GetResult<Prisma.$FormVisitPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FormVisit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormVisitFindFirstOrThrowArgs} args - Arguments to find a FormVisit
     * @example
     * // Get one FormVisit
     * const formVisit = await prisma.formVisit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FormVisitFindFirstOrThrowArgs>(args?: SelectSubset<T, FormVisitFindFirstOrThrowArgs<ExtArgs>>): Prisma__FormVisitClient<$Result.GetResult<Prisma.$FormVisitPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FormVisits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormVisitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FormVisits
     * const formVisits = await prisma.formVisit.findMany()
     * 
     * // Get first 10 FormVisits
     * const formVisits = await prisma.formVisit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const formVisitWithIdOnly = await prisma.formVisit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FormVisitFindManyArgs>(args?: SelectSubset<T, FormVisitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormVisitPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FormVisit.
     * @param {FormVisitCreateArgs} args - Arguments to create a FormVisit.
     * @example
     * // Create one FormVisit
     * const FormVisit = await prisma.formVisit.create({
     *   data: {
     *     // ... data to create a FormVisit
     *   }
     * })
     * 
     */
    create<T extends FormVisitCreateArgs>(args: SelectSubset<T, FormVisitCreateArgs<ExtArgs>>): Prisma__FormVisitClient<$Result.GetResult<Prisma.$FormVisitPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FormVisits.
     * @param {FormVisitCreateManyArgs} args - Arguments to create many FormVisits.
     * @example
     * // Create many FormVisits
     * const formVisit = await prisma.formVisit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FormVisitCreateManyArgs>(args?: SelectSubset<T, FormVisitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FormVisits and returns the data saved in the database.
     * @param {FormVisitCreateManyAndReturnArgs} args - Arguments to create many FormVisits.
     * @example
     * // Create many FormVisits
     * const formVisit = await prisma.formVisit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FormVisits and only return the `id`
     * const formVisitWithIdOnly = await prisma.formVisit.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FormVisitCreateManyAndReturnArgs>(args?: SelectSubset<T, FormVisitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormVisitPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FormVisit.
     * @param {FormVisitDeleteArgs} args - Arguments to delete one FormVisit.
     * @example
     * // Delete one FormVisit
     * const FormVisit = await prisma.formVisit.delete({
     *   where: {
     *     // ... filter to delete one FormVisit
     *   }
     * })
     * 
     */
    delete<T extends FormVisitDeleteArgs>(args: SelectSubset<T, FormVisitDeleteArgs<ExtArgs>>): Prisma__FormVisitClient<$Result.GetResult<Prisma.$FormVisitPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FormVisit.
     * @param {FormVisitUpdateArgs} args - Arguments to update one FormVisit.
     * @example
     * // Update one FormVisit
     * const formVisit = await prisma.formVisit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FormVisitUpdateArgs>(args: SelectSubset<T, FormVisitUpdateArgs<ExtArgs>>): Prisma__FormVisitClient<$Result.GetResult<Prisma.$FormVisitPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FormVisits.
     * @param {FormVisitDeleteManyArgs} args - Arguments to filter FormVisits to delete.
     * @example
     * // Delete a few FormVisits
     * const { count } = await prisma.formVisit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FormVisitDeleteManyArgs>(args?: SelectSubset<T, FormVisitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FormVisits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormVisitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FormVisits
     * const formVisit = await prisma.formVisit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FormVisitUpdateManyArgs>(args: SelectSubset<T, FormVisitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FormVisit.
     * @param {FormVisitUpsertArgs} args - Arguments to update or create a FormVisit.
     * @example
     * // Update or create a FormVisit
     * const formVisit = await prisma.formVisit.upsert({
     *   create: {
     *     // ... data to create a FormVisit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FormVisit we want to update
     *   }
     * })
     */
    upsert<T extends FormVisitUpsertArgs>(args: SelectSubset<T, FormVisitUpsertArgs<ExtArgs>>): Prisma__FormVisitClient<$Result.GetResult<Prisma.$FormVisitPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FormVisits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormVisitCountArgs} args - Arguments to filter FormVisits to count.
     * @example
     * // Count the number of FormVisits
     * const count = await prisma.formVisit.count({
     *   where: {
     *     // ... the filter for the FormVisits we want to count
     *   }
     * })
    **/
    count<T extends FormVisitCountArgs>(
      args?: Subset<T, FormVisitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormVisitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FormVisit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormVisitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormVisitAggregateArgs>(args: Subset<T, FormVisitAggregateArgs>): Prisma.PrismaPromise<GetFormVisitAggregateType<T>>

    /**
     * Group by FormVisit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormVisitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FormVisitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FormVisitGroupByArgs['orderBy'] }
        : { orderBy?: FormVisitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FormVisitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormVisitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FormVisit model
   */
  readonly fields: FormVisitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FormVisit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FormVisitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    form<T extends FormDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FormDefaultArgs<ExtArgs>>): Prisma__FormClient<$Result.GetResult<Prisma.$FormPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FormVisit model
   */ 
  interface FormVisitFieldRefs {
    readonly id: FieldRef<"FormVisit", 'String'>
    readonly formId: FieldRef<"FormVisit", 'String'>
    readonly visitedAt: FieldRef<"FormVisit", 'DateTime'>
    readonly ipAddress: FieldRef<"FormVisit", 'String'>
    readonly userAgent: FieldRef<"FormVisit", 'String'>
    readonly referrer: FieldRef<"FormVisit", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FormVisit findUnique
   */
  export type FormVisitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormVisit
     */
    select?: FormVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormVisitInclude<ExtArgs> | null
    /**
     * Filter, which FormVisit to fetch.
     */
    where: FormVisitWhereUniqueInput
  }

  /**
   * FormVisit findUniqueOrThrow
   */
  export type FormVisitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormVisit
     */
    select?: FormVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormVisitInclude<ExtArgs> | null
    /**
     * Filter, which FormVisit to fetch.
     */
    where: FormVisitWhereUniqueInput
  }

  /**
   * FormVisit findFirst
   */
  export type FormVisitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormVisit
     */
    select?: FormVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormVisitInclude<ExtArgs> | null
    /**
     * Filter, which FormVisit to fetch.
     */
    where?: FormVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormVisits to fetch.
     */
    orderBy?: FormVisitOrderByWithRelationInput | FormVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FormVisits.
     */
    cursor?: FormVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FormVisits.
     */
    distinct?: FormVisitScalarFieldEnum | FormVisitScalarFieldEnum[]
  }

  /**
   * FormVisit findFirstOrThrow
   */
  export type FormVisitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormVisit
     */
    select?: FormVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormVisitInclude<ExtArgs> | null
    /**
     * Filter, which FormVisit to fetch.
     */
    where?: FormVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormVisits to fetch.
     */
    orderBy?: FormVisitOrderByWithRelationInput | FormVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FormVisits.
     */
    cursor?: FormVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FormVisits.
     */
    distinct?: FormVisitScalarFieldEnum | FormVisitScalarFieldEnum[]
  }

  /**
   * FormVisit findMany
   */
  export type FormVisitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormVisit
     */
    select?: FormVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormVisitInclude<ExtArgs> | null
    /**
     * Filter, which FormVisits to fetch.
     */
    where?: FormVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormVisits to fetch.
     */
    orderBy?: FormVisitOrderByWithRelationInput | FormVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FormVisits.
     */
    cursor?: FormVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormVisits.
     */
    skip?: number
    distinct?: FormVisitScalarFieldEnum | FormVisitScalarFieldEnum[]
  }

  /**
   * FormVisit create
   */
  export type FormVisitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormVisit
     */
    select?: FormVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormVisitInclude<ExtArgs> | null
    /**
     * The data needed to create a FormVisit.
     */
    data: XOR<FormVisitCreateInput, FormVisitUncheckedCreateInput>
  }

  /**
   * FormVisit createMany
   */
  export type FormVisitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FormVisits.
     */
    data: FormVisitCreateManyInput | FormVisitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FormVisit createManyAndReturn
   */
  export type FormVisitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormVisit
     */
    select?: FormVisitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FormVisits.
     */
    data: FormVisitCreateManyInput | FormVisitCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormVisitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FormVisit update
   */
  export type FormVisitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormVisit
     */
    select?: FormVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormVisitInclude<ExtArgs> | null
    /**
     * The data needed to update a FormVisit.
     */
    data: XOR<FormVisitUpdateInput, FormVisitUncheckedUpdateInput>
    /**
     * Choose, which FormVisit to update.
     */
    where: FormVisitWhereUniqueInput
  }

  /**
   * FormVisit updateMany
   */
  export type FormVisitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FormVisits.
     */
    data: XOR<FormVisitUpdateManyMutationInput, FormVisitUncheckedUpdateManyInput>
    /**
     * Filter which FormVisits to update
     */
    where?: FormVisitWhereInput
  }

  /**
   * FormVisit upsert
   */
  export type FormVisitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormVisit
     */
    select?: FormVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormVisitInclude<ExtArgs> | null
    /**
     * The filter to search for the FormVisit to update in case it exists.
     */
    where: FormVisitWhereUniqueInput
    /**
     * In case the FormVisit found by the `where` argument doesn't exist, create a new FormVisit with this data.
     */
    create: XOR<FormVisitCreateInput, FormVisitUncheckedCreateInput>
    /**
     * In case the FormVisit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FormVisitUpdateInput, FormVisitUncheckedUpdateInput>
  }

  /**
   * FormVisit delete
   */
  export type FormVisitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormVisit
     */
    select?: FormVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormVisitInclude<ExtArgs> | null
    /**
     * Filter which FormVisit to delete.
     */
    where: FormVisitWhereUniqueInput
  }

  /**
   * FormVisit deleteMany
   */
  export type FormVisitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FormVisits to delete
     */
    where?: FormVisitWhereInput
  }

  /**
   * FormVisit without action
   */
  export type FormVisitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormVisit
     */
    select?: FormVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormVisitInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FormScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    isPublished: 'isPublished',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type FormScalarFieldEnum = (typeof FormScalarFieldEnum)[keyof typeof FormScalarFieldEnum]


  export const ThemeScalarFieldEnum: {
    id: 'id',
    formId: 'formId',
    primaryColor: 'primaryColor',
    backgroundColor: 'backgroundColor',
    fontFamily: 'fontFamily'
  };

  export type ThemeScalarFieldEnum = (typeof ThemeScalarFieldEnum)[keyof typeof ThemeScalarFieldEnum]


  export const FormSettingsScalarFieldEnum: {
    id: 'id',
    formId: 'formId',
    requireSignIn: 'requireSignIn',
    limitOneResponsePerUser: 'limitOneResponsePerUser',
    showProgressBar: 'showProgressBar',
    shuffleQuestions: 'shuffleQuestions',
    confirmationMessage: 'confirmationMessage',
    redirectUrl: 'redirectUrl',
    notifyOnSubmission: 'notifyOnSubmission'
  };

  export type FormSettingsScalarFieldEnum = (typeof FormSettingsScalarFieldEnum)[keyof typeof FormSettingsScalarFieldEnum]


  export const NotificationEmailScalarFieldEnum: {
    id: 'id',
    email: 'email',
    formSettingsId: 'formSettingsId'
  };

  export type NotificationEmailScalarFieldEnum = (typeof NotificationEmailScalarFieldEnum)[keyof typeof NotificationEmailScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    formId: 'formId',
    title: 'title',
    description: 'description',
    type: 'type',
    isRequired: 'isRequired',
    options: 'options',
    order: 'order',
    validation: 'validation',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const ConditionalLogicScalarFieldEnum: {
    id: 'id',
    questionId: 'questionId',
    enabled: 'enabled'
  };

  export type ConditionalLogicScalarFieldEnum = (typeof ConditionalLogicScalarFieldEnum)[keyof typeof ConditionalLogicScalarFieldEnum]


  export const ConditionalRuleScalarFieldEnum: {
    id: 'id',
    conditionalLogicId: 'conditionalLogicId',
    targetQuestionId: 'targetQuestionId',
    operator: 'operator',
    value: 'value',
    action: 'action'
  };

  export type ConditionalRuleScalarFieldEnum = (typeof ConditionalRuleScalarFieldEnum)[keyof typeof ConditionalRuleScalarFieldEnum]


  export const ResponseScalarFieldEnum: {
    id: 'id',
    formId: 'formId',
    respondentId: 'respondentId',
    isCompleted: 'isCompleted',
    startedAt: 'startedAt',
    completedAt: 'completedAt'
  };

  export type ResponseScalarFieldEnum = (typeof ResponseScalarFieldEnum)[keyof typeof ResponseScalarFieldEnum]


  export const AnswerScalarFieldEnum: {
    id: 'id',
    questionId: 'questionId',
    responseId: 'responseId',
    value: 'value',
    fileUrl: 'fileUrl',
    createdAt: 'createdAt'
  };

  export type AnswerScalarFieldEnum = (typeof AnswerScalarFieldEnum)[keyof typeof AnswerScalarFieldEnum]


  export const FormVisitScalarFieldEnum: {
    id: 'id',
    formId: 'formId',
    visitedAt: 'visitedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    referrer: 'referrer'
  };

  export type FormVisitScalarFieldEnum = (typeof FormVisitScalarFieldEnum)[keyof typeof FormVisitScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    forms?: FormListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    forms?: FormOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    forms?: FormListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type FormWhereInput = {
    AND?: FormWhereInput | FormWhereInput[]
    OR?: FormWhereInput[]
    NOT?: FormWhereInput | FormWhereInput[]
    id?: StringFilter<"Form"> | string
    title?: StringFilter<"Form"> | string
    description?: StringNullableFilter<"Form"> | string | null
    isPublished?: BoolFilter<"Form"> | boolean
    createdAt?: DateTimeFilter<"Form"> | Date | string
    updatedAt?: DateTimeFilter<"Form"> | Date | string
    userId?: StringFilter<"Form"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    questions?: QuestionListRelationFilter
    responses?: ResponseListRelationFilter
    visits?: FormVisitListRelationFilter
    theme?: XOR<ThemeNullableRelationFilter, ThemeWhereInput> | null
    settings?: XOR<FormSettingsNullableRelationFilter, FormSettingsWhereInput> | null
  }

  export type FormOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    isPublished?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    questions?: QuestionOrderByRelationAggregateInput
    responses?: ResponseOrderByRelationAggregateInput
    visits?: FormVisitOrderByRelationAggregateInput
    theme?: ThemeOrderByWithRelationInput
    settings?: FormSettingsOrderByWithRelationInput
  }

  export type FormWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FormWhereInput | FormWhereInput[]
    OR?: FormWhereInput[]
    NOT?: FormWhereInput | FormWhereInput[]
    title?: StringFilter<"Form"> | string
    description?: StringNullableFilter<"Form"> | string | null
    isPublished?: BoolFilter<"Form"> | boolean
    createdAt?: DateTimeFilter<"Form"> | Date | string
    updatedAt?: DateTimeFilter<"Form"> | Date | string
    userId?: StringFilter<"Form"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    questions?: QuestionListRelationFilter
    responses?: ResponseListRelationFilter
    visits?: FormVisitListRelationFilter
    theme?: XOR<ThemeNullableRelationFilter, ThemeWhereInput> | null
    settings?: XOR<FormSettingsNullableRelationFilter, FormSettingsWhereInput> | null
  }, "id">

  export type FormOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    isPublished?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: FormCountOrderByAggregateInput
    _max?: FormMaxOrderByAggregateInput
    _min?: FormMinOrderByAggregateInput
  }

  export type FormScalarWhereWithAggregatesInput = {
    AND?: FormScalarWhereWithAggregatesInput | FormScalarWhereWithAggregatesInput[]
    OR?: FormScalarWhereWithAggregatesInput[]
    NOT?: FormScalarWhereWithAggregatesInput | FormScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Form"> | string
    title?: StringWithAggregatesFilter<"Form"> | string
    description?: StringNullableWithAggregatesFilter<"Form"> | string | null
    isPublished?: BoolWithAggregatesFilter<"Form"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Form"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Form"> | Date | string
    userId?: StringWithAggregatesFilter<"Form"> | string
  }

  export type ThemeWhereInput = {
    AND?: ThemeWhereInput | ThemeWhereInput[]
    OR?: ThemeWhereInput[]
    NOT?: ThemeWhereInput | ThemeWhereInput[]
    id?: StringFilter<"Theme"> | string
    formId?: StringFilter<"Theme"> | string
    primaryColor?: StringFilter<"Theme"> | string
    backgroundColor?: StringFilter<"Theme"> | string
    fontFamily?: StringFilter<"Theme"> | string
    form?: XOR<FormRelationFilter, FormWhereInput>
  }

  export type ThemeOrderByWithRelationInput = {
    id?: SortOrder
    formId?: SortOrder
    primaryColor?: SortOrder
    backgroundColor?: SortOrder
    fontFamily?: SortOrder
    form?: FormOrderByWithRelationInput
  }

  export type ThemeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    formId?: string
    AND?: ThemeWhereInput | ThemeWhereInput[]
    OR?: ThemeWhereInput[]
    NOT?: ThemeWhereInput | ThemeWhereInput[]
    primaryColor?: StringFilter<"Theme"> | string
    backgroundColor?: StringFilter<"Theme"> | string
    fontFamily?: StringFilter<"Theme"> | string
    form?: XOR<FormRelationFilter, FormWhereInput>
  }, "id" | "formId">

  export type ThemeOrderByWithAggregationInput = {
    id?: SortOrder
    formId?: SortOrder
    primaryColor?: SortOrder
    backgroundColor?: SortOrder
    fontFamily?: SortOrder
    _count?: ThemeCountOrderByAggregateInput
    _max?: ThemeMaxOrderByAggregateInput
    _min?: ThemeMinOrderByAggregateInput
  }

  export type ThemeScalarWhereWithAggregatesInput = {
    AND?: ThemeScalarWhereWithAggregatesInput | ThemeScalarWhereWithAggregatesInput[]
    OR?: ThemeScalarWhereWithAggregatesInput[]
    NOT?: ThemeScalarWhereWithAggregatesInput | ThemeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Theme"> | string
    formId?: StringWithAggregatesFilter<"Theme"> | string
    primaryColor?: StringWithAggregatesFilter<"Theme"> | string
    backgroundColor?: StringWithAggregatesFilter<"Theme"> | string
    fontFamily?: StringWithAggregatesFilter<"Theme"> | string
  }

  export type FormSettingsWhereInput = {
    AND?: FormSettingsWhereInput | FormSettingsWhereInput[]
    OR?: FormSettingsWhereInput[]
    NOT?: FormSettingsWhereInput | FormSettingsWhereInput[]
    id?: StringFilter<"FormSettings"> | string
    formId?: StringFilter<"FormSettings"> | string
    requireSignIn?: BoolFilter<"FormSettings"> | boolean
    limitOneResponsePerUser?: BoolFilter<"FormSettings"> | boolean
    showProgressBar?: BoolFilter<"FormSettings"> | boolean
    shuffleQuestions?: BoolFilter<"FormSettings"> | boolean
    confirmationMessage?: StringFilter<"FormSettings"> | string
    redirectUrl?: StringNullableFilter<"FormSettings"> | string | null
    notifyOnSubmission?: BoolFilter<"FormSettings"> | boolean
    form?: XOR<FormRelationFilter, FormWhereInput>
    notificationEmails?: NotificationEmailListRelationFilter
  }

  export type FormSettingsOrderByWithRelationInput = {
    id?: SortOrder
    formId?: SortOrder
    requireSignIn?: SortOrder
    limitOneResponsePerUser?: SortOrder
    showProgressBar?: SortOrder
    shuffleQuestions?: SortOrder
    confirmationMessage?: SortOrder
    redirectUrl?: SortOrderInput | SortOrder
    notifyOnSubmission?: SortOrder
    form?: FormOrderByWithRelationInput
    notificationEmails?: NotificationEmailOrderByRelationAggregateInput
  }

  export type FormSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    formId?: string
    AND?: FormSettingsWhereInput | FormSettingsWhereInput[]
    OR?: FormSettingsWhereInput[]
    NOT?: FormSettingsWhereInput | FormSettingsWhereInput[]
    requireSignIn?: BoolFilter<"FormSettings"> | boolean
    limitOneResponsePerUser?: BoolFilter<"FormSettings"> | boolean
    showProgressBar?: BoolFilter<"FormSettings"> | boolean
    shuffleQuestions?: BoolFilter<"FormSettings"> | boolean
    confirmationMessage?: StringFilter<"FormSettings"> | string
    redirectUrl?: StringNullableFilter<"FormSettings"> | string | null
    notifyOnSubmission?: BoolFilter<"FormSettings"> | boolean
    form?: XOR<FormRelationFilter, FormWhereInput>
    notificationEmails?: NotificationEmailListRelationFilter
  }, "id" | "formId">

  export type FormSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    formId?: SortOrder
    requireSignIn?: SortOrder
    limitOneResponsePerUser?: SortOrder
    showProgressBar?: SortOrder
    shuffleQuestions?: SortOrder
    confirmationMessage?: SortOrder
    redirectUrl?: SortOrderInput | SortOrder
    notifyOnSubmission?: SortOrder
    _count?: FormSettingsCountOrderByAggregateInput
    _max?: FormSettingsMaxOrderByAggregateInput
    _min?: FormSettingsMinOrderByAggregateInput
  }

  export type FormSettingsScalarWhereWithAggregatesInput = {
    AND?: FormSettingsScalarWhereWithAggregatesInput | FormSettingsScalarWhereWithAggregatesInput[]
    OR?: FormSettingsScalarWhereWithAggregatesInput[]
    NOT?: FormSettingsScalarWhereWithAggregatesInput | FormSettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FormSettings"> | string
    formId?: StringWithAggregatesFilter<"FormSettings"> | string
    requireSignIn?: BoolWithAggregatesFilter<"FormSettings"> | boolean
    limitOneResponsePerUser?: BoolWithAggregatesFilter<"FormSettings"> | boolean
    showProgressBar?: BoolWithAggregatesFilter<"FormSettings"> | boolean
    shuffleQuestions?: BoolWithAggregatesFilter<"FormSettings"> | boolean
    confirmationMessage?: StringWithAggregatesFilter<"FormSettings"> | string
    redirectUrl?: StringNullableWithAggregatesFilter<"FormSettings"> | string | null
    notifyOnSubmission?: BoolWithAggregatesFilter<"FormSettings"> | boolean
  }

  export type NotificationEmailWhereInput = {
    AND?: NotificationEmailWhereInput | NotificationEmailWhereInput[]
    OR?: NotificationEmailWhereInput[]
    NOT?: NotificationEmailWhereInput | NotificationEmailWhereInput[]
    id?: StringFilter<"NotificationEmail"> | string
    email?: StringFilter<"NotificationEmail"> | string
    formSettingsId?: StringFilter<"NotificationEmail"> | string
    formSettings?: XOR<FormSettingsRelationFilter, FormSettingsWhereInput>
  }

  export type NotificationEmailOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    formSettingsId?: SortOrder
    formSettings?: FormSettingsOrderByWithRelationInput
  }

  export type NotificationEmailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationEmailWhereInput | NotificationEmailWhereInput[]
    OR?: NotificationEmailWhereInput[]
    NOT?: NotificationEmailWhereInput | NotificationEmailWhereInput[]
    email?: StringFilter<"NotificationEmail"> | string
    formSettingsId?: StringFilter<"NotificationEmail"> | string
    formSettings?: XOR<FormSettingsRelationFilter, FormSettingsWhereInput>
  }, "id">

  export type NotificationEmailOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    formSettingsId?: SortOrder
    _count?: NotificationEmailCountOrderByAggregateInput
    _max?: NotificationEmailMaxOrderByAggregateInput
    _min?: NotificationEmailMinOrderByAggregateInput
  }

  export type NotificationEmailScalarWhereWithAggregatesInput = {
    AND?: NotificationEmailScalarWhereWithAggregatesInput | NotificationEmailScalarWhereWithAggregatesInput[]
    OR?: NotificationEmailScalarWhereWithAggregatesInput[]
    NOT?: NotificationEmailScalarWhereWithAggregatesInput | NotificationEmailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationEmail"> | string
    email?: StringWithAggregatesFilter<"NotificationEmail"> | string
    formSettingsId?: StringWithAggregatesFilter<"NotificationEmail"> | string
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: StringFilter<"Question"> | string
    formId?: StringFilter<"Question"> | string
    title?: StringFilter<"Question"> | string
    description?: StringNullableFilter<"Question"> | string | null
    type?: StringFilter<"Question"> | string
    isRequired?: BoolFilter<"Question"> | boolean
    options?: JsonNullableFilter<"Question">
    order?: IntFilter<"Question"> | number
    validation?: JsonNullableFilter<"Question">
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    form?: XOR<FormRelationFilter, FormWhereInput>
    answers?: AnswerListRelationFilter
    conditionalLogic?: XOR<ConditionalLogicNullableRelationFilter, ConditionalLogicWhereInput> | null
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    formId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    isRequired?: SortOrder
    options?: SortOrderInput | SortOrder
    order?: SortOrder
    validation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    form?: FormOrderByWithRelationInput
    answers?: AnswerOrderByRelationAggregateInput
    conditionalLogic?: ConditionalLogicOrderByWithRelationInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    formId?: StringFilter<"Question"> | string
    title?: StringFilter<"Question"> | string
    description?: StringNullableFilter<"Question"> | string | null
    type?: StringFilter<"Question"> | string
    isRequired?: BoolFilter<"Question"> | boolean
    options?: JsonNullableFilter<"Question">
    order?: IntFilter<"Question"> | number
    validation?: JsonNullableFilter<"Question">
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    form?: XOR<FormRelationFilter, FormWhereInput>
    answers?: AnswerListRelationFilter
    conditionalLogic?: XOR<ConditionalLogicNullableRelationFilter, ConditionalLogicWhereInput> | null
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    formId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    isRequired?: SortOrder
    options?: SortOrderInput | SortOrder
    order?: SortOrder
    validation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Question"> | string
    formId?: StringWithAggregatesFilter<"Question"> | string
    title?: StringWithAggregatesFilter<"Question"> | string
    description?: StringNullableWithAggregatesFilter<"Question"> | string | null
    type?: StringWithAggregatesFilter<"Question"> | string
    isRequired?: BoolWithAggregatesFilter<"Question"> | boolean
    options?: JsonNullableWithAggregatesFilter<"Question">
    order?: IntWithAggregatesFilter<"Question"> | number
    validation?: JsonNullableWithAggregatesFilter<"Question">
    createdAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
  }

  export type ConditionalLogicWhereInput = {
    AND?: ConditionalLogicWhereInput | ConditionalLogicWhereInput[]
    OR?: ConditionalLogicWhereInput[]
    NOT?: ConditionalLogicWhereInput | ConditionalLogicWhereInput[]
    id?: StringFilter<"ConditionalLogic"> | string
    questionId?: StringFilter<"ConditionalLogic"> | string
    enabled?: BoolFilter<"ConditionalLogic"> | boolean
    question?: XOR<QuestionRelationFilter, QuestionWhereInput>
    rules?: ConditionalRuleListRelationFilter
  }

  export type ConditionalLogicOrderByWithRelationInput = {
    id?: SortOrder
    questionId?: SortOrder
    enabled?: SortOrder
    question?: QuestionOrderByWithRelationInput
    rules?: ConditionalRuleOrderByRelationAggregateInput
  }

  export type ConditionalLogicWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    questionId?: string
    AND?: ConditionalLogicWhereInput | ConditionalLogicWhereInput[]
    OR?: ConditionalLogicWhereInput[]
    NOT?: ConditionalLogicWhereInput | ConditionalLogicWhereInput[]
    enabled?: BoolFilter<"ConditionalLogic"> | boolean
    question?: XOR<QuestionRelationFilter, QuestionWhereInput>
    rules?: ConditionalRuleListRelationFilter
  }, "id" | "questionId">

  export type ConditionalLogicOrderByWithAggregationInput = {
    id?: SortOrder
    questionId?: SortOrder
    enabled?: SortOrder
    _count?: ConditionalLogicCountOrderByAggregateInput
    _max?: ConditionalLogicMaxOrderByAggregateInput
    _min?: ConditionalLogicMinOrderByAggregateInput
  }

  export type ConditionalLogicScalarWhereWithAggregatesInput = {
    AND?: ConditionalLogicScalarWhereWithAggregatesInput | ConditionalLogicScalarWhereWithAggregatesInput[]
    OR?: ConditionalLogicScalarWhereWithAggregatesInput[]
    NOT?: ConditionalLogicScalarWhereWithAggregatesInput | ConditionalLogicScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConditionalLogic"> | string
    questionId?: StringWithAggregatesFilter<"ConditionalLogic"> | string
    enabled?: BoolWithAggregatesFilter<"ConditionalLogic"> | boolean
  }

  export type ConditionalRuleWhereInput = {
    AND?: ConditionalRuleWhereInput | ConditionalRuleWhereInput[]
    OR?: ConditionalRuleWhereInput[]
    NOT?: ConditionalRuleWhereInput | ConditionalRuleWhereInput[]
    id?: StringFilter<"ConditionalRule"> | string
    conditionalLogicId?: StringFilter<"ConditionalRule"> | string
    targetQuestionId?: StringFilter<"ConditionalRule"> | string
    operator?: StringFilter<"ConditionalRule"> | string
    value?: StringNullableFilter<"ConditionalRule"> | string | null
    action?: StringFilter<"ConditionalRule"> | string
    conditionalLogic?: XOR<ConditionalLogicRelationFilter, ConditionalLogicWhereInput>
  }

  export type ConditionalRuleOrderByWithRelationInput = {
    id?: SortOrder
    conditionalLogicId?: SortOrder
    targetQuestionId?: SortOrder
    operator?: SortOrder
    value?: SortOrderInput | SortOrder
    action?: SortOrder
    conditionalLogic?: ConditionalLogicOrderByWithRelationInput
  }

  export type ConditionalRuleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConditionalRuleWhereInput | ConditionalRuleWhereInput[]
    OR?: ConditionalRuleWhereInput[]
    NOT?: ConditionalRuleWhereInput | ConditionalRuleWhereInput[]
    conditionalLogicId?: StringFilter<"ConditionalRule"> | string
    targetQuestionId?: StringFilter<"ConditionalRule"> | string
    operator?: StringFilter<"ConditionalRule"> | string
    value?: StringNullableFilter<"ConditionalRule"> | string | null
    action?: StringFilter<"ConditionalRule"> | string
    conditionalLogic?: XOR<ConditionalLogicRelationFilter, ConditionalLogicWhereInput>
  }, "id">

  export type ConditionalRuleOrderByWithAggregationInput = {
    id?: SortOrder
    conditionalLogicId?: SortOrder
    targetQuestionId?: SortOrder
    operator?: SortOrder
    value?: SortOrderInput | SortOrder
    action?: SortOrder
    _count?: ConditionalRuleCountOrderByAggregateInput
    _max?: ConditionalRuleMaxOrderByAggregateInput
    _min?: ConditionalRuleMinOrderByAggregateInput
  }

  export type ConditionalRuleScalarWhereWithAggregatesInput = {
    AND?: ConditionalRuleScalarWhereWithAggregatesInput | ConditionalRuleScalarWhereWithAggregatesInput[]
    OR?: ConditionalRuleScalarWhereWithAggregatesInput[]
    NOT?: ConditionalRuleScalarWhereWithAggregatesInput | ConditionalRuleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConditionalRule"> | string
    conditionalLogicId?: StringWithAggregatesFilter<"ConditionalRule"> | string
    targetQuestionId?: StringWithAggregatesFilter<"ConditionalRule"> | string
    operator?: StringWithAggregatesFilter<"ConditionalRule"> | string
    value?: StringNullableWithAggregatesFilter<"ConditionalRule"> | string | null
    action?: StringWithAggregatesFilter<"ConditionalRule"> | string
  }

  export type ResponseWhereInput = {
    AND?: ResponseWhereInput | ResponseWhereInput[]
    OR?: ResponseWhereInput[]
    NOT?: ResponseWhereInput | ResponseWhereInput[]
    id?: StringFilter<"Response"> | string
    formId?: StringFilter<"Response"> | string
    respondentId?: StringFilter<"Response"> | string
    isCompleted?: BoolFilter<"Response"> | boolean
    startedAt?: DateTimeFilter<"Response"> | Date | string
    completedAt?: DateTimeNullableFilter<"Response"> | Date | string | null
    form?: XOR<FormRelationFilter, FormWhereInput>
    answers?: AnswerListRelationFilter
  }

  export type ResponseOrderByWithRelationInput = {
    id?: SortOrder
    formId?: SortOrder
    respondentId?: SortOrder
    isCompleted?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    form?: FormOrderByWithRelationInput
    answers?: AnswerOrderByRelationAggregateInput
  }

  export type ResponseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ResponseWhereInput | ResponseWhereInput[]
    OR?: ResponseWhereInput[]
    NOT?: ResponseWhereInput | ResponseWhereInput[]
    formId?: StringFilter<"Response"> | string
    respondentId?: StringFilter<"Response"> | string
    isCompleted?: BoolFilter<"Response"> | boolean
    startedAt?: DateTimeFilter<"Response"> | Date | string
    completedAt?: DateTimeNullableFilter<"Response"> | Date | string | null
    form?: XOR<FormRelationFilter, FormWhereInput>
    answers?: AnswerListRelationFilter
  }, "id">

  export type ResponseOrderByWithAggregationInput = {
    id?: SortOrder
    formId?: SortOrder
    respondentId?: SortOrder
    isCompleted?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: ResponseCountOrderByAggregateInput
    _max?: ResponseMaxOrderByAggregateInput
    _min?: ResponseMinOrderByAggregateInput
  }

  export type ResponseScalarWhereWithAggregatesInput = {
    AND?: ResponseScalarWhereWithAggregatesInput | ResponseScalarWhereWithAggregatesInput[]
    OR?: ResponseScalarWhereWithAggregatesInput[]
    NOT?: ResponseScalarWhereWithAggregatesInput | ResponseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Response"> | string
    formId?: StringWithAggregatesFilter<"Response"> | string
    respondentId?: StringWithAggregatesFilter<"Response"> | string
    isCompleted?: BoolWithAggregatesFilter<"Response"> | boolean
    startedAt?: DateTimeWithAggregatesFilter<"Response"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"Response"> | Date | string | null
  }

  export type AnswerWhereInput = {
    AND?: AnswerWhereInput | AnswerWhereInput[]
    OR?: AnswerWhereInput[]
    NOT?: AnswerWhereInput | AnswerWhereInput[]
    id?: StringFilter<"Answer"> | string
    questionId?: StringFilter<"Answer"> | string
    responseId?: StringFilter<"Answer"> | string
    value?: StringNullableFilter<"Answer"> | string | null
    fileUrl?: StringNullableFilter<"Answer"> | string | null
    createdAt?: DateTimeFilter<"Answer"> | Date | string
    question?: XOR<QuestionRelationFilter, QuestionWhereInput>
    response?: XOR<ResponseRelationFilter, ResponseWhereInput>
  }

  export type AnswerOrderByWithRelationInput = {
    id?: SortOrder
    questionId?: SortOrder
    responseId?: SortOrder
    value?: SortOrderInput | SortOrder
    fileUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    question?: QuestionOrderByWithRelationInput
    response?: ResponseOrderByWithRelationInput
  }

  export type AnswerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AnswerWhereInput | AnswerWhereInput[]
    OR?: AnswerWhereInput[]
    NOT?: AnswerWhereInput | AnswerWhereInput[]
    questionId?: StringFilter<"Answer"> | string
    responseId?: StringFilter<"Answer"> | string
    value?: StringNullableFilter<"Answer"> | string | null
    fileUrl?: StringNullableFilter<"Answer"> | string | null
    createdAt?: DateTimeFilter<"Answer"> | Date | string
    question?: XOR<QuestionRelationFilter, QuestionWhereInput>
    response?: XOR<ResponseRelationFilter, ResponseWhereInput>
  }, "id">

  export type AnswerOrderByWithAggregationInput = {
    id?: SortOrder
    questionId?: SortOrder
    responseId?: SortOrder
    value?: SortOrderInput | SortOrder
    fileUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AnswerCountOrderByAggregateInput
    _max?: AnswerMaxOrderByAggregateInput
    _min?: AnswerMinOrderByAggregateInput
  }

  export type AnswerScalarWhereWithAggregatesInput = {
    AND?: AnswerScalarWhereWithAggregatesInput | AnswerScalarWhereWithAggregatesInput[]
    OR?: AnswerScalarWhereWithAggregatesInput[]
    NOT?: AnswerScalarWhereWithAggregatesInput | AnswerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Answer"> | string
    questionId?: StringWithAggregatesFilter<"Answer"> | string
    responseId?: StringWithAggregatesFilter<"Answer"> | string
    value?: StringNullableWithAggregatesFilter<"Answer"> | string | null
    fileUrl?: StringNullableWithAggregatesFilter<"Answer"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Answer"> | Date | string
  }

  export type FormVisitWhereInput = {
    AND?: FormVisitWhereInput | FormVisitWhereInput[]
    OR?: FormVisitWhereInput[]
    NOT?: FormVisitWhereInput | FormVisitWhereInput[]
    id?: StringFilter<"FormVisit"> | string
    formId?: StringFilter<"FormVisit"> | string
    visitedAt?: DateTimeFilter<"FormVisit"> | Date | string
    ipAddress?: StringNullableFilter<"FormVisit"> | string | null
    userAgent?: StringNullableFilter<"FormVisit"> | string | null
    referrer?: StringNullableFilter<"FormVisit"> | string | null
    form?: XOR<FormRelationFilter, FormWhereInput>
  }

  export type FormVisitOrderByWithRelationInput = {
    id?: SortOrder
    formId?: SortOrder
    visitedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    referrer?: SortOrderInput | SortOrder
    form?: FormOrderByWithRelationInput
  }

  export type FormVisitWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FormVisitWhereInput | FormVisitWhereInput[]
    OR?: FormVisitWhereInput[]
    NOT?: FormVisitWhereInput | FormVisitWhereInput[]
    formId?: StringFilter<"FormVisit"> | string
    visitedAt?: DateTimeFilter<"FormVisit"> | Date | string
    ipAddress?: StringNullableFilter<"FormVisit"> | string | null
    userAgent?: StringNullableFilter<"FormVisit"> | string | null
    referrer?: StringNullableFilter<"FormVisit"> | string | null
    form?: XOR<FormRelationFilter, FormWhereInput>
  }, "id">

  export type FormVisitOrderByWithAggregationInput = {
    id?: SortOrder
    formId?: SortOrder
    visitedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    referrer?: SortOrderInput | SortOrder
    _count?: FormVisitCountOrderByAggregateInput
    _max?: FormVisitMaxOrderByAggregateInput
    _min?: FormVisitMinOrderByAggregateInput
  }

  export type FormVisitScalarWhereWithAggregatesInput = {
    AND?: FormVisitScalarWhereWithAggregatesInput | FormVisitScalarWhereWithAggregatesInput[]
    OR?: FormVisitScalarWhereWithAggregatesInput[]
    NOT?: FormVisitScalarWhereWithAggregatesInput | FormVisitScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FormVisit"> | string
    formId?: StringWithAggregatesFilter<"FormVisit"> | string
    visitedAt?: DateTimeWithAggregatesFilter<"FormVisit"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"FormVisit"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"FormVisit"> | string | null
    referrer?: StringNullableWithAggregatesFilter<"FormVisit"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    forms?: FormCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    forms?: FormUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    forms?: FormUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    forms?: FormUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FormCreateInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFormsInput
    questions?: QuestionCreateNestedManyWithoutFormInput
    responses?: ResponseCreateNestedManyWithoutFormInput
    visits?: FormVisitCreateNestedManyWithoutFormInput
    theme?: ThemeCreateNestedOneWithoutFormInput
    settings?: FormSettingsCreateNestedOneWithoutFormInput
  }

  export type FormUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    questions?: QuestionUncheckedCreateNestedManyWithoutFormInput
    responses?: ResponseUncheckedCreateNestedManyWithoutFormInput
    visits?: FormVisitUncheckedCreateNestedManyWithoutFormInput
    theme?: ThemeUncheckedCreateNestedOneWithoutFormInput
    settings?: FormSettingsUncheckedCreateNestedOneWithoutFormInput
  }

  export type FormUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFormsNestedInput
    questions?: QuestionUpdateManyWithoutFormNestedInput
    responses?: ResponseUpdateManyWithoutFormNestedInput
    visits?: FormVisitUpdateManyWithoutFormNestedInput
    theme?: ThemeUpdateOneWithoutFormNestedInput
    settings?: FormSettingsUpdateOneWithoutFormNestedInput
  }

  export type FormUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    questions?: QuestionUncheckedUpdateManyWithoutFormNestedInput
    responses?: ResponseUncheckedUpdateManyWithoutFormNestedInput
    visits?: FormVisitUncheckedUpdateManyWithoutFormNestedInput
    theme?: ThemeUncheckedUpdateOneWithoutFormNestedInput
    settings?: FormSettingsUncheckedUpdateOneWithoutFormNestedInput
  }

  export type FormCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type FormUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FormUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ThemeCreateInput = {
    id?: string
    primaryColor?: string
    backgroundColor?: string
    fontFamily?: string
    form: FormCreateNestedOneWithoutThemeInput
  }

  export type ThemeUncheckedCreateInput = {
    id?: string
    formId: string
    primaryColor?: string
    backgroundColor?: string
    fontFamily?: string
  }

  export type ThemeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    backgroundColor?: StringFieldUpdateOperationsInput | string
    fontFamily?: StringFieldUpdateOperationsInput | string
    form?: FormUpdateOneRequiredWithoutThemeNestedInput
  }

  export type ThemeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    backgroundColor?: StringFieldUpdateOperationsInput | string
    fontFamily?: StringFieldUpdateOperationsInput | string
  }

  export type ThemeCreateManyInput = {
    id?: string
    formId: string
    primaryColor?: string
    backgroundColor?: string
    fontFamily?: string
  }

  export type ThemeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    backgroundColor?: StringFieldUpdateOperationsInput | string
    fontFamily?: StringFieldUpdateOperationsInput | string
  }

  export type ThemeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    backgroundColor?: StringFieldUpdateOperationsInput | string
    fontFamily?: StringFieldUpdateOperationsInput | string
  }

  export type FormSettingsCreateInput = {
    id?: string
    requireSignIn?: boolean
    limitOneResponsePerUser?: boolean
    showProgressBar?: boolean
    shuffleQuestions?: boolean
    confirmationMessage?: string
    redirectUrl?: string | null
    notifyOnSubmission?: boolean
    form: FormCreateNestedOneWithoutSettingsInput
    notificationEmails?: NotificationEmailCreateNestedManyWithoutFormSettingsInput
  }

  export type FormSettingsUncheckedCreateInput = {
    id?: string
    formId: string
    requireSignIn?: boolean
    limitOneResponsePerUser?: boolean
    showProgressBar?: boolean
    shuffleQuestions?: boolean
    confirmationMessage?: string
    redirectUrl?: string | null
    notifyOnSubmission?: boolean
    notificationEmails?: NotificationEmailUncheckedCreateNestedManyWithoutFormSettingsInput
  }

  export type FormSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requireSignIn?: BoolFieldUpdateOperationsInput | boolean
    limitOneResponsePerUser?: BoolFieldUpdateOperationsInput | boolean
    showProgressBar?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    confirmationMessage?: StringFieldUpdateOperationsInput | string
    redirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnSubmission?: BoolFieldUpdateOperationsInput | boolean
    form?: FormUpdateOneRequiredWithoutSettingsNestedInput
    notificationEmails?: NotificationEmailUpdateManyWithoutFormSettingsNestedInput
  }

  export type FormSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    requireSignIn?: BoolFieldUpdateOperationsInput | boolean
    limitOneResponsePerUser?: BoolFieldUpdateOperationsInput | boolean
    showProgressBar?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    confirmationMessage?: StringFieldUpdateOperationsInput | string
    redirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnSubmission?: BoolFieldUpdateOperationsInput | boolean
    notificationEmails?: NotificationEmailUncheckedUpdateManyWithoutFormSettingsNestedInput
  }

  export type FormSettingsCreateManyInput = {
    id?: string
    formId: string
    requireSignIn?: boolean
    limitOneResponsePerUser?: boolean
    showProgressBar?: boolean
    shuffleQuestions?: boolean
    confirmationMessage?: string
    redirectUrl?: string | null
    notifyOnSubmission?: boolean
  }

  export type FormSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    requireSignIn?: BoolFieldUpdateOperationsInput | boolean
    limitOneResponsePerUser?: BoolFieldUpdateOperationsInput | boolean
    showProgressBar?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    confirmationMessage?: StringFieldUpdateOperationsInput | string
    redirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnSubmission?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FormSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    requireSignIn?: BoolFieldUpdateOperationsInput | boolean
    limitOneResponsePerUser?: BoolFieldUpdateOperationsInput | boolean
    showProgressBar?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    confirmationMessage?: StringFieldUpdateOperationsInput | string
    redirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnSubmission?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationEmailCreateInput = {
    id?: string
    email: string
    formSettings: FormSettingsCreateNestedOneWithoutNotificationEmailsInput
  }

  export type NotificationEmailUncheckedCreateInput = {
    id?: string
    email: string
    formSettingsId: string
  }

  export type NotificationEmailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    formSettings?: FormSettingsUpdateOneRequiredWithoutNotificationEmailsNestedInput
  }

  export type NotificationEmailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    formSettingsId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationEmailCreateManyInput = {
    id?: string
    email: string
    formSettingsId: string
  }

  export type NotificationEmailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationEmailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    formSettingsId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionCreateInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    isRequired?: boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order: number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    form: FormCreateNestedOneWithoutQuestionsInput
    answers?: AnswerCreateNestedManyWithoutQuestionInput
    conditionalLogic?: ConditionalLogicCreateNestedOneWithoutQuestionInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: string
    formId: string
    title: string
    description?: string | null
    type: string
    isRequired?: boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order: number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    answers?: AnswerUncheckedCreateNestedManyWithoutQuestionInput
    conditionalLogic?: ConditionalLogicUncheckedCreateNestedOneWithoutQuestionInput
  }

  export type QuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    form?: FormUpdateOneRequiredWithoutQuestionsNestedInput
    answers?: AnswerUpdateManyWithoutQuestionNestedInput
    conditionalLogic?: ConditionalLogicUpdateOneWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: AnswerUncheckedUpdateManyWithoutQuestionNestedInput
    conditionalLogic?: ConditionalLogicUncheckedUpdateOneWithoutQuestionNestedInput
  }

  export type QuestionCreateManyInput = {
    id?: string
    formId: string
    title: string
    description?: string | null
    type: string
    isRequired?: boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order: number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConditionalLogicCreateInput = {
    id?: string
    enabled?: boolean
    question: QuestionCreateNestedOneWithoutConditionalLogicInput
    rules?: ConditionalRuleCreateNestedManyWithoutConditionalLogicInput
  }

  export type ConditionalLogicUncheckedCreateInput = {
    id?: string
    questionId: string
    enabled?: boolean
    rules?: ConditionalRuleUncheckedCreateNestedManyWithoutConditionalLogicInput
  }

  export type ConditionalLogicUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    question?: QuestionUpdateOneRequiredWithoutConditionalLogicNestedInput
    rules?: ConditionalRuleUpdateManyWithoutConditionalLogicNestedInput
  }

  export type ConditionalLogicUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    rules?: ConditionalRuleUncheckedUpdateManyWithoutConditionalLogicNestedInput
  }

  export type ConditionalLogicCreateManyInput = {
    id?: string
    questionId: string
    enabled?: boolean
  }

  export type ConditionalLogicUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConditionalLogicUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConditionalRuleCreateInput = {
    id?: string
    targetQuestionId: string
    operator: string
    value?: string | null
    action?: string
    conditionalLogic: ConditionalLogicCreateNestedOneWithoutRulesInput
  }

  export type ConditionalRuleUncheckedCreateInput = {
    id?: string
    conditionalLogicId: string
    targetQuestionId: string
    operator: string
    value?: string | null
    action?: string
  }

  export type ConditionalRuleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetQuestionId?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    conditionalLogic?: ConditionalLogicUpdateOneRequiredWithoutRulesNestedInput
  }

  export type ConditionalRuleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    conditionalLogicId?: StringFieldUpdateOperationsInput | string
    targetQuestionId?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
  }

  export type ConditionalRuleCreateManyInput = {
    id?: string
    conditionalLogicId: string
    targetQuestionId: string
    operator: string
    value?: string | null
    action?: string
  }

  export type ConditionalRuleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetQuestionId?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
  }

  export type ConditionalRuleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    conditionalLogicId?: StringFieldUpdateOperationsInput | string
    targetQuestionId?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
  }

  export type ResponseCreateInput = {
    id?: string
    respondentId?: string
    isCompleted?: boolean
    startedAt?: Date | string
    completedAt?: Date | string | null
    form: FormCreateNestedOneWithoutResponsesInput
    answers?: AnswerCreateNestedManyWithoutResponseInput
  }

  export type ResponseUncheckedCreateInput = {
    id?: string
    formId: string
    respondentId?: string
    isCompleted?: boolean
    startedAt?: Date | string
    completedAt?: Date | string | null
    answers?: AnswerUncheckedCreateNestedManyWithoutResponseInput
  }

  export type ResponseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    respondentId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    form?: FormUpdateOneRequiredWithoutResponsesNestedInput
    answers?: AnswerUpdateManyWithoutResponseNestedInput
  }

  export type ResponseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    respondentId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    answers?: AnswerUncheckedUpdateManyWithoutResponseNestedInput
  }

  export type ResponseCreateManyInput = {
    id?: string
    formId: string
    respondentId?: string
    isCompleted?: boolean
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ResponseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    respondentId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResponseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    respondentId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AnswerCreateInput = {
    id?: string
    value?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
    question: QuestionCreateNestedOneWithoutAnswersInput
    response: ResponseCreateNestedOneWithoutAnswersInput
  }

  export type AnswerUncheckedCreateInput = {
    id?: string
    questionId: string
    responseId: string
    value?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type AnswerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutAnswersNestedInput
    response?: ResponseUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type AnswerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    responseId?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerCreateManyInput = {
    id?: string
    questionId: string
    responseId: string
    value?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type AnswerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    responseId?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FormVisitCreateInput = {
    id?: string
    visitedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    referrer?: string | null
    form: FormCreateNestedOneWithoutVisitsInput
  }

  export type FormVisitUncheckedCreateInput = {
    id?: string
    formId: string
    visitedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    referrer?: string | null
  }

  export type FormVisitUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    visitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
    form?: FormUpdateOneRequiredWithoutVisitsNestedInput
  }

  export type FormVisitUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    visitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormVisitCreateManyInput = {
    id?: string
    formId: string
    visitedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    referrer?: string | null
  }

  export type FormVisitUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    visitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormVisitUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    visitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FormListRelationFilter = {
    every?: FormWhereInput
    some?: FormWhereInput
    none?: FormWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FormOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type ResponseListRelationFilter = {
    every?: ResponseWhereInput
    some?: ResponseWhereInput
    none?: ResponseWhereInput
  }

  export type FormVisitListRelationFilter = {
    every?: FormVisitWhereInput
    some?: FormVisitWhereInput
    none?: FormVisitWhereInput
  }

  export type ThemeNullableRelationFilter = {
    is?: ThemeWhereInput | null
    isNot?: ThemeWhereInput | null
  }

  export type FormSettingsNullableRelationFilter = {
    is?: FormSettingsWhereInput | null
    isNot?: FormSettingsWhereInput | null
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResponseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FormVisitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FormCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isPublished?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type FormMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isPublished?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type FormMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isPublished?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FormRelationFilter = {
    is?: FormWhereInput
    isNot?: FormWhereInput
  }

  export type ThemeCountOrderByAggregateInput = {
    id?: SortOrder
    formId?: SortOrder
    primaryColor?: SortOrder
    backgroundColor?: SortOrder
    fontFamily?: SortOrder
  }

  export type ThemeMaxOrderByAggregateInput = {
    id?: SortOrder
    formId?: SortOrder
    primaryColor?: SortOrder
    backgroundColor?: SortOrder
    fontFamily?: SortOrder
  }

  export type ThemeMinOrderByAggregateInput = {
    id?: SortOrder
    formId?: SortOrder
    primaryColor?: SortOrder
    backgroundColor?: SortOrder
    fontFamily?: SortOrder
  }

  export type NotificationEmailListRelationFilter = {
    every?: NotificationEmailWhereInput
    some?: NotificationEmailWhereInput
    none?: NotificationEmailWhereInput
  }

  export type NotificationEmailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FormSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    formId?: SortOrder
    requireSignIn?: SortOrder
    limitOneResponsePerUser?: SortOrder
    showProgressBar?: SortOrder
    shuffleQuestions?: SortOrder
    confirmationMessage?: SortOrder
    redirectUrl?: SortOrder
    notifyOnSubmission?: SortOrder
  }

  export type FormSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    formId?: SortOrder
    requireSignIn?: SortOrder
    limitOneResponsePerUser?: SortOrder
    showProgressBar?: SortOrder
    shuffleQuestions?: SortOrder
    confirmationMessage?: SortOrder
    redirectUrl?: SortOrder
    notifyOnSubmission?: SortOrder
  }

  export type FormSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    formId?: SortOrder
    requireSignIn?: SortOrder
    limitOneResponsePerUser?: SortOrder
    showProgressBar?: SortOrder
    shuffleQuestions?: SortOrder
    confirmationMessage?: SortOrder
    redirectUrl?: SortOrder
    notifyOnSubmission?: SortOrder
  }

  export type FormSettingsRelationFilter = {
    is?: FormSettingsWhereInput
    isNot?: FormSettingsWhereInput
  }

  export type NotificationEmailCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    formSettingsId?: SortOrder
  }

  export type NotificationEmailMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    formSettingsId?: SortOrder
  }

  export type NotificationEmailMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    formSettingsId?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AnswerListRelationFilter = {
    every?: AnswerWhereInput
    some?: AnswerWhereInput
    none?: AnswerWhereInput
  }

  export type ConditionalLogicNullableRelationFilter = {
    is?: ConditionalLogicWhereInput | null
    isNot?: ConditionalLogicWhereInput | null
  }

  export type AnswerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    formId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    isRequired?: SortOrder
    options?: SortOrder
    order?: SortOrder
    validation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    formId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    isRequired?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    formId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    isRequired?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    order?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type QuestionRelationFilter = {
    is?: QuestionWhereInput
    isNot?: QuestionWhereInput
  }

  export type ConditionalRuleListRelationFilter = {
    every?: ConditionalRuleWhereInput
    some?: ConditionalRuleWhereInput
    none?: ConditionalRuleWhereInput
  }

  export type ConditionalRuleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConditionalLogicCountOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    enabled?: SortOrder
  }

  export type ConditionalLogicMaxOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    enabled?: SortOrder
  }

  export type ConditionalLogicMinOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    enabled?: SortOrder
  }

  export type ConditionalLogicRelationFilter = {
    is?: ConditionalLogicWhereInput
    isNot?: ConditionalLogicWhereInput
  }

  export type ConditionalRuleCountOrderByAggregateInput = {
    id?: SortOrder
    conditionalLogicId?: SortOrder
    targetQuestionId?: SortOrder
    operator?: SortOrder
    value?: SortOrder
    action?: SortOrder
  }

  export type ConditionalRuleMaxOrderByAggregateInput = {
    id?: SortOrder
    conditionalLogicId?: SortOrder
    targetQuestionId?: SortOrder
    operator?: SortOrder
    value?: SortOrder
    action?: SortOrder
  }

  export type ConditionalRuleMinOrderByAggregateInput = {
    id?: SortOrder
    conditionalLogicId?: SortOrder
    targetQuestionId?: SortOrder
    operator?: SortOrder
    value?: SortOrder
    action?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ResponseCountOrderByAggregateInput = {
    id?: SortOrder
    formId?: SortOrder
    respondentId?: SortOrder
    isCompleted?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type ResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    formId?: SortOrder
    respondentId?: SortOrder
    isCompleted?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type ResponseMinOrderByAggregateInput = {
    id?: SortOrder
    formId?: SortOrder
    respondentId?: SortOrder
    isCompleted?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ResponseRelationFilter = {
    is?: ResponseWhereInput
    isNot?: ResponseWhereInput
  }

  export type AnswerCountOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    responseId?: SortOrder
    value?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type AnswerMaxOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    responseId?: SortOrder
    value?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type AnswerMinOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    responseId?: SortOrder
    value?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type FormVisitCountOrderByAggregateInput = {
    id?: SortOrder
    formId?: SortOrder
    visitedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    referrer?: SortOrder
  }

  export type FormVisitMaxOrderByAggregateInput = {
    id?: SortOrder
    formId?: SortOrder
    visitedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    referrer?: SortOrder
  }

  export type FormVisitMinOrderByAggregateInput = {
    id?: SortOrder
    formId?: SortOrder
    visitedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    referrer?: SortOrder
  }

  export type FormCreateNestedManyWithoutUserInput = {
    create?: XOR<FormCreateWithoutUserInput, FormUncheckedCreateWithoutUserInput> | FormCreateWithoutUserInput[] | FormUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FormCreateOrConnectWithoutUserInput | FormCreateOrConnectWithoutUserInput[]
    createMany?: FormCreateManyUserInputEnvelope
    connect?: FormWhereUniqueInput | FormWhereUniqueInput[]
  }

  export type FormUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FormCreateWithoutUserInput, FormUncheckedCreateWithoutUserInput> | FormCreateWithoutUserInput[] | FormUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FormCreateOrConnectWithoutUserInput | FormCreateOrConnectWithoutUserInput[]
    createMany?: FormCreateManyUserInputEnvelope
    connect?: FormWhereUniqueInput | FormWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FormUpdateManyWithoutUserNestedInput = {
    create?: XOR<FormCreateWithoutUserInput, FormUncheckedCreateWithoutUserInput> | FormCreateWithoutUserInput[] | FormUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FormCreateOrConnectWithoutUserInput | FormCreateOrConnectWithoutUserInput[]
    upsert?: FormUpsertWithWhereUniqueWithoutUserInput | FormUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FormCreateManyUserInputEnvelope
    set?: FormWhereUniqueInput | FormWhereUniqueInput[]
    disconnect?: FormWhereUniqueInput | FormWhereUniqueInput[]
    delete?: FormWhereUniqueInput | FormWhereUniqueInput[]
    connect?: FormWhereUniqueInput | FormWhereUniqueInput[]
    update?: FormUpdateWithWhereUniqueWithoutUserInput | FormUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FormUpdateManyWithWhereWithoutUserInput | FormUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FormScalarWhereInput | FormScalarWhereInput[]
  }

  export type FormUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FormCreateWithoutUserInput, FormUncheckedCreateWithoutUserInput> | FormCreateWithoutUserInput[] | FormUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FormCreateOrConnectWithoutUserInput | FormCreateOrConnectWithoutUserInput[]
    upsert?: FormUpsertWithWhereUniqueWithoutUserInput | FormUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FormCreateManyUserInputEnvelope
    set?: FormWhereUniqueInput | FormWhereUniqueInput[]
    disconnect?: FormWhereUniqueInput | FormWhereUniqueInput[]
    delete?: FormWhereUniqueInput | FormWhereUniqueInput[]
    connect?: FormWhereUniqueInput | FormWhereUniqueInput[]
    update?: FormUpdateWithWhereUniqueWithoutUserInput | FormUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FormUpdateManyWithWhereWithoutUserInput | FormUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FormScalarWhereInput | FormScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFormsInput = {
    create?: XOR<UserCreateWithoutFormsInput, UserUncheckedCreateWithoutFormsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFormsInput
    connect?: UserWhereUniqueInput
  }

  export type QuestionCreateNestedManyWithoutFormInput = {
    create?: XOR<QuestionCreateWithoutFormInput, QuestionUncheckedCreateWithoutFormInput> | QuestionCreateWithoutFormInput[] | QuestionUncheckedCreateWithoutFormInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutFormInput | QuestionCreateOrConnectWithoutFormInput[]
    createMany?: QuestionCreateManyFormInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type ResponseCreateNestedManyWithoutFormInput = {
    create?: XOR<ResponseCreateWithoutFormInput, ResponseUncheckedCreateWithoutFormInput> | ResponseCreateWithoutFormInput[] | ResponseUncheckedCreateWithoutFormInput[]
    connectOrCreate?: ResponseCreateOrConnectWithoutFormInput | ResponseCreateOrConnectWithoutFormInput[]
    createMany?: ResponseCreateManyFormInputEnvelope
    connect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
  }

  export type FormVisitCreateNestedManyWithoutFormInput = {
    create?: XOR<FormVisitCreateWithoutFormInput, FormVisitUncheckedCreateWithoutFormInput> | FormVisitCreateWithoutFormInput[] | FormVisitUncheckedCreateWithoutFormInput[]
    connectOrCreate?: FormVisitCreateOrConnectWithoutFormInput | FormVisitCreateOrConnectWithoutFormInput[]
    createMany?: FormVisitCreateManyFormInputEnvelope
    connect?: FormVisitWhereUniqueInput | FormVisitWhereUniqueInput[]
  }

  export type ThemeCreateNestedOneWithoutFormInput = {
    create?: XOR<ThemeCreateWithoutFormInput, ThemeUncheckedCreateWithoutFormInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutFormInput
    connect?: ThemeWhereUniqueInput
  }

  export type FormSettingsCreateNestedOneWithoutFormInput = {
    create?: XOR<FormSettingsCreateWithoutFormInput, FormSettingsUncheckedCreateWithoutFormInput>
    connectOrCreate?: FormSettingsCreateOrConnectWithoutFormInput
    connect?: FormSettingsWhereUniqueInput
  }

  export type QuestionUncheckedCreateNestedManyWithoutFormInput = {
    create?: XOR<QuestionCreateWithoutFormInput, QuestionUncheckedCreateWithoutFormInput> | QuestionCreateWithoutFormInput[] | QuestionUncheckedCreateWithoutFormInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutFormInput | QuestionCreateOrConnectWithoutFormInput[]
    createMany?: QuestionCreateManyFormInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type ResponseUncheckedCreateNestedManyWithoutFormInput = {
    create?: XOR<ResponseCreateWithoutFormInput, ResponseUncheckedCreateWithoutFormInput> | ResponseCreateWithoutFormInput[] | ResponseUncheckedCreateWithoutFormInput[]
    connectOrCreate?: ResponseCreateOrConnectWithoutFormInput | ResponseCreateOrConnectWithoutFormInput[]
    createMany?: ResponseCreateManyFormInputEnvelope
    connect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
  }

  export type FormVisitUncheckedCreateNestedManyWithoutFormInput = {
    create?: XOR<FormVisitCreateWithoutFormInput, FormVisitUncheckedCreateWithoutFormInput> | FormVisitCreateWithoutFormInput[] | FormVisitUncheckedCreateWithoutFormInput[]
    connectOrCreate?: FormVisitCreateOrConnectWithoutFormInput | FormVisitCreateOrConnectWithoutFormInput[]
    createMany?: FormVisitCreateManyFormInputEnvelope
    connect?: FormVisitWhereUniqueInput | FormVisitWhereUniqueInput[]
  }

  export type ThemeUncheckedCreateNestedOneWithoutFormInput = {
    create?: XOR<ThemeCreateWithoutFormInput, ThemeUncheckedCreateWithoutFormInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutFormInput
    connect?: ThemeWhereUniqueInput
  }

  export type FormSettingsUncheckedCreateNestedOneWithoutFormInput = {
    create?: XOR<FormSettingsCreateWithoutFormInput, FormSettingsUncheckedCreateWithoutFormInput>
    connectOrCreate?: FormSettingsCreateOrConnectWithoutFormInput
    connect?: FormSettingsWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutFormsNestedInput = {
    create?: XOR<UserCreateWithoutFormsInput, UserUncheckedCreateWithoutFormsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFormsInput
    upsert?: UserUpsertWithoutFormsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFormsInput, UserUpdateWithoutFormsInput>, UserUncheckedUpdateWithoutFormsInput>
  }

  export type QuestionUpdateManyWithoutFormNestedInput = {
    create?: XOR<QuestionCreateWithoutFormInput, QuestionUncheckedCreateWithoutFormInput> | QuestionCreateWithoutFormInput[] | QuestionUncheckedCreateWithoutFormInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutFormInput | QuestionCreateOrConnectWithoutFormInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutFormInput | QuestionUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: QuestionCreateManyFormInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutFormInput | QuestionUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutFormInput | QuestionUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type ResponseUpdateManyWithoutFormNestedInput = {
    create?: XOR<ResponseCreateWithoutFormInput, ResponseUncheckedCreateWithoutFormInput> | ResponseCreateWithoutFormInput[] | ResponseUncheckedCreateWithoutFormInput[]
    connectOrCreate?: ResponseCreateOrConnectWithoutFormInput | ResponseCreateOrConnectWithoutFormInput[]
    upsert?: ResponseUpsertWithWhereUniqueWithoutFormInput | ResponseUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: ResponseCreateManyFormInputEnvelope
    set?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    disconnect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    delete?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    connect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    update?: ResponseUpdateWithWhereUniqueWithoutFormInput | ResponseUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: ResponseUpdateManyWithWhereWithoutFormInput | ResponseUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: ResponseScalarWhereInput | ResponseScalarWhereInput[]
  }

  export type FormVisitUpdateManyWithoutFormNestedInput = {
    create?: XOR<FormVisitCreateWithoutFormInput, FormVisitUncheckedCreateWithoutFormInput> | FormVisitCreateWithoutFormInput[] | FormVisitUncheckedCreateWithoutFormInput[]
    connectOrCreate?: FormVisitCreateOrConnectWithoutFormInput | FormVisitCreateOrConnectWithoutFormInput[]
    upsert?: FormVisitUpsertWithWhereUniqueWithoutFormInput | FormVisitUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: FormVisitCreateManyFormInputEnvelope
    set?: FormVisitWhereUniqueInput | FormVisitWhereUniqueInput[]
    disconnect?: FormVisitWhereUniqueInput | FormVisitWhereUniqueInput[]
    delete?: FormVisitWhereUniqueInput | FormVisitWhereUniqueInput[]
    connect?: FormVisitWhereUniqueInput | FormVisitWhereUniqueInput[]
    update?: FormVisitUpdateWithWhereUniqueWithoutFormInput | FormVisitUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: FormVisitUpdateManyWithWhereWithoutFormInput | FormVisitUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: FormVisitScalarWhereInput | FormVisitScalarWhereInput[]
  }

  export type ThemeUpdateOneWithoutFormNestedInput = {
    create?: XOR<ThemeCreateWithoutFormInput, ThemeUncheckedCreateWithoutFormInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutFormInput
    upsert?: ThemeUpsertWithoutFormInput
    disconnect?: ThemeWhereInput | boolean
    delete?: ThemeWhereInput | boolean
    connect?: ThemeWhereUniqueInput
    update?: XOR<XOR<ThemeUpdateToOneWithWhereWithoutFormInput, ThemeUpdateWithoutFormInput>, ThemeUncheckedUpdateWithoutFormInput>
  }

  export type FormSettingsUpdateOneWithoutFormNestedInput = {
    create?: XOR<FormSettingsCreateWithoutFormInput, FormSettingsUncheckedCreateWithoutFormInput>
    connectOrCreate?: FormSettingsCreateOrConnectWithoutFormInput
    upsert?: FormSettingsUpsertWithoutFormInput
    disconnect?: FormSettingsWhereInput | boolean
    delete?: FormSettingsWhereInput | boolean
    connect?: FormSettingsWhereUniqueInput
    update?: XOR<XOR<FormSettingsUpdateToOneWithWhereWithoutFormInput, FormSettingsUpdateWithoutFormInput>, FormSettingsUncheckedUpdateWithoutFormInput>
  }

  export type QuestionUncheckedUpdateManyWithoutFormNestedInput = {
    create?: XOR<QuestionCreateWithoutFormInput, QuestionUncheckedCreateWithoutFormInput> | QuestionCreateWithoutFormInput[] | QuestionUncheckedCreateWithoutFormInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutFormInput | QuestionCreateOrConnectWithoutFormInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutFormInput | QuestionUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: QuestionCreateManyFormInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutFormInput | QuestionUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutFormInput | QuestionUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type ResponseUncheckedUpdateManyWithoutFormNestedInput = {
    create?: XOR<ResponseCreateWithoutFormInput, ResponseUncheckedCreateWithoutFormInput> | ResponseCreateWithoutFormInput[] | ResponseUncheckedCreateWithoutFormInput[]
    connectOrCreate?: ResponseCreateOrConnectWithoutFormInput | ResponseCreateOrConnectWithoutFormInput[]
    upsert?: ResponseUpsertWithWhereUniqueWithoutFormInput | ResponseUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: ResponseCreateManyFormInputEnvelope
    set?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    disconnect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    delete?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    connect?: ResponseWhereUniqueInput | ResponseWhereUniqueInput[]
    update?: ResponseUpdateWithWhereUniqueWithoutFormInput | ResponseUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: ResponseUpdateManyWithWhereWithoutFormInput | ResponseUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: ResponseScalarWhereInput | ResponseScalarWhereInput[]
  }

  export type FormVisitUncheckedUpdateManyWithoutFormNestedInput = {
    create?: XOR<FormVisitCreateWithoutFormInput, FormVisitUncheckedCreateWithoutFormInput> | FormVisitCreateWithoutFormInput[] | FormVisitUncheckedCreateWithoutFormInput[]
    connectOrCreate?: FormVisitCreateOrConnectWithoutFormInput | FormVisitCreateOrConnectWithoutFormInput[]
    upsert?: FormVisitUpsertWithWhereUniqueWithoutFormInput | FormVisitUpsertWithWhereUniqueWithoutFormInput[]
    createMany?: FormVisitCreateManyFormInputEnvelope
    set?: FormVisitWhereUniqueInput | FormVisitWhereUniqueInput[]
    disconnect?: FormVisitWhereUniqueInput | FormVisitWhereUniqueInput[]
    delete?: FormVisitWhereUniqueInput | FormVisitWhereUniqueInput[]
    connect?: FormVisitWhereUniqueInput | FormVisitWhereUniqueInput[]
    update?: FormVisitUpdateWithWhereUniqueWithoutFormInput | FormVisitUpdateWithWhereUniqueWithoutFormInput[]
    updateMany?: FormVisitUpdateManyWithWhereWithoutFormInput | FormVisitUpdateManyWithWhereWithoutFormInput[]
    deleteMany?: FormVisitScalarWhereInput | FormVisitScalarWhereInput[]
  }

  export type ThemeUncheckedUpdateOneWithoutFormNestedInput = {
    create?: XOR<ThemeCreateWithoutFormInput, ThemeUncheckedCreateWithoutFormInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutFormInput
    upsert?: ThemeUpsertWithoutFormInput
    disconnect?: ThemeWhereInput | boolean
    delete?: ThemeWhereInput | boolean
    connect?: ThemeWhereUniqueInput
    update?: XOR<XOR<ThemeUpdateToOneWithWhereWithoutFormInput, ThemeUpdateWithoutFormInput>, ThemeUncheckedUpdateWithoutFormInput>
  }

  export type FormSettingsUncheckedUpdateOneWithoutFormNestedInput = {
    create?: XOR<FormSettingsCreateWithoutFormInput, FormSettingsUncheckedCreateWithoutFormInput>
    connectOrCreate?: FormSettingsCreateOrConnectWithoutFormInput
    upsert?: FormSettingsUpsertWithoutFormInput
    disconnect?: FormSettingsWhereInput | boolean
    delete?: FormSettingsWhereInput | boolean
    connect?: FormSettingsWhereUniqueInput
    update?: XOR<XOR<FormSettingsUpdateToOneWithWhereWithoutFormInput, FormSettingsUpdateWithoutFormInput>, FormSettingsUncheckedUpdateWithoutFormInput>
  }

  export type FormCreateNestedOneWithoutThemeInput = {
    create?: XOR<FormCreateWithoutThemeInput, FormUncheckedCreateWithoutThemeInput>
    connectOrCreate?: FormCreateOrConnectWithoutThemeInput
    connect?: FormWhereUniqueInput
  }

  export type FormUpdateOneRequiredWithoutThemeNestedInput = {
    create?: XOR<FormCreateWithoutThemeInput, FormUncheckedCreateWithoutThemeInput>
    connectOrCreate?: FormCreateOrConnectWithoutThemeInput
    upsert?: FormUpsertWithoutThemeInput
    connect?: FormWhereUniqueInput
    update?: XOR<XOR<FormUpdateToOneWithWhereWithoutThemeInput, FormUpdateWithoutThemeInput>, FormUncheckedUpdateWithoutThemeInput>
  }

  export type FormCreateNestedOneWithoutSettingsInput = {
    create?: XOR<FormCreateWithoutSettingsInput, FormUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: FormCreateOrConnectWithoutSettingsInput
    connect?: FormWhereUniqueInput
  }

  export type NotificationEmailCreateNestedManyWithoutFormSettingsInput = {
    create?: XOR<NotificationEmailCreateWithoutFormSettingsInput, NotificationEmailUncheckedCreateWithoutFormSettingsInput> | NotificationEmailCreateWithoutFormSettingsInput[] | NotificationEmailUncheckedCreateWithoutFormSettingsInput[]
    connectOrCreate?: NotificationEmailCreateOrConnectWithoutFormSettingsInput | NotificationEmailCreateOrConnectWithoutFormSettingsInput[]
    createMany?: NotificationEmailCreateManyFormSettingsInputEnvelope
    connect?: NotificationEmailWhereUniqueInput | NotificationEmailWhereUniqueInput[]
  }

  export type NotificationEmailUncheckedCreateNestedManyWithoutFormSettingsInput = {
    create?: XOR<NotificationEmailCreateWithoutFormSettingsInput, NotificationEmailUncheckedCreateWithoutFormSettingsInput> | NotificationEmailCreateWithoutFormSettingsInput[] | NotificationEmailUncheckedCreateWithoutFormSettingsInput[]
    connectOrCreate?: NotificationEmailCreateOrConnectWithoutFormSettingsInput | NotificationEmailCreateOrConnectWithoutFormSettingsInput[]
    createMany?: NotificationEmailCreateManyFormSettingsInputEnvelope
    connect?: NotificationEmailWhereUniqueInput | NotificationEmailWhereUniqueInput[]
  }

  export type FormUpdateOneRequiredWithoutSettingsNestedInput = {
    create?: XOR<FormCreateWithoutSettingsInput, FormUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: FormCreateOrConnectWithoutSettingsInput
    upsert?: FormUpsertWithoutSettingsInput
    connect?: FormWhereUniqueInput
    update?: XOR<XOR<FormUpdateToOneWithWhereWithoutSettingsInput, FormUpdateWithoutSettingsInput>, FormUncheckedUpdateWithoutSettingsInput>
  }

  export type NotificationEmailUpdateManyWithoutFormSettingsNestedInput = {
    create?: XOR<NotificationEmailCreateWithoutFormSettingsInput, NotificationEmailUncheckedCreateWithoutFormSettingsInput> | NotificationEmailCreateWithoutFormSettingsInput[] | NotificationEmailUncheckedCreateWithoutFormSettingsInput[]
    connectOrCreate?: NotificationEmailCreateOrConnectWithoutFormSettingsInput | NotificationEmailCreateOrConnectWithoutFormSettingsInput[]
    upsert?: NotificationEmailUpsertWithWhereUniqueWithoutFormSettingsInput | NotificationEmailUpsertWithWhereUniqueWithoutFormSettingsInput[]
    createMany?: NotificationEmailCreateManyFormSettingsInputEnvelope
    set?: NotificationEmailWhereUniqueInput | NotificationEmailWhereUniqueInput[]
    disconnect?: NotificationEmailWhereUniqueInput | NotificationEmailWhereUniqueInput[]
    delete?: NotificationEmailWhereUniqueInput | NotificationEmailWhereUniqueInput[]
    connect?: NotificationEmailWhereUniqueInput | NotificationEmailWhereUniqueInput[]
    update?: NotificationEmailUpdateWithWhereUniqueWithoutFormSettingsInput | NotificationEmailUpdateWithWhereUniqueWithoutFormSettingsInput[]
    updateMany?: NotificationEmailUpdateManyWithWhereWithoutFormSettingsInput | NotificationEmailUpdateManyWithWhereWithoutFormSettingsInput[]
    deleteMany?: NotificationEmailScalarWhereInput | NotificationEmailScalarWhereInput[]
  }

  export type NotificationEmailUncheckedUpdateManyWithoutFormSettingsNestedInput = {
    create?: XOR<NotificationEmailCreateWithoutFormSettingsInput, NotificationEmailUncheckedCreateWithoutFormSettingsInput> | NotificationEmailCreateWithoutFormSettingsInput[] | NotificationEmailUncheckedCreateWithoutFormSettingsInput[]
    connectOrCreate?: NotificationEmailCreateOrConnectWithoutFormSettingsInput | NotificationEmailCreateOrConnectWithoutFormSettingsInput[]
    upsert?: NotificationEmailUpsertWithWhereUniqueWithoutFormSettingsInput | NotificationEmailUpsertWithWhereUniqueWithoutFormSettingsInput[]
    createMany?: NotificationEmailCreateManyFormSettingsInputEnvelope
    set?: NotificationEmailWhereUniqueInput | NotificationEmailWhereUniqueInput[]
    disconnect?: NotificationEmailWhereUniqueInput | NotificationEmailWhereUniqueInput[]
    delete?: NotificationEmailWhereUniqueInput | NotificationEmailWhereUniqueInput[]
    connect?: NotificationEmailWhereUniqueInput | NotificationEmailWhereUniqueInput[]
    update?: NotificationEmailUpdateWithWhereUniqueWithoutFormSettingsInput | NotificationEmailUpdateWithWhereUniqueWithoutFormSettingsInput[]
    updateMany?: NotificationEmailUpdateManyWithWhereWithoutFormSettingsInput | NotificationEmailUpdateManyWithWhereWithoutFormSettingsInput[]
    deleteMany?: NotificationEmailScalarWhereInput | NotificationEmailScalarWhereInput[]
  }

  export type FormSettingsCreateNestedOneWithoutNotificationEmailsInput = {
    create?: XOR<FormSettingsCreateWithoutNotificationEmailsInput, FormSettingsUncheckedCreateWithoutNotificationEmailsInput>
    connectOrCreate?: FormSettingsCreateOrConnectWithoutNotificationEmailsInput
    connect?: FormSettingsWhereUniqueInput
  }

  export type FormSettingsUpdateOneRequiredWithoutNotificationEmailsNestedInput = {
    create?: XOR<FormSettingsCreateWithoutNotificationEmailsInput, FormSettingsUncheckedCreateWithoutNotificationEmailsInput>
    connectOrCreate?: FormSettingsCreateOrConnectWithoutNotificationEmailsInput
    upsert?: FormSettingsUpsertWithoutNotificationEmailsInput
    connect?: FormSettingsWhereUniqueInput
    update?: XOR<XOR<FormSettingsUpdateToOneWithWhereWithoutNotificationEmailsInput, FormSettingsUpdateWithoutNotificationEmailsInput>, FormSettingsUncheckedUpdateWithoutNotificationEmailsInput>
  }

  export type FormCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<FormCreateWithoutQuestionsInput, FormUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: FormCreateOrConnectWithoutQuestionsInput
    connect?: FormWhereUniqueInput
  }

  export type AnswerCreateNestedManyWithoutQuestionInput = {
    create?: XOR<AnswerCreateWithoutQuestionInput, AnswerUncheckedCreateWithoutQuestionInput> | AnswerCreateWithoutQuestionInput[] | AnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutQuestionInput | AnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: AnswerCreateManyQuestionInputEnvelope
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
  }

  export type ConditionalLogicCreateNestedOneWithoutQuestionInput = {
    create?: XOR<ConditionalLogicCreateWithoutQuestionInput, ConditionalLogicUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: ConditionalLogicCreateOrConnectWithoutQuestionInput
    connect?: ConditionalLogicWhereUniqueInput
  }

  export type AnswerUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<AnswerCreateWithoutQuestionInput, AnswerUncheckedCreateWithoutQuestionInput> | AnswerCreateWithoutQuestionInput[] | AnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutQuestionInput | AnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: AnswerCreateManyQuestionInputEnvelope
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
  }

  export type ConditionalLogicUncheckedCreateNestedOneWithoutQuestionInput = {
    create?: XOR<ConditionalLogicCreateWithoutQuestionInput, ConditionalLogicUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: ConditionalLogicCreateOrConnectWithoutQuestionInput
    connect?: ConditionalLogicWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FormUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<FormCreateWithoutQuestionsInput, FormUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: FormCreateOrConnectWithoutQuestionsInput
    upsert?: FormUpsertWithoutQuestionsInput
    connect?: FormWhereUniqueInput
    update?: XOR<XOR<FormUpdateToOneWithWhereWithoutQuestionsInput, FormUpdateWithoutQuestionsInput>, FormUncheckedUpdateWithoutQuestionsInput>
  }

  export type AnswerUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<AnswerCreateWithoutQuestionInput, AnswerUncheckedCreateWithoutQuestionInput> | AnswerCreateWithoutQuestionInput[] | AnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutQuestionInput | AnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: AnswerUpsertWithWhereUniqueWithoutQuestionInput | AnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: AnswerCreateManyQuestionInputEnvelope
    set?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    disconnect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    delete?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    update?: AnswerUpdateWithWhereUniqueWithoutQuestionInput | AnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: AnswerUpdateManyWithWhereWithoutQuestionInput | AnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: AnswerScalarWhereInput | AnswerScalarWhereInput[]
  }

  export type ConditionalLogicUpdateOneWithoutQuestionNestedInput = {
    create?: XOR<ConditionalLogicCreateWithoutQuestionInput, ConditionalLogicUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: ConditionalLogicCreateOrConnectWithoutQuestionInput
    upsert?: ConditionalLogicUpsertWithoutQuestionInput
    disconnect?: ConditionalLogicWhereInput | boolean
    delete?: ConditionalLogicWhereInput | boolean
    connect?: ConditionalLogicWhereUniqueInput
    update?: XOR<XOR<ConditionalLogicUpdateToOneWithWhereWithoutQuestionInput, ConditionalLogicUpdateWithoutQuestionInput>, ConditionalLogicUncheckedUpdateWithoutQuestionInput>
  }

  export type AnswerUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<AnswerCreateWithoutQuestionInput, AnswerUncheckedCreateWithoutQuestionInput> | AnswerCreateWithoutQuestionInput[] | AnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutQuestionInput | AnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: AnswerUpsertWithWhereUniqueWithoutQuestionInput | AnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: AnswerCreateManyQuestionInputEnvelope
    set?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    disconnect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    delete?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    update?: AnswerUpdateWithWhereUniqueWithoutQuestionInput | AnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: AnswerUpdateManyWithWhereWithoutQuestionInput | AnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: AnswerScalarWhereInput | AnswerScalarWhereInput[]
  }

  export type ConditionalLogicUncheckedUpdateOneWithoutQuestionNestedInput = {
    create?: XOR<ConditionalLogicCreateWithoutQuestionInput, ConditionalLogicUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: ConditionalLogicCreateOrConnectWithoutQuestionInput
    upsert?: ConditionalLogicUpsertWithoutQuestionInput
    disconnect?: ConditionalLogicWhereInput | boolean
    delete?: ConditionalLogicWhereInput | boolean
    connect?: ConditionalLogicWhereUniqueInput
    update?: XOR<XOR<ConditionalLogicUpdateToOneWithWhereWithoutQuestionInput, ConditionalLogicUpdateWithoutQuestionInput>, ConditionalLogicUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionCreateNestedOneWithoutConditionalLogicInput = {
    create?: XOR<QuestionCreateWithoutConditionalLogicInput, QuestionUncheckedCreateWithoutConditionalLogicInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutConditionalLogicInput
    connect?: QuestionWhereUniqueInput
  }

  export type ConditionalRuleCreateNestedManyWithoutConditionalLogicInput = {
    create?: XOR<ConditionalRuleCreateWithoutConditionalLogicInput, ConditionalRuleUncheckedCreateWithoutConditionalLogicInput> | ConditionalRuleCreateWithoutConditionalLogicInput[] | ConditionalRuleUncheckedCreateWithoutConditionalLogicInput[]
    connectOrCreate?: ConditionalRuleCreateOrConnectWithoutConditionalLogicInput | ConditionalRuleCreateOrConnectWithoutConditionalLogicInput[]
    createMany?: ConditionalRuleCreateManyConditionalLogicInputEnvelope
    connect?: ConditionalRuleWhereUniqueInput | ConditionalRuleWhereUniqueInput[]
  }

  export type ConditionalRuleUncheckedCreateNestedManyWithoutConditionalLogicInput = {
    create?: XOR<ConditionalRuleCreateWithoutConditionalLogicInput, ConditionalRuleUncheckedCreateWithoutConditionalLogicInput> | ConditionalRuleCreateWithoutConditionalLogicInput[] | ConditionalRuleUncheckedCreateWithoutConditionalLogicInput[]
    connectOrCreate?: ConditionalRuleCreateOrConnectWithoutConditionalLogicInput | ConditionalRuleCreateOrConnectWithoutConditionalLogicInput[]
    createMany?: ConditionalRuleCreateManyConditionalLogicInputEnvelope
    connect?: ConditionalRuleWhereUniqueInput | ConditionalRuleWhereUniqueInput[]
  }

  export type QuestionUpdateOneRequiredWithoutConditionalLogicNestedInput = {
    create?: XOR<QuestionCreateWithoutConditionalLogicInput, QuestionUncheckedCreateWithoutConditionalLogicInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutConditionalLogicInput
    upsert?: QuestionUpsertWithoutConditionalLogicInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutConditionalLogicInput, QuestionUpdateWithoutConditionalLogicInput>, QuestionUncheckedUpdateWithoutConditionalLogicInput>
  }

  export type ConditionalRuleUpdateManyWithoutConditionalLogicNestedInput = {
    create?: XOR<ConditionalRuleCreateWithoutConditionalLogicInput, ConditionalRuleUncheckedCreateWithoutConditionalLogicInput> | ConditionalRuleCreateWithoutConditionalLogicInput[] | ConditionalRuleUncheckedCreateWithoutConditionalLogicInput[]
    connectOrCreate?: ConditionalRuleCreateOrConnectWithoutConditionalLogicInput | ConditionalRuleCreateOrConnectWithoutConditionalLogicInput[]
    upsert?: ConditionalRuleUpsertWithWhereUniqueWithoutConditionalLogicInput | ConditionalRuleUpsertWithWhereUniqueWithoutConditionalLogicInput[]
    createMany?: ConditionalRuleCreateManyConditionalLogicInputEnvelope
    set?: ConditionalRuleWhereUniqueInput | ConditionalRuleWhereUniqueInput[]
    disconnect?: ConditionalRuleWhereUniqueInput | ConditionalRuleWhereUniqueInput[]
    delete?: ConditionalRuleWhereUniqueInput | ConditionalRuleWhereUniqueInput[]
    connect?: ConditionalRuleWhereUniqueInput | ConditionalRuleWhereUniqueInput[]
    update?: ConditionalRuleUpdateWithWhereUniqueWithoutConditionalLogicInput | ConditionalRuleUpdateWithWhereUniqueWithoutConditionalLogicInput[]
    updateMany?: ConditionalRuleUpdateManyWithWhereWithoutConditionalLogicInput | ConditionalRuleUpdateManyWithWhereWithoutConditionalLogicInput[]
    deleteMany?: ConditionalRuleScalarWhereInput | ConditionalRuleScalarWhereInput[]
  }

  export type ConditionalRuleUncheckedUpdateManyWithoutConditionalLogicNestedInput = {
    create?: XOR<ConditionalRuleCreateWithoutConditionalLogicInput, ConditionalRuleUncheckedCreateWithoutConditionalLogicInput> | ConditionalRuleCreateWithoutConditionalLogicInput[] | ConditionalRuleUncheckedCreateWithoutConditionalLogicInput[]
    connectOrCreate?: ConditionalRuleCreateOrConnectWithoutConditionalLogicInput | ConditionalRuleCreateOrConnectWithoutConditionalLogicInput[]
    upsert?: ConditionalRuleUpsertWithWhereUniqueWithoutConditionalLogicInput | ConditionalRuleUpsertWithWhereUniqueWithoutConditionalLogicInput[]
    createMany?: ConditionalRuleCreateManyConditionalLogicInputEnvelope
    set?: ConditionalRuleWhereUniqueInput | ConditionalRuleWhereUniqueInput[]
    disconnect?: ConditionalRuleWhereUniqueInput | ConditionalRuleWhereUniqueInput[]
    delete?: ConditionalRuleWhereUniqueInput | ConditionalRuleWhereUniqueInput[]
    connect?: ConditionalRuleWhereUniqueInput | ConditionalRuleWhereUniqueInput[]
    update?: ConditionalRuleUpdateWithWhereUniqueWithoutConditionalLogicInput | ConditionalRuleUpdateWithWhereUniqueWithoutConditionalLogicInput[]
    updateMany?: ConditionalRuleUpdateManyWithWhereWithoutConditionalLogicInput | ConditionalRuleUpdateManyWithWhereWithoutConditionalLogicInput[]
    deleteMany?: ConditionalRuleScalarWhereInput | ConditionalRuleScalarWhereInput[]
  }

  export type ConditionalLogicCreateNestedOneWithoutRulesInput = {
    create?: XOR<ConditionalLogicCreateWithoutRulesInput, ConditionalLogicUncheckedCreateWithoutRulesInput>
    connectOrCreate?: ConditionalLogicCreateOrConnectWithoutRulesInput
    connect?: ConditionalLogicWhereUniqueInput
  }

  export type ConditionalLogicUpdateOneRequiredWithoutRulesNestedInput = {
    create?: XOR<ConditionalLogicCreateWithoutRulesInput, ConditionalLogicUncheckedCreateWithoutRulesInput>
    connectOrCreate?: ConditionalLogicCreateOrConnectWithoutRulesInput
    upsert?: ConditionalLogicUpsertWithoutRulesInput
    connect?: ConditionalLogicWhereUniqueInput
    update?: XOR<XOR<ConditionalLogicUpdateToOneWithWhereWithoutRulesInput, ConditionalLogicUpdateWithoutRulesInput>, ConditionalLogicUncheckedUpdateWithoutRulesInput>
  }

  export type FormCreateNestedOneWithoutResponsesInput = {
    create?: XOR<FormCreateWithoutResponsesInput, FormUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: FormCreateOrConnectWithoutResponsesInput
    connect?: FormWhereUniqueInput
  }

  export type AnswerCreateNestedManyWithoutResponseInput = {
    create?: XOR<AnswerCreateWithoutResponseInput, AnswerUncheckedCreateWithoutResponseInput> | AnswerCreateWithoutResponseInput[] | AnswerUncheckedCreateWithoutResponseInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutResponseInput | AnswerCreateOrConnectWithoutResponseInput[]
    createMany?: AnswerCreateManyResponseInputEnvelope
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
  }

  export type AnswerUncheckedCreateNestedManyWithoutResponseInput = {
    create?: XOR<AnswerCreateWithoutResponseInput, AnswerUncheckedCreateWithoutResponseInput> | AnswerCreateWithoutResponseInput[] | AnswerUncheckedCreateWithoutResponseInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutResponseInput | AnswerCreateOrConnectWithoutResponseInput[]
    createMany?: AnswerCreateManyResponseInputEnvelope
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type FormUpdateOneRequiredWithoutResponsesNestedInput = {
    create?: XOR<FormCreateWithoutResponsesInput, FormUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: FormCreateOrConnectWithoutResponsesInput
    upsert?: FormUpsertWithoutResponsesInput
    connect?: FormWhereUniqueInput
    update?: XOR<XOR<FormUpdateToOneWithWhereWithoutResponsesInput, FormUpdateWithoutResponsesInput>, FormUncheckedUpdateWithoutResponsesInput>
  }

  export type AnswerUpdateManyWithoutResponseNestedInput = {
    create?: XOR<AnswerCreateWithoutResponseInput, AnswerUncheckedCreateWithoutResponseInput> | AnswerCreateWithoutResponseInput[] | AnswerUncheckedCreateWithoutResponseInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutResponseInput | AnswerCreateOrConnectWithoutResponseInput[]
    upsert?: AnswerUpsertWithWhereUniqueWithoutResponseInput | AnswerUpsertWithWhereUniqueWithoutResponseInput[]
    createMany?: AnswerCreateManyResponseInputEnvelope
    set?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    disconnect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    delete?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    update?: AnswerUpdateWithWhereUniqueWithoutResponseInput | AnswerUpdateWithWhereUniqueWithoutResponseInput[]
    updateMany?: AnswerUpdateManyWithWhereWithoutResponseInput | AnswerUpdateManyWithWhereWithoutResponseInput[]
    deleteMany?: AnswerScalarWhereInput | AnswerScalarWhereInput[]
  }

  export type AnswerUncheckedUpdateManyWithoutResponseNestedInput = {
    create?: XOR<AnswerCreateWithoutResponseInput, AnswerUncheckedCreateWithoutResponseInput> | AnswerCreateWithoutResponseInput[] | AnswerUncheckedCreateWithoutResponseInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutResponseInput | AnswerCreateOrConnectWithoutResponseInput[]
    upsert?: AnswerUpsertWithWhereUniqueWithoutResponseInput | AnswerUpsertWithWhereUniqueWithoutResponseInput[]
    createMany?: AnswerCreateManyResponseInputEnvelope
    set?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    disconnect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    delete?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    update?: AnswerUpdateWithWhereUniqueWithoutResponseInput | AnswerUpdateWithWhereUniqueWithoutResponseInput[]
    updateMany?: AnswerUpdateManyWithWhereWithoutResponseInput | AnswerUpdateManyWithWhereWithoutResponseInput[]
    deleteMany?: AnswerScalarWhereInput | AnswerScalarWhereInput[]
  }

  export type QuestionCreateNestedOneWithoutAnswersInput = {
    create?: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutAnswersInput
    connect?: QuestionWhereUniqueInput
  }

  export type ResponseCreateNestedOneWithoutAnswersInput = {
    create?: XOR<ResponseCreateWithoutAnswersInput, ResponseUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: ResponseCreateOrConnectWithoutAnswersInput
    connect?: ResponseWhereUniqueInput
  }

  export type QuestionUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutAnswersInput
    upsert?: QuestionUpsertWithoutAnswersInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutAnswersInput, QuestionUpdateWithoutAnswersInput>, QuestionUncheckedUpdateWithoutAnswersInput>
  }

  export type ResponseUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<ResponseCreateWithoutAnswersInput, ResponseUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: ResponseCreateOrConnectWithoutAnswersInput
    upsert?: ResponseUpsertWithoutAnswersInput
    connect?: ResponseWhereUniqueInput
    update?: XOR<XOR<ResponseUpdateToOneWithWhereWithoutAnswersInput, ResponseUpdateWithoutAnswersInput>, ResponseUncheckedUpdateWithoutAnswersInput>
  }

  export type FormCreateNestedOneWithoutVisitsInput = {
    create?: XOR<FormCreateWithoutVisitsInput, FormUncheckedCreateWithoutVisitsInput>
    connectOrCreate?: FormCreateOrConnectWithoutVisitsInput
    connect?: FormWhereUniqueInput
  }

  export type FormUpdateOneRequiredWithoutVisitsNestedInput = {
    create?: XOR<FormCreateWithoutVisitsInput, FormUncheckedCreateWithoutVisitsInput>
    connectOrCreate?: FormCreateOrConnectWithoutVisitsInput
    upsert?: FormUpsertWithoutVisitsInput
    connect?: FormWhereUniqueInput
    update?: XOR<XOR<FormUpdateToOneWithWhereWithoutVisitsInput, FormUpdateWithoutVisitsInput>, FormUncheckedUpdateWithoutVisitsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FormCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: QuestionCreateNestedManyWithoutFormInput
    responses?: ResponseCreateNestedManyWithoutFormInput
    visits?: FormVisitCreateNestedManyWithoutFormInput
    theme?: ThemeCreateNestedOneWithoutFormInput
    settings?: FormSettingsCreateNestedOneWithoutFormInput
  }

  export type FormUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutFormInput
    responses?: ResponseUncheckedCreateNestedManyWithoutFormInput
    visits?: FormVisitUncheckedCreateNestedManyWithoutFormInput
    theme?: ThemeUncheckedCreateNestedOneWithoutFormInput
    settings?: FormSettingsUncheckedCreateNestedOneWithoutFormInput
  }

  export type FormCreateOrConnectWithoutUserInput = {
    where: FormWhereUniqueInput
    create: XOR<FormCreateWithoutUserInput, FormUncheckedCreateWithoutUserInput>
  }

  export type FormCreateManyUserInputEnvelope = {
    data: FormCreateManyUserInput | FormCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FormUpsertWithWhereUniqueWithoutUserInput = {
    where: FormWhereUniqueInput
    update: XOR<FormUpdateWithoutUserInput, FormUncheckedUpdateWithoutUserInput>
    create: XOR<FormCreateWithoutUserInput, FormUncheckedCreateWithoutUserInput>
  }

  export type FormUpdateWithWhereUniqueWithoutUserInput = {
    where: FormWhereUniqueInput
    data: XOR<FormUpdateWithoutUserInput, FormUncheckedUpdateWithoutUserInput>
  }

  export type FormUpdateManyWithWhereWithoutUserInput = {
    where: FormScalarWhereInput
    data: XOR<FormUpdateManyMutationInput, FormUncheckedUpdateManyWithoutUserInput>
  }

  export type FormScalarWhereInput = {
    AND?: FormScalarWhereInput | FormScalarWhereInput[]
    OR?: FormScalarWhereInput[]
    NOT?: FormScalarWhereInput | FormScalarWhereInput[]
    id?: StringFilter<"Form"> | string
    title?: StringFilter<"Form"> | string
    description?: StringNullableFilter<"Form"> | string | null
    isPublished?: BoolFilter<"Form"> | boolean
    createdAt?: DateTimeFilter<"Form"> | Date | string
    updatedAt?: DateTimeFilter<"Form"> | Date | string
    userId?: StringFilter<"Form"> | string
  }

  export type UserCreateWithoutFormsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutFormsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutFormsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFormsInput, UserUncheckedCreateWithoutFormsInput>
  }

  export type QuestionCreateWithoutFormInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    isRequired?: boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order: number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    answers?: AnswerCreateNestedManyWithoutQuestionInput
    conditionalLogic?: ConditionalLogicCreateNestedOneWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutFormInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    isRequired?: boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order: number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    answers?: AnswerUncheckedCreateNestedManyWithoutQuestionInput
    conditionalLogic?: ConditionalLogicUncheckedCreateNestedOneWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutFormInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutFormInput, QuestionUncheckedCreateWithoutFormInput>
  }

  export type QuestionCreateManyFormInputEnvelope = {
    data: QuestionCreateManyFormInput | QuestionCreateManyFormInput[]
    skipDuplicates?: boolean
  }

  export type ResponseCreateWithoutFormInput = {
    id?: string
    respondentId?: string
    isCompleted?: boolean
    startedAt?: Date | string
    completedAt?: Date | string | null
    answers?: AnswerCreateNestedManyWithoutResponseInput
  }

  export type ResponseUncheckedCreateWithoutFormInput = {
    id?: string
    respondentId?: string
    isCompleted?: boolean
    startedAt?: Date | string
    completedAt?: Date | string | null
    answers?: AnswerUncheckedCreateNestedManyWithoutResponseInput
  }

  export type ResponseCreateOrConnectWithoutFormInput = {
    where: ResponseWhereUniqueInput
    create: XOR<ResponseCreateWithoutFormInput, ResponseUncheckedCreateWithoutFormInput>
  }

  export type ResponseCreateManyFormInputEnvelope = {
    data: ResponseCreateManyFormInput | ResponseCreateManyFormInput[]
    skipDuplicates?: boolean
  }

  export type FormVisitCreateWithoutFormInput = {
    id?: string
    visitedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    referrer?: string | null
  }

  export type FormVisitUncheckedCreateWithoutFormInput = {
    id?: string
    visitedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    referrer?: string | null
  }

  export type FormVisitCreateOrConnectWithoutFormInput = {
    where: FormVisitWhereUniqueInput
    create: XOR<FormVisitCreateWithoutFormInput, FormVisitUncheckedCreateWithoutFormInput>
  }

  export type FormVisitCreateManyFormInputEnvelope = {
    data: FormVisitCreateManyFormInput | FormVisitCreateManyFormInput[]
    skipDuplicates?: boolean
  }

  export type ThemeCreateWithoutFormInput = {
    id?: string
    primaryColor?: string
    backgroundColor?: string
    fontFamily?: string
  }

  export type ThemeUncheckedCreateWithoutFormInput = {
    id?: string
    primaryColor?: string
    backgroundColor?: string
    fontFamily?: string
  }

  export type ThemeCreateOrConnectWithoutFormInput = {
    where: ThemeWhereUniqueInput
    create: XOR<ThemeCreateWithoutFormInput, ThemeUncheckedCreateWithoutFormInput>
  }

  export type FormSettingsCreateWithoutFormInput = {
    id?: string
    requireSignIn?: boolean
    limitOneResponsePerUser?: boolean
    showProgressBar?: boolean
    shuffleQuestions?: boolean
    confirmationMessage?: string
    redirectUrl?: string | null
    notifyOnSubmission?: boolean
    notificationEmails?: NotificationEmailCreateNestedManyWithoutFormSettingsInput
  }

  export type FormSettingsUncheckedCreateWithoutFormInput = {
    id?: string
    requireSignIn?: boolean
    limitOneResponsePerUser?: boolean
    showProgressBar?: boolean
    shuffleQuestions?: boolean
    confirmationMessage?: string
    redirectUrl?: string | null
    notifyOnSubmission?: boolean
    notificationEmails?: NotificationEmailUncheckedCreateNestedManyWithoutFormSettingsInput
  }

  export type FormSettingsCreateOrConnectWithoutFormInput = {
    where: FormSettingsWhereUniqueInput
    create: XOR<FormSettingsCreateWithoutFormInput, FormSettingsUncheckedCreateWithoutFormInput>
  }

  export type UserUpsertWithoutFormsInput = {
    update: XOR<UserUpdateWithoutFormsInput, UserUncheckedUpdateWithoutFormsInput>
    create: XOR<UserCreateWithoutFormsInput, UserUncheckedCreateWithoutFormsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFormsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFormsInput, UserUncheckedUpdateWithoutFormsInput>
  }

  export type UserUpdateWithoutFormsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutFormsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUpsertWithWhereUniqueWithoutFormInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutFormInput, QuestionUncheckedUpdateWithoutFormInput>
    create: XOR<QuestionCreateWithoutFormInput, QuestionUncheckedCreateWithoutFormInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutFormInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutFormInput, QuestionUncheckedUpdateWithoutFormInput>
  }

  export type QuestionUpdateManyWithWhereWithoutFormInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutFormInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    id?: StringFilter<"Question"> | string
    formId?: StringFilter<"Question"> | string
    title?: StringFilter<"Question"> | string
    description?: StringNullableFilter<"Question"> | string | null
    type?: StringFilter<"Question"> | string
    isRequired?: BoolFilter<"Question"> | boolean
    options?: JsonNullableFilter<"Question">
    order?: IntFilter<"Question"> | number
    validation?: JsonNullableFilter<"Question">
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
  }

  export type ResponseUpsertWithWhereUniqueWithoutFormInput = {
    where: ResponseWhereUniqueInput
    update: XOR<ResponseUpdateWithoutFormInput, ResponseUncheckedUpdateWithoutFormInput>
    create: XOR<ResponseCreateWithoutFormInput, ResponseUncheckedCreateWithoutFormInput>
  }

  export type ResponseUpdateWithWhereUniqueWithoutFormInput = {
    where: ResponseWhereUniqueInput
    data: XOR<ResponseUpdateWithoutFormInput, ResponseUncheckedUpdateWithoutFormInput>
  }

  export type ResponseUpdateManyWithWhereWithoutFormInput = {
    where: ResponseScalarWhereInput
    data: XOR<ResponseUpdateManyMutationInput, ResponseUncheckedUpdateManyWithoutFormInput>
  }

  export type ResponseScalarWhereInput = {
    AND?: ResponseScalarWhereInput | ResponseScalarWhereInput[]
    OR?: ResponseScalarWhereInput[]
    NOT?: ResponseScalarWhereInput | ResponseScalarWhereInput[]
    id?: StringFilter<"Response"> | string
    formId?: StringFilter<"Response"> | string
    respondentId?: StringFilter<"Response"> | string
    isCompleted?: BoolFilter<"Response"> | boolean
    startedAt?: DateTimeFilter<"Response"> | Date | string
    completedAt?: DateTimeNullableFilter<"Response"> | Date | string | null
  }

  export type FormVisitUpsertWithWhereUniqueWithoutFormInput = {
    where: FormVisitWhereUniqueInput
    update: XOR<FormVisitUpdateWithoutFormInput, FormVisitUncheckedUpdateWithoutFormInput>
    create: XOR<FormVisitCreateWithoutFormInput, FormVisitUncheckedCreateWithoutFormInput>
  }

  export type FormVisitUpdateWithWhereUniqueWithoutFormInput = {
    where: FormVisitWhereUniqueInput
    data: XOR<FormVisitUpdateWithoutFormInput, FormVisitUncheckedUpdateWithoutFormInput>
  }

  export type FormVisitUpdateManyWithWhereWithoutFormInput = {
    where: FormVisitScalarWhereInput
    data: XOR<FormVisitUpdateManyMutationInput, FormVisitUncheckedUpdateManyWithoutFormInput>
  }

  export type FormVisitScalarWhereInput = {
    AND?: FormVisitScalarWhereInput | FormVisitScalarWhereInput[]
    OR?: FormVisitScalarWhereInput[]
    NOT?: FormVisitScalarWhereInput | FormVisitScalarWhereInput[]
    id?: StringFilter<"FormVisit"> | string
    formId?: StringFilter<"FormVisit"> | string
    visitedAt?: DateTimeFilter<"FormVisit"> | Date | string
    ipAddress?: StringNullableFilter<"FormVisit"> | string | null
    userAgent?: StringNullableFilter<"FormVisit"> | string | null
    referrer?: StringNullableFilter<"FormVisit"> | string | null
  }

  export type ThemeUpsertWithoutFormInput = {
    update: XOR<ThemeUpdateWithoutFormInput, ThemeUncheckedUpdateWithoutFormInput>
    create: XOR<ThemeCreateWithoutFormInput, ThemeUncheckedCreateWithoutFormInput>
    where?: ThemeWhereInput
  }

  export type ThemeUpdateToOneWithWhereWithoutFormInput = {
    where?: ThemeWhereInput
    data: XOR<ThemeUpdateWithoutFormInput, ThemeUncheckedUpdateWithoutFormInput>
  }

  export type ThemeUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    backgroundColor?: StringFieldUpdateOperationsInput | string
    fontFamily?: StringFieldUpdateOperationsInput | string
  }

  export type ThemeUncheckedUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    backgroundColor?: StringFieldUpdateOperationsInput | string
    fontFamily?: StringFieldUpdateOperationsInput | string
  }

  export type FormSettingsUpsertWithoutFormInput = {
    update: XOR<FormSettingsUpdateWithoutFormInput, FormSettingsUncheckedUpdateWithoutFormInput>
    create: XOR<FormSettingsCreateWithoutFormInput, FormSettingsUncheckedCreateWithoutFormInput>
    where?: FormSettingsWhereInput
  }

  export type FormSettingsUpdateToOneWithWhereWithoutFormInput = {
    where?: FormSettingsWhereInput
    data: XOR<FormSettingsUpdateWithoutFormInput, FormSettingsUncheckedUpdateWithoutFormInput>
  }

  export type FormSettingsUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    requireSignIn?: BoolFieldUpdateOperationsInput | boolean
    limitOneResponsePerUser?: BoolFieldUpdateOperationsInput | boolean
    showProgressBar?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    confirmationMessage?: StringFieldUpdateOperationsInput | string
    redirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnSubmission?: BoolFieldUpdateOperationsInput | boolean
    notificationEmails?: NotificationEmailUpdateManyWithoutFormSettingsNestedInput
  }

  export type FormSettingsUncheckedUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    requireSignIn?: BoolFieldUpdateOperationsInput | boolean
    limitOneResponsePerUser?: BoolFieldUpdateOperationsInput | boolean
    showProgressBar?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    confirmationMessage?: StringFieldUpdateOperationsInput | string
    redirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnSubmission?: BoolFieldUpdateOperationsInput | boolean
    notificationEmails?: NotificationEmailUncheckedUpdateManyWithoutFormSettingsNestedInput
  }

  export type FormCreateWithoutThemeInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFormsInput
    questions?: QuestionCreateNestedManyWithoutFormInput
    responses?: ResponseCreateNestedManyWithoutFormInput
    visits?: FormVisitCreateNestedManyWithoutFormInput
    settings?: FormSettingsCreateNestedOneWithoutFormInput
  }

  export type FormUncheckedCreateWithoutThemeInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    questions?: QuestionUncheckedCreateNestedManyWithoutFormInput
    responses?: ResponseUncheckedCreateNestedManyWithoutFormInput
    visits?: FormVisitUncheckedCreateNestedManyWithoutFormInput
    settings?: FormSettingsUncheckedCreateNestedOneWithoutFormInput
  }

  export type FormCreateOrConnectWithoutThemeInput = {
    where: FormWhereUniqueInput
    create: XOR<FormCreateWithoutThemeInput, FormUncheckedCreateWithoutThemeInput>
  }

  export type FormUpsertWithoutThemeInput = {
    update: XOR<FormUpdateWithoutThemeInput, FormUncheckedUpdateWithoutThemeInput>
    create: XOR<FormCreateWithoutThemeInput, FormUncheckedCreateWithoutThemeInput>
    where?: FormWhereInput
  }

  export type FormUpdateToOneWithWhereWithoutThemeInput = {
    where?: FormWhereInput
    data: XOR<FormUpdateWithoutThemeInput, FormUncheckedUpdateWithoutThemeInput>
  }

  export type FormUpdateWithoutThemeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFormsNestedInput
    questions?: QuestionUpdateManyWithoutFormNestedInput
    responses?: ResponseUpdateManyWithoutFormNestedInput
    visits?: FormVisitUpdateManyWithoutFormNestedInput
    settings?: FormSettingsUpdateOneWithoutFormNestedInput
  }

  export type FormUncheckedUpdateWithoutThemeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    questions?: QuestionUncheckedUpdateManyWithoutFormNestedInput
    responses?: ResponseUncheckedUpdateManyWithoutFormNestedInput
    visits?: FormVisitUncheckedUpdateManyWithoutFormNestedInput
    settings?: FormSettingsUncheckedUpdateOneWithoutFormNestedInput
  }

  export type FormCreateWithoutSettingsInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFormsInput
    questions?: QuestionCreateNestedManyWithoutFormInput
    responses?: ResponseCreateNestedManyWithoutFormInput
    visits?: FormVisitCreateNestedManyWithoutFormInput
    theme?: ThemeCreateNestedOneWithoutFormInput
  }

  export type FormUncheckedCreateWithoutSettingsInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    questions?: QuestionUncheckedCreateNestedManyWithoutFormInput
    responses?: ResponseUncheckedCreateNestedManyWithoutFormInput
    visits?: FormVisitUncheckedCreateNestedManyWithoutFormInput
    theme?: ThemeUncheckedCreateNestedOneWithoutFormInput
  }

  export type FormCreateOrConnectWithoutSettingsInput = {
    where: FormWhereUniqueInput
    create: XOR<FormCreateWithoutSettingsInput, FormUncheckedCreateWithoutSettingsInput>
  }

  export type NotificationEmailCreateWithoutFormSettingsInput = {
    id?: string
    email: string
  }

  export type NotificationEmailUncheckedCreateWithoutFormSettingsInput = {
    id?: string
    email: string
  }

  export type NotificationEmailCreateOrConnectWithoutFormSettingsInput = {
    where: NotificationEmailWhereUniqueInput
    create: XOR<NotificationEmailCreateWithoutFormSettingsInput, NotificationEmailUncheckedCreateWithoutFormSettingsInput>
  }

  export type NotificationEmailCreateManyFormSettingsInputEnvelope = {
    data: NotificationEmailCreateManyFormSettingsInput | NotificationEmailCreateManyFormSettingsInput[]
    skipDuplicates?: boolean
  }

  export type FormUpsertWithoutSettingsInput = {
    update: XOR<FormUpdateWithoutSettingsInput, FormUncheckedUpdateWithoutSettingsInput>
    create: XOR<FormCreateWithoutSettingsInput, FormUncheckedCreateWithoutSettingsInput>
    where?: FormWhereInput
  }

  export type FormUpdateToOneWithWhereWithoutSettingsInput = {
    where?: FormWhereInput
    data: XOR<FormUpdateWithoutSettingsInput, FormUncheckedUpdateWithoutSettingsInput>
  }

  export type FormUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFormsNestedInput
    questions?: QuestionUpdateManyWithoutFormNestedInput
    responses?: ResponseUpdateManyWithoutFormNestedInput
    visits?: FormVisitUpdateManyWithoutFormNestedInput
    theme?: ThemeUpdateOneWithoutFormNestedInput
  }

  export type FormUncheckedUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    questions?: QuestionUncheckedUpdateManyWithoutFormNestedInput
    responses?: ResponseUncheckedUpdateManyWithoutFormNestedInput
    visits?: FormVisitUncheckedUpdateManyWithoutFormNestedInput
    theme?: ThemeUncheckedUpdateOneWithoutFormNestedInput
  }

  export type NotificationEmailUpsertWithWhereUniqueWithoutFormSettingsInput = {
    where: NotificationEmailWhereUniqueInput
    update: XOR<NotificationEmailUpdateWithoutFormSettingsInput, NotificationEmailUncheckedUpdateWithoutFormSettingsInput>
    create: XOR<NotificationEmailCreateWithoutFormSettingsInput, NotificationEmailUncheckedCreateWithoutFormSettingsInput>
  }

  export type NotificationEmailUpdateWithWhereUniqueWithoutFormSettingsInput = {
    where: NotificationEmailWhereUniqueInput
    data: XOR<NotificationEmailUpdateWithoutFormSettingsInput, NotificationEmailUncheckedUpdateWithoutFormSettingsInput>
  }

  export type NotificationEmailUpdateManyWithWhereWithoutFormSettingsInput = {
    where: NotificationEmailScalarWhereInput
    data: XOR<NotificationEmailUpdateManyMutationInput, NotificationEmailUncheckedUpdateManyWithoutFormSettingsInput>
  }

  export type NotificationEmailScalarWhereInput = {
    AND?: NotificationEmailScalarWhereInput | NotificationEmailScalarWhereInput[]
    OR?: NotificationEmailScalarWhereInput[]
    NOT?: NotificationEmailScalarWhereInput | NotificationEmailScalarWhereInput[]
    id?: StringFilter<"NotificationEmail"> | string
    email?: StringFilter<"NotificationEmail"> | string
    formSettingsId?: StringFilter<"NotificationEmail"> | string
  }

  export type FormSettingsCreateWithoutNotificationEmailsInput = {
    id?: string
    requireSignIn?: boolean
    limitOneResponsePerUser?: boolean
    showProgressBar?: boolean
    shuffleQuestions?: boolean
    confirmationMessage?: string
    redirectUrl?: string | null
    notifyOnSubmission?: boolean
    form: FormCreateNestedOneWithoutSettingsInput
  }

  export type FormSettingsUncheckedCreateWithoutNotificationEmailsInput = {
    id?: string
    formId: string
    requireSignIn?: boolean
    limitOneResponsePerUser?: boolean
    showProgressBar?: boolean
    shuffleQuestions?: boolean
    confirmationMessage?: string
    redirectUrl?: string | null
    notifyOnSubmission?: boolean
  }

  export type FormSettingsCreateOrConnectWithoutNotificationEmailsInput = {
    where: FormSettingsWhereUniqueInput
    create: XOR<FormSettingsCreateWithoutNotificationEmailsInput, FormSettingsUncheckedCreateWithoutNotificationEmailsInput>
  }

  export type FormSettingsUpsertWithoutNotificationEmailsInput = {
    update: XOR<FormSettingsUpdateWithoutNotificationEmailsInput, FormSettingsUncheckedUpdateWithoutNotificationEmailsInput>
    create: XOR<FormSettingsCreateWithoutNotificationEmailsInput, FormSettingsUncheckedCreateWithoutNotificationEmailsInput>
    where?: FormSettingsWhereInput
  }

  export type FormSettingsUpdateToOneWithWhereWithoutNotificationEmailsInput = {
    where?: FormSettingsWhereInput
    data: XOR<FormSettingsUpdateWithoutNotificationEmailsInput, FormSettingsUncheckedUpdateWithoutNotificationEmailsInput>
  }

  export type FormSettingsUpdateWithoutNotificationEmailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    requireSignIn?: BoolFieldUpdateOperationsInput | boolean
    limitOneResponsePerUser?: BoolFieldUpdateOperationsInput | boolean
    showProgressBar?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    confirmationMessage?: StringFieldUpdateOperationsInput | string
    redirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnSubmission?: BoolFieldUpdateOperationsInput | boolean
    form?: FormUpdateOneRequiredWithoutSettingsNestedInput
  }

  export type FormSettingsUncheckedUpdateWithoutNotificationEmailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    requireSignIn?: BoolFieldUpdateOperationsInput | boolean
    limitOneResponsePerUser?: BoolFieldUpdateOperationsInput | boolean
    showProgressBar?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    confirmationMessage?: StringFieldUpdateOperationsInput | string
    redirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnSubmission?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FormCreateWithoutQuestionsInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFormsInput
    responses?: ResponseCreateNestedManyWithoutFormInput
    visits?: FormVisitCreateNestedManyWithoutFormInput
    theme?: ThemeCreateNestedOneWithoutFormInput
    settings?: FormSettingsCreateNestedOneWithoutFormInput
  }

  export type FormUncheckedCreateWithoutQuestionsInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    responses?: ResponseUncheckedCreateNestedManyWithoutFormInput
    visits?: FormVisitUncheckedCreateNestedManyWithoutFormInput
    theme?: ThemeUncheckedCreateNestedOneWithoutFormInput
    settings?: FormSettingsUncheckedCreateNestedOneWithoutFormInput
  }

  export type FormCreateOrConnectWithoutQuestionsInput = {
    where: FormWhereUniqueInput
    create: XOR<FormCreateWithoutQuestionsInput, FormUncheckedCreateWithoutQuestionsInput>
  }

  export type AnswerCreateWithoutQuestionInput = {
    id?: string
    value?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
    response: ResponseCreateNestedOneWithoutAnswersInput
  }

  export type AnswerUncheckedCreateWithoutQuestionInput = {
    id?: string
    responseId: string
    value?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type AnswerCreateOrConnectWithoutQuestionInput = {
    where: AnswerWhereUniqueInput
    create: XOR<AnswerCreateWithoutQuestionInput, AnswerUncheckedCreateWithoutQuestionInput>
  }

  export type AnswerCreateManyQuestionInputEnvelope = {
    data: AnswerCreateManyQuestionInput | AnswerCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type ConditionalLogicCreateWithoutQuestionInput = {
    id?: string
    enabled?: boolean
    rules?: ConditionalRuleCreateNestedManyWithoutConditionalLogicInput
  }

  export type ConditionalLogicUncheckedCreateWithoutQuestionInput = {
    id?: string
    enabled?: boolean
    rules?: ConditionalRuleUncheckedCreateNestedManyWithoutConditionalLogicInput
  }

  export type ConditionalLogicCreateOrConnectWithoutQuestionInput = {
    where: ConditionalLogicWhereUniqueInput
    create: XOR<ConditionalLogicCreateWithoutQuestionInput, ConditionalLogicUncheckedCreateWithoutQuestionInput>
  }

  export type FormUpsertWithoutQuestionsInput = {
    update: XOR<FormUpdateWithoutQuestionsInput, FormUncheckedUpdateWithoutQuestionsInput>
    create: XOR<FormCreateWithoutQuestionsInput, FormUncheckedCreateWithoutQuestionsInput>
    where?: FormWhereInput
  }

  export type FormUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: FormWhereInput
    data: XOR<FormUpdateWithoutQuestionsInput, FormUncheckedUpdateWithoutQuestionsInput>
  }

  export type FormUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFormsNestedInput
    responses?: ResponseUpdateManyWithoutFormNestedInput
    visits?: FormVisitUpdateManyWithoutFormNestedInput
    theme?: ThemeUpdateOneWithoutFormNestedInput
    settings?: FormSettingsUpdateOneWithoutFormNestedInput
  }

  export type FormUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    responses?: ResponseUncheckedUpdateManyWithoutFormNestedInput
    visits?: FormVisitUncheckedUpdateManyWithoutFormNestedInput
    theme?: ThemeUncheckedUpdateOneWithoutFormNestedInput
    settings?: FormSettingsUncheckedUpdateOneWithoutFormNestedInput
  }

  export type AnswerUpsertWithWhereUniqueWithoutQuestionInput = {
    where: AnswerWhereUniqueInput
    update: XOR<AnswerUpdateWithoutQuestionInput, AnswerUncheckedUpdateWithoutQuestionInput>
    create: XOR<AnswerCreateWithoutQuestionInput, AnswerUncheckedCreateWithoutQuestionInput>
  }

  export type AnswerUpdateWithWhereUniqueWithoutQuestionInput = {
    where: AnswerWhereUniqueInput
    data: XOR<AnswerUpdateWithoutQuestionInput, AnswerUncheckedUpdateWithoutQuestionInput>
  }

  export type AnswerUpdateManyWithWhereWithoutQuestionInput = {
    where: AnswerScalarWhereInput
    data: XOR<AnswerUpdateManyMutationInput, AnswerUncheckedUpdateManyWithoutQuestionInput>
  }

  export type AnswerScalarWhereInput = {
    AND?: AnswerScalarWhereInput | AnswerScalarWhereInput[]
    OR?: AnswerScalarWhereInput[]
    NOT?: AnswerScalarWhereInput | AnswerScalarWhereInput[]
    id?: StringFilter<"Answer"> | string
    questionId?: StringFilter<"Answer"> | string
    responseId?: StringFilter<"Answer"> | string
    value?: StringNullableFilter<"Answer"> | string | null
    fileUrl?: StringNullableFilter<"Answer"> | string | null
    createdAt?: DateTimeFilter<"Answer"> | Date | string
  }

  export type ConditionalLogicUpsertWithoutQuestionInput = {
    update: XOR<ConditionalLogicUpdateWithoutQuestionInput, ConditionalLogicUncheckedUpdateWithoutQuestionInput>
    create: XOR<ConditionalLogicCreateWithoutQuestionInput, ConditionalLogicUncheckedCreateWithoutQuestionInput>
    where?: ConditionalLogicWhereInput
  }

  export type ConditionalLogicUpdateToOneWithWhereWithoutQuestionInput = {
    where?: ConditionalLogicWhereInput
    data: XOR<ConditionalLogicUpdateWithoutQuestionInput, ConditionalLogicUncheckedUpdateWithoutQuestionInput>
  }

  export type ConditionalLogicUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    rules?: ConditionalRuleUpdateManyWithoutConditionalLogicNestedInput
  }

  export type ConditionalLogicUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    rules?: ConditionalRuleUncheckedUpdateManyWithoutConditionalLogicNestedInput
  }

  export type QuestionCreateWithoutConditionalLogicInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    isRequired?: boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order: number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    form: FormCreateNestedOneWithoutQuestionsInput
    answers?: AnswerCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutConditionalLogicInput = {
    id?: string
    formId: string
    title: string
    description?: string | null
    type: string
    isRequired?: boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order: number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    answers?: AnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutConditionalLogicInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutConditionalLogicInput, QuestionUncheckedCreateWithoutConditionalLogicInput>
  }

  export type ConditionalRuleCreateWithoutConditionalLogicInput = {
    id?: string
    targetQuestionId: string
    operator: string
    value?: string | null
    action?: string
  }

  export type ConditionalRuleUncheckedCreateWithoutConditionalLogicInput = {
    id?: string
    targetQuestionId: string
    operator: string
    value?: string | null
    action?: string
  }

  export type ConditionalRuleCreateOrConnectWithoutConditionalLogicInput = {
    where: ConditionalRuleWhereUniqueInput
    create: XOR<ConditionalRuleCreateWithoutConditionalLogicInput, ConditionalRuleUncheckedCreateWithoutConditionalLogicInput>
  }

  export type ConditionalRuleCreateManyConditionalLogicInputEnvelope = {
    data: ConditionalRuleCreateManyConditionalLogicInput | ConditionalRuleCreateManyConditionalLogicInput[]
    skipDuplicates?: boolean
  }

  export type QuestionUpsertWithoutConditionalLogicInput = {
    update: XOR<QuestionUpdateWithoutConditionalLogicInput, QuestionUncheckedUpdateWithoutConditionalLogicInput>
    create: XOR<QuestionCreateWithoutConditionalLogicInput, QuestionUncheckedCreateWithoutConditionalLogicInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutConditionalLogicInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutConditionalLogicInput, QuestionUncheckedUpdateWithoutConditionalLogicInput>
  }

  export type QuestionUpdateWithoutConditionalLogicInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    form?: FormUpdateOneRequiredWithoutQuestionsNestedInput
    answers?: AnswerUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutConditionalLogicInput = {
    id?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: AnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type ConditionalRuleUpsertWithWhereUniqueWithoutConditionalLogicInput = {
    where: ConditionalRuleWhereUniqueInput
    update: XOR<ConditionalRuleUpdateWithoutConditionalLogicInput, ConditionalRuleUncheckedUpdateWithoutConditionalLogicInput>
    create: XOR<ConditionalRuleCreateWithoutConditionalLogicInput, ConditionalRuleUncheckedCreateWithoutConditionalLogicInput>
  }

  export type ConditionalRuleUpdateWithWhereUniqueWithoutConditionalLogicInput = {
    where: ConditionalRuleWhereUniqueInput
    data: XOR<ConditionalRuleUpdateWithoutConditionalLogicInput, ConditionalRuleUncheckedUpdateWithoutConditionalLogicInput>
  }

  export type ConditionalRuleUpdateManyWithWhereWithoutConditionalLogicInput = {
    where: ConditionalRuleScalarWhereInput
    data: XOR<ConditionalRuleUpdateManyMutationInput, ConditionalRuleUncheckedUpdateManyWithoutConditionalLogicInput>
  }

  export type ConditionalRuleScalarWhereInput = {
    AND?: ConditionalRuleScalarWhereInput | ConditionalRuleScalarWhereInput[]
    OR?: ConditionalRuleScalarWhereInput[]
    NOT?: ConditionalRuleScalarWhereInput | ConditionalRuleScalarWhereInput[]
    id?: StringFilter<"ConditionalRule"> | string
    conditionalLogicId?: StringFilter<"ConditionalRule"> | string
    targetQuestionId?: StringFilter<"ConditionalRule"> | string
    operator?: StringFilter<"ConditionalRule"> | string
    value?: StringNullableFilter<"ConditionalRule"> | string | null
    action?: StringFilter<"ConditionalRule"> | string
  }

  export type ConditionalLogicCreateWithoutRulesInput = {
    id?: string
    enabled?: boolean
    question: QuestionCreateNestedOneWithoutConditionalLogicInput
  }

  export type ConditionalLogicUncheckedCreateWithoutRulesInput = {
    id?: string
    questionId: string
    enabled?: boolean
  }

  export type ConditionalLogicCreateOrConnectWithoutRulesInput = {
    where: ConditionalLogicWhereUniqueInput
    create: XOR<ConditionalLogicCreateWithoutRulesInput, ConditionalLogicUncheckedCreateWithoutRulesInput>
  }

  export type ConditionalLogicUpsertWithoutRulesInput = {
    update: XOR<ConditionalLogicUpdateWithoutRulesInput, ConditionalLogicUncheckedUpdateWithoutRulesInput>
    create: XOR<ConditionalLogicCreateWithoutRulesInput, ConditionalLogicUncheckedCreateWithoutRulesInput>
    where?: ConditionalLogicWhereInput
  }

  export type ConditionalLogicUpdateToOneWithWhereWithoutRulesInput = {
    where?: ConditionalLogicWhereInput
    data: XOR<ConditionalLogicUpdateWithoutRulesInput, ConditionalLogicUncheckedUpdateWithoutRulesInput>
  }

  export type ConditionalLogicUpdateWithoutRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    question?: QuestionUpdateOneRequiredWithoutConditionalLogicNestedInput
  }

  export type ConditionalLogicUncheckedUpdateWithoutRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FormCreateWithoutResponsesInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFormsInput
    questions?: QuestionCreateNestedManyWithoutFormInput
    visits?: FormVisitCreateNestedManyWithoutFormInput
    theme?: ThemeCreateNestedOneWithoutFormInput
    settings?: FormSettingsCreateNestedOneWithoutFormInput
  }

  export type FormUncheckedCreateWithoutResponsesInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    questions?: QuestionUncheckedCreateNestedManyWithoutFormInput
    visits?: FormVisitUncheckedCreateNestedManyWithoutFormInput
    theme?: ThemeUncheckedCreateNestedOneWithoutFormInput
    settings?: FormSettingsUncheckedCreateNestedOneWithoutFormInput
  }

  export type FormCreateOrConnectWithoutResponsesInput = {
    where: FormWhereUniqueInput
    create: XOR<FormCreateWithoutResponsesInput, FormUncheckedCreateWithoutResponsesInput>
  }

  export type AnswerCreateWithoutResponseInput = {
    id?: string
    value?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
    question: QuestionCreateNestedOneWithoutAnswersInput
  }

  export type AnswerUncheckedCreateWithoutResponseInput = {
    id?: string
    questionId: string
    value?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type AnswerCreateOrConnectWithoutResponseInput = {
    where: AnswerWhereUniqueInput
    create: XOR<AnswerCreateWithoutResponseInput, AnswerUncheckedCreateWithoutResponseInput>
  }

  export type AnswerCreateManyResponseInputEnvelope = {
    data: AnswerCreateManyResponseInput | AnswerCreateManyResponseInput[]
    skipDuplicates?: boolean
  }

  export type FormUpsertWithoutResponsesInput = {
    update: XOR<FormUpdateWithoutResponsesInput, FormUncheckedUpdateWithoutResponsesInput>
    create: XOR<FormCreateWithoutResponsesInput, FormUncheckedCreateWithoutResponsesInput>
    where?: FormWhereInput
  }

  export type FormUpdateToOneWithWhereWithoutResponsesInput = {
    where?: FormWhereInput
    data: XOR<FormUpdateWithoutResponsesInput, FormUncheckedUpdateWithoutResponsesInput>
  }

  export type FormUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFormsNestedInput
    questions?: QuestionUpdateManyWithoutFormNestedInput
    visits?: FormVisitUpdateManyWithoutFormNestedInput
    theme?: ThemeUpdateOneWithoutFormNestedInput
    settings?: FormSettingsUpdateOneWithoutFormNestedInput
  }

  export type FormUncheckedUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    questions?: QuestionUncheckedUpdateManyWithoutFormNestedInput
    visits?: FormVisitUncheckedUpdateManyWithoutFormNestedInput
    theme?: ThemeUncheckedUpdateOneWithoutFormNestedInput
    settings?: FormSettingsUncheckedUpdateOneWithoutFormNestedInput
  }

  export type AnswerUpsertWithWhereUniqueWithoutResponseInput = {
    where: AnswerWhereUniqueInput
    update: XOR<AnswerUpdateWithoutResponseInput, AnswerUncheckedUpdateWithoutResponseInput>
    create: XOR<AnswerCreateWithoutResponseInput, AnswerUncheckedCreateWithoutResponseInput>
  }

  export type AnswerUpdateWithWhereUniqueWithoutResponseInput = {
    where: AnswerWhereUniqueInput
    data: XOR<AnswerUpdateWithoutResponseInput, AnswerUncheckedUpdateWithoutResponseInput>
  }

  export type AnswerUpdateManyWithWhereWithoutResponseInput = {
    where: AnswerScalarWhereInput
    data: XOR<AnswerUpdateManyMutationInput, AnswerUncheckedUpdateManyWithoutResponseInput>
  }

  export type QuestionCreateWithoutAnswersInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    isRequired?: boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order: number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    form: FormCreateNestedOneWithoutQuestionsInput
    conditionalLogic?: ConditionalLogicCreateNestedOneWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutAnswersInput = {
    id?: string
    formId: string
    title: string
    description?: string | null
    type: string
    isRequired?: boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order: number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    conditionalLogic?: ConditionalLogicUncheckedCreateNestedOneWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutAnswersInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
  }

  export type ResponseCreateWithoutAnswersInput = {
    id?: string
    respondentId?: string
    isCompleted?: boolean
    startedAt?: Date | string
    completedAt?: Date | string | null
    form: FormCreateNestedOneWithoutResponsesInput
  }

  export type ResponseUncheckedCreateWithoutAnswersInput = {
    id?: string
    formId: string
    respondentId?: string
    isCompleted?: boolean
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ResponseCreateOrConnectWithoutAnswersInput = {
    where: ResponseWhereUniqueInput
    create: XOR<ResponseCreateWithoutAnswersInput, ResponseUncheckedCreateWithoutAnswersInput>
  }

  export type QuestionUpsertWithoutAnswersInput = {
    update: XOR<QuestionUpdateWithoutAnswersInput, QuestionUncheckedUpdateWithoutAnswersInput>
    create: XOR<QuestionCreateWithoutAnswersInput, QuestionUncheckedCreateWithoutAnswersInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutAnswersInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutAnswersInput, QuestionUncheckedUpdateWithoutAnswersInput>
  }

  export type QuestionUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    form?: FormUpdateOneRequiredWithoutQuestionsNestedInput
    conditionalLogic?: ConditionalLogicUpdateOneWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conditionalLogic?: ConditionalLogicUncheckedUpdateOneWithoutQuestionNestedInput
  }

  export type ResponseUpsertWithoutAnswersInput = {
    update: XOR<ResponseUpdateWithoutAnswersInput, ResponseUncheckedUpdateWithoutAnswersInput>
    create: XOR<ResponseCreateWithoutAnswersInput, ResponseUncheckedCreateWithoutAnswersInput>
    where?: ResponseWhereInput
  }

  export type ResponseUpdateToOneWithWhereWithoutAnswersInput = {
    where?: ResponseWhereInput
    data: XOR<ResponseUpdateWithoutAnswersInput, ResponseUncheckedUpdateWithoutAnswersInput>
  }

  export type ResponseUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    respondentId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    form?: FormUpdateOneRequiredWithoutResponsesNestedInput
  }

  export type ResponseUncheckedUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    respondentId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FormCreateWithoutVisitsInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFormsInput
    questions?: QuestionCreateNestedManyWithoutFormInput
    responses?: ResponseCreateNestedManyWithoutFormInput
    theme?: ThemeCreateNestedOneWithoutFormInput
    settings?: FormSettingsCreateNestedOneWithoutFormInput
  }

  export type FormUncheckedCreateWithoutVisitsInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    questions?: QuestionUncheckedCreateNestedManyWithoutFormInput
    responses?: ResponseUncheckedCreateNestedManyWithoutFormInput
    theme?: ThemeUncheckedCreateNestedOneWithoutFormInput
    settings?: FormSettingsUncheckedCreateNestedOneWithoutFormInput
  }

  export type FormCreateOrConnectWithoutVisitsInput = {
    where: FormWhereUniqueInput
    create: XOR<FormCreateWithoutVisitsInput, FormUncheckedCreateWithoutVisitsInput>
  }

  export type FormUpsertWithoutVisitsInput = {
    update: XOR<FormUpdateWithoutVisitsInput, FormUncheckedUpdateWithoutVisitsInput>
    create: XOR<FormCreateWithoutVisitsInput, FormUncheckedCreateWithoutVisitsInput>
    where?: FormWhereInput
  }

  export type FormUpdateToOneWithWhereWithoutVisitsInput = {
    where?: FormWhereInput
    data: XOR<FormUpdateWithoutVisitsInput, FormUncheckedUpdateWithoutVisitsInput>
  }

  export type FormUpdateWithoutVisitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFormsNestedInput
    questions?: QuestionUpdateManyWithoutFormNestedInput
    responses?: ResponseUpdateManyWithoutFormNestedInput
    theme?: ThemeUpdateOneWithoutFormNestedInput
    settings?: FormSettingsUpdateOneWithoutFormNestedInput
  }

  export type FormUncheckedUpdateWithoutVisitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    questions?: QuestionUncheckedUpdateManyWithoutFormNestedInput
    responses?: ResponseUncheckedUpdateManyWithoutFormNestedInput
    theme?: ThemeUncheckedUpdateOneWithoutFormNestedInput
    settings?: FormSettingsUncheckedUpdateOneWithoutFormNestedInput
  }

  export type FormCreateManyUserInput = {
    id?: string
    title: string
    description?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FormUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUpdateManyWithoutFormNestedInput
    responses?: ResponseUpdateManyWithoutFormNestedInput
    visits?: FormVisitUpdateManyWithoutFormNestedInput
    theme?: ThemeUpdateOneWithoutFormNestedInput
    settings?: FormSettingsUpdateOneWithoutFormNestedInput
  }

  export type FormUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutFormNestedInput
    responses?: ResponseUncheckedUpdateManyWithoutFormNestedInput
    visits?: FormVisitUncheckedUpdateManyWithoutFormNestedInput
    theme?: ThemeUncheckedUpdateOneWithoutFormNestedInput
    settings?: FormSettingsUncheckedUpdateOneWithoutFormNestedInput
  }

  export type FormUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateManyFormInput = {
    id?: string
    title: string
    description?: string | null
    type: string
    isRequired?: boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order: number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResponseCreateManyFormInput = {
    id?: string
    respondentId?: string
    isCompleted?: boolean
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type FormVisitCreateManyFormInput = {
    id?: string
    visitedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    referrer?: string | null
  }

  export type QuestionUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: AnswerUpdateManyWithoutQuestionNestedInput
    conditionalLogic?: ConditionalLogicUpdateOneWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: AnswerUncheckedUpdateManyWithoutQuestionNestedInput
    conditionalLogic?: ConditionalLogicUncheckedUpdateOneWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    options?: NullableJsonNullValueInput | InputJsonValue
    order?: IntFieldUpdateOperationsInput | number
    validation?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResponseUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    respondentId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    answers?: AnswerUpdateManyWithoutResponseNestedInput
  }

  export type ResponseUncheckedUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    respondentId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    answers?: AnswerUncheckedUpdateManyWithoutResponseNestedInput
  }

  export type ResponseUncheckedUpdateManyWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    respondentId?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FormVisitUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    visitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormVisitUncheckedUpdateWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    visitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormVisitUncheckedUpdateManyWithoutFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    visitedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationEmailCreateManyFormSettingsInput = {
    id?: string
    email: string
  }

  export type NotificationEmailUpdateWithoutFormSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationEmailUncheckedUpdateWithoutFormSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationEmailUncheckedUpdateManyWithoutFormSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type AnswerCreateManyQuestionInput = {
    id?: string
    responseId: string
    value?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type AnswerUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    response?: ResponseUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type AnswerUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    responseId?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    responseId?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConditionalRuleCreateManyConditionalLogicInput = {
    id?: string
    targetQuestionId: string
    operator: string
    value?: string | null
    action?: string
  }

  export type ConditionalRuleUpdateWithoutConditionalLogicInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetQuestionId?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
  }

  export type ConditionalRuleUncheckedUpdateWithoutConditionalLogicInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetQuestionId?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
  }

  export type ConditionalRuleUncheckedUpdateManyWithoutConditionalLogicInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetQuestionId?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
  }

  export type AnswerCreateManyResponseInput = {
    id?: string
    questionId: string
    value?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type AnswerUpdateWithoutResponseInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type AnswerUncheckedUpdateWithoutResponseInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerUncheckedUpdateManyWithoutResponseInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    value?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FormCountOutputTypeDefaultArgs instead
     */
    export type FormCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FormCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FormSettingsCountOutputTypeDefaultArgs instead
     */
    export type FormSettingsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FormSettingsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionCountOutputTypeDefaultArgs instead
     */
    export type QuestionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConditionalLogicCountOutputTypeDefaultArgs instead
     */
    export type ConditionalLogicCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConditionalLogicCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResponseCountOutputTypeDefaultArgs instead
     */
    export type ResponseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResponseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FormDefaultArgs instead
     */
    export type FormArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FormDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ThemeDefaultArgs instead
     */
    export type ThemeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ThemeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FormSettingsDefaultArgs instead
     */
    export type FormSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FormSettingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationEmailDefaultArgs instead
     */
    export type NotificationEmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationEmailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionDefaultArgs instead
     */
    export type QuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConditionalLogicDefaultArgs instead
     */
    export type ConditionalLogicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConditionalLogicDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConditionalRuleDefaultArgs instead
     */
    export type ConditionalRuleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConditionalRuleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResponseDefaultArgs instead
     */
    export type ResponseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResponseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AnswerDefaultArgs instead
     */
    export type AnswerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AnswerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FormVisitDefaultArgs instead
     */
    export type FormVisitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FormVisitDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}